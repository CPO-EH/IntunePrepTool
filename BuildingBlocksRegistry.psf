<File version="3.2">
  <FileID>e5b2b37d-ca65-4db2-94d9-14bb109add01</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAALZiSURBVHhe7P1XcB3JliUKvu8Zs/mZ+ZsxezbT
3fN67HVbVVf163eruqqruuqKyntTS2ZSa60lQC0BagWCAEGQBAhCa6211lprHA1NrdfY8oMADwIH
IJgJgMnkXmYL55wdEe6+IwLu27dvd/9f/heBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAg
EAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQ
CAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAI
BAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgE
AoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQC
gUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKB
QCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFA
IBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAg
EAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQ
CAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAI
BAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgE
AoFA8MMPP9w5cOhwqavr/lJXV1ehUCgUCoUfLPeXHjp0qHTNmrWl+vZ+Evbs3dcw+PA1WvqG0NI3
LBQKhUKh8IPlEGwPXiEyKg769n4S9u93LW0xDCO1vBUZFW1CoVAoFAo/UKaXt6KqcwBBIRFvNwBc
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</Preview>
  <Form>9MyZ1jybt4oAACODCAAAAAAABADtXWlzqkq3/p6q/Acqn+4tc0+DiMips1PlkGgiKioO8UsKFBIVQZkcfv27
msERHHL29u5dr5zaSZCm6X56PetZq+3m/FOTR0rftp7u7wjiH/+EsJdT5cdDc2nZyuSvzlAfGHPr
rxfDnPg/H4moS49EWzGtoaH/SP1F4v8eibyj2Y6p/NAVxzYl7ZEQHFkb9svKUjTGiv5DZlmJ6TNp
iqNTCpnhHghdmsCT89IU39dQPoeWbS4fiP7XUBuYcMdD3tBt09CsB6/B0GTBNKaKaS+DW7OObTT7
kqYUhhNFx82Bolz6keDS/6Cw7Kl7K8ZAeXgqTIcnb8lJ/XHe0Azz4SloGT/8/LJP3peX9L6i5Rzb
NvSwK1CqoagKdLOvBMVkB/o91D9lzeiPP8wAj4++d/eH7N1OPRAofMrJx2pDRbebwxV0j+XYR4Ih
2ZM3FQwYNSXnqLhtg4cn0XSUkze9ABoPT03l01CI1usjkfkryUxP44ItKWeYA8Vs2ksNWgltleDp
omFovrWdrOK1vwNpbqhL5vIpm83mstnnbKUAf8Hv12zeeKtnsy+fcJrHP7Jz/OM9G16PP+7vjly8
+LjVdqvtVtuttlttt9putf331ZarGBVNEqVuI/mc1EjlrTodlIb4PDXeOi/j8yU+rwTn9fs775Ma
/qQAn4h1OB9759XCsJnG5w4+5885v79rzkQhNZ7hT8peiRkuEXlemdqC2DJVQ/r8ObjlqlObn4sz
V0JkepYUuOpsoCKxPGojcqnf31ECx0MJ1Ex3G4icjVaIKxsWi5pSqYrIyecSca96xkTNN/YVkcpg
gbiSXumixtR8RqTUm7vcy6RSQo03Bd3fIbLZcV2uoMkrVGeaLCLLTcfl8mN5hOq9PI3IomCrXHZk
iqj+miYRma/ZQvT5/V2d6WQQ1UylKetyk9hD4f4ORlcX0ysZcDCTLuBgj5Ao6V3AwaBUrjLlREBB
biISxk4FFDIINWd8DVD4Wgncm1FxAQX0hsihcn+3FACHvooajPsCOEgLAXDo86jRG+UAha6LuGfN
ZJHXB7ImOghQMHVUnxZTgELddrnciO16vca4xePgnycNyowxib3jmIUAJzJpW0zTfUDBSiKuNuN0
QMF8hydMKZerzKpdsA61BShMSJcr3t/pFRl6uSqCdQxXLuDQX4F1FHjAQV2qYB3WKLguyQuVK04s
AVDQ84jsvM9VQIFFYB1SAlBo3d+5AlcYsy7gUGbAOhqOwOXGvIzq7wnqNAoTaEGuM1fr+VM9PWoN
Zd3qrcQ0O0BkwqYFrmZWXbA3YEkPcAhYIvssYdS3lIr6jOMis9+tQ6+rJgpRKFU2HNHBOmjMkf7C
w22SwSwBHJLDIVjDasrTqD9rZhBdHgEKSwNQ6M9qLJwPgSMLwzSRPE2AddRKsz2O3N/t4tDpzgUO
bKzufKf/IW6514mcSQEnwDckHFrlBHOwQuIs4Ijqc6THi32E6ARyEfyDwXTZBEp0rYzAjTW2BLj5
ox2yxPMVb9hXeBwB69EtU0WI3a0h5hy4EH7CyV8MyiSG5VWMNXi+RHQSC+NUT49aw+uYnZfEmSpy
Wt6lEaBg02jNEdfnyDsr9qFt+zj4rWaRQKMJrwIHylUrtI5yoYx9BXDE8xSLRMnZ7rXX01gcNucr
Dqncy0guQa9jOQIWYlZno+9Yw/YhSkJtruXnoIACVzc5hHZZYiKPI4zAMwgxuNeRbc6gfgpxjdGM
xp6hhP0b+AoX+wodySwvAh0sTkDTDBqhtCqkUEJfwsOMjKuitABESYzW54xaoOBHPok9haxiXXhP
JKHfUUrCg5cfXNLjaAtpMuh1+FJcpFSubtUKqFVG6h5HpIAjtjNgUUoopDAKeEwPxnLJqSpSZk0m
UMNQT982egoedupiPZXmKNDTnppd6+mzJtOBnoKSuIGShHrqAgqBkgQoYIVOtFm0KtZP9fTY0WQ6
aVErzsEWGpZSQi2+8Iko4IjLCWBvPkvkNUvAV7TLdA+xcp89ZtEs/0pCL4dpOkBhV08DJRFASfpC
oKeev/P0tPHW4bCSeHrKmlhHfD1FoZ4mqLWeenFHW165rfmlfd/GrcHUmJdWYkYhqmE5AmrJpS/A
Ye5zhF1zBOupz5FAT1HiZVETUMYdsRH+zf/kK+2w6L3XcYNeBnpKlzwl8fRU9HUk1NNMIdTTNuip
CtEWj/W0lt7oqRrq6ZojollQRvVTPT0JBo6kq19NKyECCvwQUTscUTYcCfR0J+p8l3kJAUWB+ZHW
kXDdDGJqqzkeS57fiTlxHBIddZ4fc/qRzfK8nh5Fwflc9pimXeuilimMYUyp4jLlrlmihiwxbfAV
kTFnAqKtxJh0dAReNBGrC+WkUkCisTSDGPPimPP+LirqhDi2nHiBwcjGSmfksYfb86TldKpNW5EB
B1FDVHnFYF/h8GuOgJ4GHDmMOTFPN1HnQHYV8PurhBptHRlBTCK684n7MJb1g5gzjEMOo87YmJMB
X0KNsplR6lRPj1rDsG4ttQb2hy22OwEUSEblgCPCmiOgp5glVU9Ple2oMzLmpBSLclE+pRYiPSiO
Q/AnCWtRBV/wCqFpEHX6MadZABQCjhRCjrR9T4E5UvM5ovocAT3t5ZMwViRTOi/DiEZh+WbOX0AX
IJu0WqxsIKpGMS4XsmQUcKRugUV7HDkScwJHOjgvg/zUy8wENO6PRgipEGlFW4dljURvrNW1nr6s
9dTnSKinaK2nmR09nRZpP8869h3F5jiRZ1nOqs2rU0AhmRY4cZsjODbyOMKXfD1FW3q6E3UCS7oh
R6Yc9l+yiJLKKqkil4Ou76PAqjyFx/b+Dnp1qKfbmZmnp2itpz5HzIAjM6Dhoua69dypnh47crxm
UkybH80gi6fTEKvbDo7f1izBvmLNklBPY2JO4AiFwDqqsp+fMt0yI0ToqYeDOeDH2zHnWk89jogb
jkBkvdHT5lpPPZakAx/bdZTUZW5yz0JyxVE5lWix4tibzXC5lp3QwVeAE6PKAUewnnocidHTlaen
66jT09NRRR3HZCQ52gFrKvP7czhv23oaHXVGxpyIa9vOV2x+cVaeldX4Ot8qm93ES4dJI67l1EwU
coRBXKgjoZ6iw6hzN+ZMPOPoKoHoiAzEHUN+KkwHBYTn3wR/Fkddz+L4mdkm5nw5M+as4jxrclGG
EXWIklhbtjvp+ztW5dqO4iKfJTXa8xXAkpbZ3dLTmJiTXuWAA34eBkeoCz4OJGgp1Dil/KwI4VnG
zRwOvZnDcaNjTtDTTdT5sh11utgnD/juJT2Oy7Pc/EiTWNYFFMBi27xuBhwR7cQo5Eigp2KEng6s
AnBAToMubB0eCjIrdFE7vcIzfPqxeU6sC9EznYGexsWcb1Cea8vq7OVf5VmNVHLeBk6wAtdxEixk
LKYNKHgcAU8OLGmxqrFmSRB1Bno6d50umLueQftHojTnENe3sAcN5jlDPT1/pvPYPKenpzjq9HBp
86ImnsgwjltI3VhaRa3s0irTcWsIcHAdRHXSgEsr4Mh0zRFF9fU06SQYhBxPDbcOzAVvioJBySIJ
PvTYTKdGumAdVcwRQYia54T89MyZTjybNjzZ05NgPKchzwIUVMDVXLmAQsCR1YYjnp7i+K1n0lOU
0KnEgQkgm3NNJPH618mYEzgCWTmP58kxSzxfsc2SnZlO8BWvx2JOHKfMP/99npUcLKRG13V5QIGe
Y12QMixoUcASK2BJz3FMlEICewhAKZVAnOMq4sEcjqenkVGnxxFbwL7C54iw5kg14Mjr/jznWk93
ok7MKq5dWzHz/kUd38+zpBoQA5gGOLDsElDgQN1CjtgBR+hFhAFwqpkB3Gg5x0REnWfHnGuOBHrq
s0QNWBLqqRoTc2JloYoUUzjMLy7Js8r8bAmxE0QJeG4LsqRExgUUIEsKOeLpad9VaJR25dAjeoah
WvLs0pjTy093o05yOcEs8fR0w5E3w/L0tHIs5sR6ilmScOnSeRlG5FFojt16tX5/Nxt0FwEOKIM4
YEnJY8mGIzR6N5GNmEIjo3LWXFkFelo7iDkDPY2IOvdjTlEadQI9DTmC9TTgSIyeRsx0JnUYjLM6
fDTPqhr9GbODAgQCwJHFhiOhnna29DQq6jwv5vTnOX09TWI9ddd66rME9BSz5LyYE3yL8n5WT48d
udKIrQ7aMo4gPRTeMQr3d2uWqCFLAj39RswJce/eTOeM257pPPjm8GjMCXq6E3U64xX6Xt8PcWv2
ipT8nB6vuKow5YShmFabqXFiQjpvAkSAcC7vns/weXpCKm+1qV0aYl2QG9ufiDO8RiCteedRawh2
zgvBubeCwPveueCtKtheQ7C/pgCvQki282by5Xii+aetwbjVdqvtVtuttlttt9putV2vtkKY/q1y
wmY+pPIcfpyZiwclzrnuf0+GY0so4SdzKpSoeX/lNiUKaH1dWF/P7l2fh9fv73JCNqis8pwJKluX
KOE2fK6vJ4LK4HpY2fq6ANfv77ZKhJVBibAy6GXwsN3rqc31oDK4nghHYVOigEvM1yXCyuB6WNn6
emn3eiIYU69EalNivi5x/khs5rhOj2X9xz8o2K5z5n6mimR+DvWHp9QjQT8S+OfJW6rw8+Fpb4fZ
ybuatmTagmEN7SHeXZRXdFsxBcmE3yfvFZWF/fD0qtuOrgimMsV7mYj/I3LB3i4ihzd3WfBJ0Cgi
vlXPLjwwqJY3pMFBRz7wp/8gr1x40+lNfYKkK9ov39XX2Gxf89r8McWPZY/t7jsEkzf6kj8GyUci
eYDQt0wkzkhiGnzG/eEOOxLvsDunlaIkv+oDZfHwREaVPj2EIt4lx0tLw7GvM5rrzYg2frLmPdnD
J3l8QCM2JRqaM9HzhoN3DEaBFXeLt0Vwp2oo+QqdPgbU1q2/DqOdJuFG6ZaN92wWFKtvDqe2YRIT
ZSIr5o8HvNkwFMLs5muJZ+/vPCcq3SrZ65BOa9KeyMX2aFDUXHnIVHsdatjrvr3Jk57bSraXUufF
krrTL+/6+MuViw2t/+lN5z6Lkxe7V1/k+nRVkztvltJivuRO662eXHzBZ7X3DqXl29VpL8l8DUrt
Za8+FaXOwHnvNqj+pLXMjyl8n9bXGky/2Ko3km0Hnj19J1+WPbpt9zoM2Z8/57J1+JetvBbaVaZP
NzS5ybSUbk7rUGQx64lVy3mnG27/893bhtmm1uW6UocZy/RgxY97bn9Crfh8rgPPWEkdzhHEulPJ
p+b8KGu9PlcpueS1i5MnbWpQevuS8/PPVqk9lIvaqJlsM+0iZ/Y6Ke591KffxfaoKr4vamKF7InZ
VK3+jgHPvr4cefa46sqlti1rVVLpLLTcZwvfUmlPuGkvn/X7MPyc5j69SbESP6mSMv1qlOte1eX8
/MePza7cwAYQtsybrd5s9Q+01bOc8kaamQwHUstESdk3BTpOouNV6KxKGsY80B3q3PLfEp3wvhuL
/4tZXGofebb25g6oHQYvdhn8tR6XdlJzekWO7i+Zoky/2fBbhHHQ2iVt3mtCu/D15EIr19+LnitY
MjCG3LJ8zIto1akyaXvYAQ4bG1jXteUt9mwNrC1rfjoTnHIIitn3cqL1J/FlKZKMLQce6MCAf4KL
8uNyynNP57mZTWAe41FOh+b+Wz5+eUB+5rtCImJzAgpoPx6oR3LPre2/CGQoacZnQ7GghTjzxBVH
ghL5Xg9l9z0pOCs+8+aNsMSqw7dlJU5YzkLzzBpDq4NGJKOyx+N2F62icdMM/qgQiCgY+uFbWqLv
bFlKe2g5kuZp1NYrbSLf9OKTzTf7TYZ68MFvmLLuxwjRbDg3Uz0vYrhlqre44frR/y12uCh2uJHx
RsYbGXcIlpUtsHhbOYuNSfragfxWSMgmHwmKSv36uYaD8OHCKYbDFxDGlL9NMdy8022K4ad4Jpq5
bphwY+GNhTcW3lh4Y+GNhTcW3lh4Y+GNhTcW3lh4Y+GNhTcW3lh4Y+EvY+EFC0BoMv1IJKlLV4BQ
MTO4v80SkPWC9WBXwEfTVqbJj7ypSLb3vb4zDZYuRC/SDhaCkKcWgmyt5sj27aGr4OdBD37zNR0X
wHPRyo4kx3xrZUe0OcWt7MCNJVJ/E95WlGCvCN4+0v+S9E/FIv5HMOZgSF8whB+vzef/vaDyrDb8
BFgrw8FAU3hFPXcQL184sreHJQ9WPb5oYD68W3Z3uPjs31uA8jvx0m97zeOIpNWmig49VgZD+zgL
qSuzMHOtpVUxaFyFdDFeP451YTP/JnBDCfOilv4O3IpF+49k0noh3lkylrwugdgr6dg+CNfhzbmr
HbfUiglYI+kDApscsTQck/gL2k+oQ00hhjpRNaAg3rL4xxBqH/0/kkfh8tYPb32rtVngKg0GQcdy
p1cMk4/02Qz7l8t+KfJq6nQuMhfS7nurf7/BuvTfRHYw2Ntf/AcR7PwROJt631qeDFDkjMX1JM1S
NGiSMviw4cmysaAvXZ78rOMVSoOHpxdJs2IWbh/jWIo9b9fUz9mxddDdCxL4VBoAT57X2i0uMVF7
q79hGrwkX3OHtYYflyQvNQfvf2frwRW/jv+oOTAXL6ojPXM4b9/fnjkEnbzACBh42uVzOOf1KXCn
gYn+UWbjAekl0J53fNXFL0U0FSV3bfvhzlsg+a/MJ7azl8wGUplvGFJ0OHJElpN/E14bcdRrfymE
Dc0koPXGnLANwveGhERMIGQilIUEJ1qA5k8yv+tssjnnpR6nHM8VFvPGvsoj1kpYCh5yqeTEPOG3
yQPWM2+aIQ2OJtXXy6SpdPqROHdu9GdNCW/3/6LAPpP5Vlx/7kN8B+K/1ef/Z052G5mfm+s2pMHQ
uPbE0de473yY+Ml+n0rlfOtyg99Ya4a8mrEe7cNFRstioz03of5GMirJTduYHre5SEO/oCc/Ydfq
b2ela9KVynxle4RPblU9aqLXd6cH7b+GeZ69U/pfmCdf+b03VV85NQ3fjObF4cy1MwzqvADu5ySo
u1295HUTDP2N/OK8J2zlF9TfhJ+vEtiJEoZJxFjrtybDIFlpD5X5L7esEOXNi33gyS48+eLXyu1a
yjU2CMa3/aKpLcgz6JjvYuPNJaZ724FdVrUV0zeRY2392CoXEelt11g1BkrFcCwliBmPVLpbdL/e
PZPcOd06Cf+0nv4DpoQ3/beKAAA=</Form>
  <Code><![CDATA[
$CaptureRegistry_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme -Control $CaptureRegistry -Theme Dark
}

#region Control Helper Functions
function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}


#endregion

$Registry_load_button2_Click={
	#TODO: Place custom script here

	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	else
	{
		$capture_registry_treeview2.Refresh()
		$capture_registry_treeview2.Nodes.Clear()
		$capture_registry_treeview2.Refresh()
		if ($Registry_HKLM_radiobutton1.Checked -eq $true)
		{
			$regKey = Get-Item HKLM:\ -ErrorAction SilentlyContinue
		}
		if ($registry_hkcu_radiobuttonHKCU.Checked -eq $true)
		{
			$regKey = Get-Item HKCU:\
		}
		
		$n = New-Object System.Windows.Forms.TreeNode
		$n.Name = $regKey.PsPath
		$n.Text = $regKey.Name
		$n.Tag = $regKey
		$capture_registry_treeview2.Nodes.Add($n)
		
		
		
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		#$hover_textbox1.Text = "Selected Customer: $config_customername"
	}
}

$capture_registry_treeview2_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	#TODO: Place custom script here
	$node = $capture_registry_treeview2.SelectedNode
	$nodeTexts = @()
	while ($node)
	{
		$nodeTexts += $node.Text
		$node = $node.Parent
	}
	$reversedNodeTexts = @()
	for ($i = $nodeTexts.Count - 1; $i -ge 0; $i--)
	{
		$reversedNodeTexts += $nodeTexts[$i]
	}
	$rootHive = ""
	$allNodesString = $rootHive + ($reversedNodeTexts -join "\")
	$registry_selected_textbox3.Text = $allNodesString
}

$capture_registry_treeview2_NodeMouseClick=[System.Windows.Forms.TreeNodeMouseClickEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeNodeMouseClickEventArgs]
	#TODO: Place custom script here
	if ($_.Node.Nodes.Count -eq 0)
	{
		foreach ($keyName in ($_.Node.Tag.GetSubkeyNames()))
		{
			Try
			{
				$regKey = $_.Node.Tag.OpenSubKey($keyName)
				$n = New-Object System.Windows.Forms.TreeNode
				$n.Name = $regKey.PsPath
				$n.Text = $keyName
				$n.Tag = $regKey
				$_.Node.Nodes.Add($n)
			}
			Catch
			{
				Write-Host $_
			}
		}
	}
	
}

$registry_name_textbox3_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$Registry_Capture_Step2_CreateBackup_button2_Click={
	#TODO: Place custom script here
	
	
		$node = $capture_registry_treeview2.SelectedNode
		$nodeTexts = @()
		while ($node)
		{
			$nodeTexts += $node.Text
			$node = $node.Parent
		}
		$reversedNodeTexts = @()
		for ($i = $nodeTexts.Count - 1; $i -ge 0; $i--)
		{
			$reversedNodeTexts += $nodeTexts[$i]
		}
		$rootHive = ""
		$allNodesString = $rootHive + ($reversedNodeTexts -join "\")
		
		$RegistryCaptureScript = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2025 v5.9.253
	 Created on:   	22-3-2025 20:35
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	regcompare.ps1
	===========================================================================
	.DESCRIPTION
		A description of the file.
#>
$regexportpath = "!!regexportpath!!"
$backupFolder = "!!backupFolder!!"
if (!(Test-Path $backupFolder))
{
	New-Item -Path $backupFolder -ItemType Directory | Out-Null
}
$timeStamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
$preBackupPath = Join-Path $backupFolder "PreChanges_$timeStamp.reg"
$postBackupPath = Join-Path $backupFolder "PostChanges_$timeStamp.reg"
$DiffRegName = "!!DiffRegName!!"
$diffPath = Join-Path $backupFolder "$DiffRegName`_$timeStamp.reg"

Write-Host "Exporting registry from: $regExportPath"  
Write-Host "Creating first registry backup (pre-changes)..."  
reg export "$regExportPath" "$preBackupPath" /y | Out-Null
Write-Host "  Pre-changes backup saved to: $preBackupPath`n"
Write-Host "Make any desired changes to your registry/application now." -ForegroundColor Green
Write-Host "Press ENTER when finished..." -ForegroundColor Green
Read-Host
Write-Host "`nCreating second registry backup (post-changes)..."  
reg export "$regExportPath" "$postBackupPath" /y | Out-Null
Write-Host "  Post-changes backup saved to: $postBackupPath`n"  
Write-Host "Now comparing backups to find differences..."  

function Compare-RegFiles
{
	param (
		[string]$OldRegPath,
		[string]$NewRegPath,
		[string]$DiffOutPath
	)
	
	$oldLines = [System.IO.File]::ReadAllLines($OldRegPath)
	$newLines = [System.IO.File]::ReadAllLines($NewRegPath)
	$oldHashSet = [System.Collections.Generic.HashSet[string]]::new($oldLines)
	$differences = New-Object System.Collections.Specialized.OrderedDictionary
	$currentKey = $null
	foreach ($line in $newLines)
	{
		if ($line -match '^\[\S+\]$')
		{
			$currentKey = $line
			continue
		}
		if ($line -match '^\S+=' -and $currentKey)
		{
			if (-not $oldHashSet.Contains($line))
			{
				if (-not $differences.Contains($currentKey))
				{
					$differences[$currentKey] = [System.Collections.Generic.List[string]]::new()
				}
				$differences[$currentKey].Add($line)
			}
		}
	}
	if ($differences.Count -gt 0)
	{
		Set-Content -Path $DiffOutPath -Value "Windows Registry Editor Version 5.00`r`n"
		foreach ($key in $differences.Keys)
		{
			Add-Content -Path $DiffOutPath -Value "`r`n$key"
			foreach ($val in $differences[$key])
			{
				Add-Content -Path $DiffOutPath -Value $val
			}
		}
		Write-Host "Differences found! Saved to: $DiffOutPath" -ForegroundColor Green
		$DiffOutPath | out-file "C:\windows\temp\LatestRegOutPathIntunePrepTool.txt" -force
	}
	else
	{
		Write-Host "No differences detected."  
		if (Test-Path $DiffOutPath)
		{
			Remove-Item $DiffOutPath -ErrorAction SilentlyContinue
		}
	}
}

Compare-RegFiles -OldRegPath $preBackupPath `
				 -NewRegPath $postBackupPath `
				 -DiffOutPath $diffPath


Write-Host "`nRemoving the two backup files..."  
Remove-Item -Path $preBackupPath -ErrorAction SilentlyContinue
Remove-Item -Path $postBackupPath -ErrorAction SilentlyContinue

Write-Host "`nAll done. Please close this Powershell_ISE window and continue in the IntunePrepTool"


'@
		if (Get-Process -Name "powershell_ise" -ErrorAction SilentlyContinue)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please close any existing Powershell_ISE windows, When done.. Start again', 'Please close existing Powershell_ISE windows')
		}
		else
		{
			
			
		
				
				$regName2 = -join (
					(97 .. 122) |
					Get-Random -Count 8 |
					ForEach-Object { [char]$_ }
				)
				
				if ($Registry_HKLM_radiobutton1.Checked -eq $true)
				{
					$regName = "HKLM_" + $regName2
				}
				if ($registry_hkcu_radiobuttonHKCU.Checked -eq $true)
				{
					$regName = "HKCU_" + $regName2
				}
				try
				{
				New-Variable -Name 'reg_regname' -Value $regName -Scope Script -ErrorAction Stop
				}
				catch
				{
				Set-Variable -Name 'reg_regname' -Value $regName -Scope Script
				}
				$RegistryCaptureScript = $RegistryCaptureScript -replace ("!!regexportpath!!", $allNodesString)
				$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
				$BackupLocation = $config_packagefolder + '\' + "0_BuildingBlocks\Registry"
				$BackupLocation = $BackupLocation -replace ("\\", "\")
				$RegistryCaptureScript = $RegistryCaptureScript -replace ("!!DiffRegName!!", $regName)
				$RegistryCaptureScript = $RegistryCaptureScript -replace ("!!backupFolder!!", $BackupLocation)
				
				
				
				if (!(Test-Path "C:\windows\temp\regcompare.ps1" -PathType Leaf))
				{
					$RegistryCaptureScript | Out-File "C:\windows\temp\regcompare.ps1"
					powershell_ise -file "C:\windows\temp\regcompare.ps1"
					
					
				}
				else
				{
					try
					{
						Remove-Item "C:\windows\temp\regcompare.ps1" -Confirm:$false -ErrorAction Stop
						Start-Sleep 1
						$RegistryCaptureScript | Out-File "C:\windows\temp\regcompare.ps1" -Force
						
						powershell_ise -file "C:\windows\temp\regcompare.ps1"
						
						
					}
					catch
					{
						[void][System.Windows.Forms.MessageBox]::Show('When done.. Start again', 'Please close existing Powershell ISE windows')
					}
					
					
				}
			
		}	
}

$buttonOptionalOpenRegedit_Click={
	#TODO: Place custom script here
	regedit
}

$registry_button2_Click={
	#TODO: Place custom script here
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('Please remove all irrelevant items and then click Save in Notepad.', 'Edit .reg file in Notepad')
	$regfile = Get-Content "C:\windows\temp\LatestRegOutPathIntunePrepTool.txt"
	notepad $regfile
}

$buttonStep6Add_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$BackupLocation = $config_packagefolder + '\' + "1_BuildingBlocksPackages\Registry"
	$BackupLocation = $BackupLocation -replace ("\\", "\")
	$regfile = Get-Content "C:\windows\temp\LatestRegOutPathIntunePrepTool.txt"
	$regName = Get-Variable -Name 'reg_regname' -ValueOnly -Scope Script
	if ($Registry_HKLM_radiobutton1.Checked -eq $true)
	{
		
			$systemoruser = "system"
			$registry_output_textbox3.Text = "Creating Building Block Package in the System context"
			$registry_output_textbox3.AppendText("  `r`n")
			$BuildingBlockRegistrySystem = @'
if (Test-Path 'hklm.reg') {
    Write-Host "hklm.reg detected.. Now importing" -ForegroundColor Green

    # Run reg import, capturing stdout/stderr in $output
    $output = reg import "hklm.reg" /reg:64 2>&1

    # reg.exe sets a process exit code. 0 = success
    if ($LASTEXITCODE -eq 0) {
        Write-Host "Import succeeded!" -ForegroundColor Green
    } else {
        Write-Host "Import failed with exit code $LASTEXITCODE" -ForegroundColor Red
        Write-Host "Output was: $output"
    }
}
'@
			$BackupLocation = $BackupLocation + "\system\"
		
			
			$BackupLocation = $BackupLocation + $regName
			if (!(Test-Path $backupLocation))
			{
				New-Item -Path $backupLocation -ItemType Directory -Force | Out-Null
				$registry_output_textbox3.AppendText("$backupLocation created")
				$registry_output_textbox3.AppendText("  `r`n")
			}
			else
			{
				$registry_output_textbox3.AppendText("$backupLocation already exists")
				$registry_output_textbox3.AppendText("  `r`n")
			}
			$BuildingBlockRegistrySystem | Out-File "$BackupLocation\BuildingBlock.ps1"
			$registry_output_textbox3.AppendText("BuildingBlock.ps1 created")
			$registry_output_textbox3.AppendText("  `r`n")
			Copy-Item $regfile "$backupLocation\hklm.reg"
			$registry_output_textbox3.AppendText("hklm.reg created")
			$registry_output_textbox3.AppendText("  `r`n")
			$registry_output_textbox3.AppendText("You can use this Building Block with other Building Blocks by selecting the System Context when creating the Intunewin file using the 'Building Blocks → Intunewin' function.")
			
			
		
	}
	if ($registry_hkcu_radiobuttonHKCU.Checked -eq $true)
	{
		$systemoruser = "user"
		$registry_output_textbox3.Text = "Creating Building Block Package in the User context"
		$registry_output_textbox3.AppendText("  `r`n")
		$BuildingBlockRegistryUser = @'
if (Test-Path 'hkcu.reg') {
    Write-Host "hkcu.reg detected.. Now importing" -ForegroundColor Green

    # Run reg import, capturing stdout/stderr in $output
    $output = reg import "hkcu.reg" /reg:64 2>&1

    # reg.exe sets a process exit code. 0 = success
    if ($LASTEXITCODE -eq 0) {
        Write-Host "Import succeeded!" -ForegroundColor Green
    } else {
        Write-Host "Import failed with exit code $LASTEXITCODE" -ForegroundColor Red
        Write-Host "Output was: $output"
    }
}
'@
		$BackupLocation = $BackupLocation + "\User\"
		$BackupLocation = $BackupLocation + $regName
		if (!(Test-Path $backupLocation))
		{
			New-Item -Path $backupLocation -ItemType Directory -Force | Out-Null
			$registry_output_textbox3.AppendText("$backupLocation created")
			$registry_output_textbox3.AppendText("  `r`n")
		}
		else
		{
			$registry_output_textbox3.AppendText("$backupLocation already exists")
			$registry_output_textbox3.AppendText("  `r`n")
		}
		$BuildingBlockRegistryUser | Out-File "$BackupLocation\BuildingBlock.ps1"
		$registry_output_textbox3.AppendText("BuildingBlock.ps1 created")
		$registry_output_textbox3.AppendText("  `r`n")
		Copy-Item $regfile "$BackupLocation\hkcu.reg"
		$registry_output_textbox3.AppendText("hkcu.reg created")
		$registry_output_textbox3.AppendText("  `r`n")
		$registry_output_textbox3.AppendText("You can use this Building Block with other Building Blocks by selecting the User Context when creating the Intunewin file using the 'Building Blocks → Intunewin' function.")
		
	}
}

$building_blocks_registry_add_buttonButton1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$BackupLocation = $config_packagefolder + '\' + "1_BuildingBlocksPackages\Registry"
	$BackupLocation = $BackupLocation -replace ("\\", "\")
	$regfile = Get-Content "C:\windows\temp\LatestRegOutPathIntunePrepTool.txt"
	$regName = Get-Variable -Name 'reg_regname' -ValueOnly -Scope Script
	if ($Registry_HKLM_radiobutton1.Checked -eq $true)
	{
		
		$systemoruser = "system"
		#$registry_output_textbox3.Text = "Creating Building Block Package in the System context"
		#$registry_output_textbox3.AppendText("  `r`n")
		$BuildingBlockRegistrySystem = @'
if (Test-Path 'hklm.reg') {
    Write-Host "hklm.reg detected.. Now importing" -ForegroundColor Green

    # Run reg import, capturing stdout/stderr in $output
    $output = reg import "hklm.reg" /reg:64 2>&1

    # reg.exe sets a process exit code. 0 = success
    if ($LASTEXITCODE -eq 0) {
        Write-Host "Import succeeded!" -ForegroundColor Green
    } else {
        Write-Host "Import failed with exit code $LASTEXITCODE" -ForegroundColor Red
        Write-Host "Output was: $output"
    }
}

'@
		$BackupLocation = $BackupLocation + "\system\"
		$BackupLocation = $BackupLocation + $regName
		if (!(Test-Path $backupLocation))
		{
			New-Item -Path $backupLocation -ItemType Directory -Force | Out-Null
		}
		else
		{
			$registry_output_textbox3.AppendText("$backupLocation already exists")
			$registry_output_textbox3.AppendText("  `r`n")
		}
		#$BuildingBlockRegistrySystem | Out-File "$BackupLocation\BuildingBlock.ps1"
		#$registry_output_textbox3.AppendText("BuildingBlock.ps1 created")
		#$registry_output_textbox3.AppendText("  `r`n")
		Copy-Item $regfile "$backupLocation\hklm.reg"
		#$registry_output_textbox3.AppendText("hklm.reg created")
		#$registry_output_textbox3.AppendText("  `r`n")
		#$registry_output_textbox3.AppendText("You can use this Building Block with other Building Blocks by selecting the System Context when creating the Intunewin file using the 'Building Blocks → Intunewin' function.")
		#$registry_buidingblocksfiledir_textbox3.Text = $BackupLocation
		$row = $BuildingBlocksTable3.NewRow();
		$row["Context"] = 'system';
		$row["Sort"] = 'registry';
		$row["Source"] = "$BackupLocation\hklm.reg";
		$BuildingBlocksTable3.Rows.Add($row);
		$BuildingBlocksTable3.AcceptChanges();
		
		
	}
	if ($registry_hkcu_radiobuttonHKCU.Checked -eq $true)
	{
		$systemoruser = "user"
		#$registry_output_textbox3.Text = "Creating Building Block Package in the User context"
		#$registry_output_textbox3.AppendText("  `r`n")
		$BuildingBlockRegistryUser = @'
if (Test-Path 'hkcu.reg') {
    Write-Host "hkcu.reg detected.. Now importing" -ForegroundColor Green

    # Run reg import, capturing stdout/stderr in $output
    $output = reg import "hkcu.reg" /reg:64 2>&1

    # reg.exe sets a process exit code. 0 = success
    if ($LASTEXITCODE -eq 0) {
        Write-Host "Import succeeded!" -ForegroundColor Green
    } else {
        Write-Host "Import failed with exit code $LASTEXITCODE" -ForegroundColor Red
        Write-Host "Output was: $output"
    }
}
'@
		$BackupLocation = $BackupLocation + "\User\"
		$BackupLocation = $BackupLocation + $regName
		if (!(Test-Path $backupLocation))
		{
			New-Item -Path $backupLocation -ItemType Directory -Force | Out-Null
			#$registry_output_textbox3.AppendText("$backupLocation created")
			#$registry_output_textbox3.AppendText("  `r`n")
		}
		else
		{
			#$registry_output_textbox3.AppendText("$backupLocation already exists")
			#$registry_output_textbox3.AppendText("  `r`n")
		}
		#$BuildingBlockRegistryUser | Out-File "$BackupLocation\BuildingBlock.ps1"
		#$registry_output_textbox3.AppendText("BuildingBlock.ps1 created")
		#$registry_output_textbox3.AppendText("  `r`n")
		Copy-Item $regfile "$BackupLocation\hkcu.reg"
		#$registry_output_textbox3.AppendText("hkcu.reg created")
		#$registry_output_textbox3.AppendText("  `r`n")
		#$registry_output_textbox3.AppendText("You can use this Building Block with other Building Blocks by selecting the User Context when creating the Intunewin file using the 'Building Blocks → Intunewin' function.")
		#$registry_buidingblocksfiledir_textbox3.Text = $BackupLocation
		$row = $BuildingBlocksTable3.NewRow();
		$row["Context"] = 'user';
		$row["Sort"] = 'registry';
		$row["Source"] = "$BackupLocation\hkcu.reg";
		$BuildingBlocksTable3.Rows.Add($row);
		$BuildingBlocksTable3.AcceptChanges();
		
	}
}

$registry_output_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$formTheme_Load={
	#Set the theme to Dark
	Set-ControlTheme $CaptureRegistry -Theme Dark
}
#Append the event to the form
$CaptureRegistry.add_Load($formTheme_Load)


$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $CaptureRegistry -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $CaptureRegistry -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
			if ($target.ContextMenuStrip)
			{
				$Queue.Enqueue($target.ContextMenuStrip);
			}
		}
	}
}
#endregion
]]></Code>
  <TV>0</TV>
  <Mode>0</Mode>
  <Assemblies />
</File>