<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAJIrSURBVHhe7f1XdxzLuaWN9m854/sV5+aM8Z2L
71z06FZv7W5taUvakpbcWtLS8p7eE/QAARDee++99957DxRQAKpgC0DBzxNvFJIsgEkSLIIguDgf
jsmqShMZmciMd0ZmZMR/I4QQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEELIz5B//T//z/8vPiA4Mt4/MCzeLyCE
oiiKoqj3UBLLHz32j/+//q//V/xBjH8x//f//f/NLm/sQffUKjrHF9ExRlEURVHU+yiJ430za4iI
T8NBmH8xwWFR8X3TDpS3jaBCa5SiKIqiqNeSip/to6jqHD+WKjvGTKeb6XWWlTxUdkygfcj6agMQ
GBIZ32dZ1StWd8pGplDZZUVVtxXVPbOo7prS06v1/ONqwmSam7peMZ+iKIqi3jNVqUCdU9mJrLJ2
ZJW/QGpednkHypqHDi2bW9WNvOoerdzKLtd0pZwKtWzLsPo0lu1AnlrWtXy3SuPZstlq2cr2MdR0
T6Glb/LVBiAgODy+f2ZNrTCpZEFj9wBa2+vR2FSJ+sZK1LZ1o7ZnGrVqfq1KVFTXO426Hvku05Tc
vsv0GmUYalSQf7rMwaee1yUHaVQdrLFn6xmfFEVRFPUeqr7XgpLGQRWI23RwL2kcQGnTIErVdy31
3ZiWrwJ3SkGTCuRdelmZllpQj+S8WiTlViOztEWtI+vKsl1q2eaDZQdR3NCPNLVsUl6dWrYG2WWt
ru0oZSsTUFTfj8YBK1r7p45nAIbmnCrzKsj3L2GoxhuOlssYy/8YDQH/b9TX5KFhwIaSui4dqOt7
p1De2K2C+Dga+qa16rpVsFc739g3g4aeceSX1SKnvEkFe1neoqWXU+vXdY0iu6AUBTVdar1JNPZb
9WdtxxCKarv0byNdiqIoinof1KSCblnzsIptPfout8TIkiZVy1eBO0fV1kvVPJkmKlPBOq2oBSUN
A8o8WJBf24vMnFIUFleiorIOyZklKG+TuwqTKFWmIq2oVZsHubtepNaJTshGUUk1snKKEZ1arLY3
qdMtVOmICWkZnkP74PTxHgGMLWyjeWgOzcN2jOR/grnq8+gvvYkin/8PmnqGdGIlNc0qsNchr6IB
mQUVKKhsRWVzP0prW5BbUoPC6lY1vwY56nueUkFVs1qmCYWVjciS5auU2ymtRWW7OgjNXWpeMwrV
tOKaVrVME4qqGrQBaB21o2VolqIoiqLeG7WNzKOqfQxFdX36Lnl56xhik3NRquJiSWmV+p6PKhXQ
61TAr2gZQUZpmzICQ8o8WFFQ24/snCKEhicgOTkT6dmlqOyQu+YqHbVsZmk7ypWBkIq23N4PiclA
a3MLsrILEJ9dpdOo67GgWJmDitYRdIwvoHP4mG0AJpf20Da2jPa+PgwXfKmC/220ZnyL8sTvVUJL
aB+dQ3l9K0obulTQ79bBu6yhAwVqx/JUbb+iuQ8VDe3IKa5CkQT0iiZlKGZVoO9GRWMHckrrVIBv
1EahumMEte19KKhoVMG/TakZRdXKCdWqNBv70TEh27NRFEVR1HujThV0a1SAL2kYRNPgnH6kHpdW
hKy8MlW7L0FCRinqVaBuHJhFdfs4sso6UNk66lq2awrRyiCkZBQiMTUPCZnlark5NParOKpMhTz3
r1LrtAzb9LIR8dmITMxFRFwGknKq0Dpi15V4MQmyfI9lBd1j88czANOrQJcKvN3jNnQNjaC9fwAd
g2PoGJ5G1+SymreIzjE7OpRkJ9tH5rRaBqe16+kcd03vGJ1X02b0awg9U8t6HVm3fUTtcIsyDy1D
6Jbp4k7GbGgZmEH35JL6nFZpyzRZfkmvQ1EURVHviyTmNfTNoFjV5ht7Z1CvauT1qgZf1T6hVd+j
pilT0KA+K5pHkFfd67oD0Dutl6vrVsuqWn+1kiyjl5U7CSqo56tl5bNBpdtwkK7U+vWnbEstK4/g
S+oHVDpT6LeuoW/C/moDEKwMgFoW8ibA4KwT/bNbGJjdxsCckvreP7OuNWDdONCz77L8s2mu6a5p
7uusu9KdWVOZen7Zfvnulo6xPYqiqJdLlSkUdWbkOicbeq2o6ZxCbZdFSwK7yPhtTOuZWtXL1r5i
WTEOsqx81nQ+m35UMk+W6VaVdh1XpxaPdwdg3gl0qJp8XFIaElMykJiaeeJKSstCksl06mQkx/aD
VdqHLHVdURR1JpSslJqZi7SsVys5Pft4y6pljrOszE/JyELv8BRGbKoCf1wDYNuEciGjSE1NwYJ9
HtMWy4GmMD1tgXVmGjPq89n0I1LzZL7IOjODWevMwW9Z75lkutXqSuvovGdypTE3a3263RcvN32w
jEuynp6mtqO3pefLpyHX77nZWSX3+a5P83VeLdd6ryO1jRfm0V1yzKyYm7Oqz5fnS9KSYyaSdeT3
4Wny25j3MrmOz/z8HObnZvXvZ9PN0zKmi2QdQ+7T5tx+u093X85TGel8iLKpv9O7kt02/061YLd9
sFpcsL9TLS0uvDMtLy1+sFpZXnq5lhZgX1rBwOzm6xuAvPx8bG9vYXV19ak2NtZUIT+Ljc0tbDo3
sLa2BofDgfUNJ7Z3ttUyK3raivqUaRtrq5iZsWJtfV2t61p+XX13Op1q2WXY7AsH89Z1OmZac6xg
dm5ObXNTryuSdAzJ742n055tR7ZhbEvSd1/HkCwrJ/CKY03tjyy34bbOhl5vQ77LNvRvNf/g00hD
fsvyz34/W3Z7dxdbW2qeWl/n82C6axuuT601B5aXl/W2nGq+kdZhqWOkjqt9YQFOdSyMdFxpuvJo
5E3S2dx0qpNgWf8dnM5N7Kt/a2p9h0pn82B941PmG+m5S6Ytq5PIZlcX+tKyyXqyHfl+eB1Dkk9j
GUNOlS/53NpyzXv2KeeUcdw9l6T1ocr9OJ+25O/3LrW9vf3Bamdn551qV5Vz70p7e3sfrPb3Van+
Mu3twr7swIDV+foGIDcvT13YTh2YRJuqoK4vzkFwdBIqSsrR3T+GJeVCJLhNDvWguLACS+ubmLcM
obiyHo7lOWQkRCI+LQfzi8u6digBYs5mh3WsG48fPUZL94gKLIsqwM+r4LaKlZWVQ9re2UJNbipu
37iF7OJ6FShXYJ2dV+m4AqIExkXlgJeUmagtLEBn37iujYhZkUC5tbOL4c565GSWY0NdKO5mZm1t
A0uzYwi8exehsemYtS9jVQyEMi2TIz0oyCzG3OIqbDYb1lQQXbSrms6CCtJq20sqGIo5kQC/rKZb
Zub1hbixZkdZTimm55U7XVlEW201ugcnVVAXg7OGBVVTsS0uqUC3royHHDsxIU44luzo7xvEgsrz
vJouhsA9r6LtnU2UpsXj2pU7aO6dwJYyY2sqDzaVptTQF1eUQVt3KPMlZmYRuYnJqG3oVsdhSR1b
O+rKK9HR1a+C+aKqgStDpQKG1BplnxelBqX2SY6nu/mSoDI51Ipbl64it6JJ5W9R7eemOg6LGOlu
RVlJg9qeOj/UtiUv2rAdGJbdvW31NylER0c3SnKKYV+RtBdRmpWHCatypuo8kL/jkvo77+3vobWq
GBWV7djZ23mahicyjMiHKDNDdFo6akZOW2am5EORmSE6TR01JKcpM0PyocjMEB2SqpSfmAGQi7yn
pQZpmSm48eN5JKQVwPvudQQGRuDBlfP47vubWNkBWlRB3qQC1EBjGZKyqiBUZKfiSUAw4qMicefm
PTy8fQu3bz1EUW4+EuNj8fDeY/SMzsGpAsIhA7C/hYKkJHR29CMh2BthoVEIDw1EckYaYiIikZad
Bb979/HgcSCiQiIR9iQcQQGBqCgvhdeNq4hNzEDA/dsIDE1Vae0fCqhryqzYp3rx4NI1hEanITst
BtduPkRGSioqqspw64cfkF1aj9igR7j/OATpiTEIDY6A/x0vXLoTgGUV0NsaGjA6Po6YIF8U1HRg
b2cNeXGJCPB+jEe+T3Dpu/PweRyB+spaFKYkqeN1D0ER8Yjwe4zvz11Bala62o9opGSkIykyDr5q
X+77RmB2SQWyIyZgTx2LtEBv/HDhAYrycnDhxwsICgnDA2WO7ikTExOfgoC7Xrj56InahwR4Xb2J
hLg85KXG4dLF87j4w1WkpuchOTIWoSGhSIyNwZ1rtxEdl4CA4EAMTtlUQbpxyACIadnHJvJiYhAd
FovwiAikJiYhTK0fGxGOQG9/BEXFwLasgoD627kbAGAHuXHxaGvvQeITfwT4BqttRSHCPwRRoTEI
C4tEZVkBrl69iszsPNy/egUp2TVqvf1DAf11ZRYYPxQdDcqnKbOgfJoyC4wfisyC8mnKLDCflswC
44ci06DvrpM0AFLDmxkbgJ/fA9y/74skFTjOff8dvG4/QllBCeKiEzBrm0NOdjbmV1RwnexHcIA/
SmrqkRIdjWAVPIOfBCE/swARPn4oyC9FenQUImNicfvqbTT2WHSt1t0A7KhaZEmyMggP/FGQlYXI
oBDEJSQjMiwY92/fQXBYKDJSs1Wa2Qh8FIgg7wAVnCJVUA3BD9/+CF+/IPg9uI+ouBxs7+0dCqhr
605lAPrhe9df1dhtiPS7h3MXlKEJCENDUwNu//QTopNT4XX5Im7euo+kxHg8vvcAV89fxsPQBP3Y
oL+7G6OjIyhRAblneArbmysoUoYlJjoFRTl5atsBSElIUIHdC3dv3kFGRiGK0tNwVQVvXxVQI1Xg
ved1H6GR0YgPCEBSUg4y4lPRPzavzNBhA7Czt4HilGS1TBYinjzGJRW8w8OikZuSqfY/Bznx8bj0
00X4q8AaGRaCx94+CPNX5uzWbVy6cgMxMfFIVApQxzI8LAphgUHqmBYiUxmWRz6PUNk2iF1Vuz9q
AHaUqSlIiIWfOr7RUcoEBAUhLChCGYAwpMQm4YGPNwYsC+pv53qMYwTiXXW8Wyrz8cjbG4lqfV+1
n+HRkYgNiUKQbwhio+MQHhyAH344h5DQSDzyuoPsokYV/vcOBfTXlVlg/FBkFphPS2ZB+TRlFhg/
FJkF5dOUWWA+LZkFxg9FpkHfXSdpACQIzUyOorN7ALb5WQwND2FoaAjTM1Ys2hcwNj6KKcsURscm
dCCQ59EzE8No7eiF3TaLnp5+LCwuqXXnMWe1Yl4FXXlGXZWfhO9/uoHJ+RWsOw4/BpB05q1TaG1t
x+rGJqbHhzA4MqUbOMyrdOT2vN1u15+z1jkszFvR090P+4Jd521hwYbenm7MzNpVcHj+tvrK0iIW
l1Z0e4ap8RFMWKywqe11d/epfV6BZWpC7eewvs2eHumHG/dDML+4gP6BISyvOrCpTv41lWfnQZsI
aQNhV/sl+7ZgX4R1egqT6pgMDPRhbMKipi3o2+j2uRkMDA5j3mbXt8JlH+zSmEp9t6l1l9S25ZGI
e14dajuy7NKiPDKxYmRoEOOT0/rY29X+S7pzM1MYGhnH5MQIBobH9GOGqckxTE7NYGZmEhPqc3lx
Hn29A3q/5ZGDXaU1oPZHGotIAH0W/F2S4ybpzM9a0Nc/omr6q+qY9mJhaRWzav8Gh0a1GTr6CEC3
7VhbUceyV/29xxCpav7DM3a1Xw7YVFoDg+NqX+wYUefL4sKcOj9caUoge5qGBzoaFD8kmQXm05JZ
UD5NmQXGD0VmQfk0ZRaYT0tmgfFDkWnQd5enBqCmYwRFxcX69v3TDaqDvbe3r6ft7bs+BWlsIBsT
pGGC3MKVZY1pgrG40TjB+C7YZqdhUwW/rHco8wcytrSnvhsY2zfSe5qm/v9Z2u4cbUChdbCcfH85
+7CqQL66rg7OAc+ldaCTYH//7aX9MtyPp7teySuXVefEztvPPyGEkGcsrq5jYOY1DUBT3xRCQkJQ
UlKMwsLCt6rSsjKUlZaaznsTFRUVPVVmZibS0tKQnp7ukdKUcnJykJXlWTqyjuTBPU9vU8XKvJ0p
lZSgVP2NTeedsErUtqjTl/x936XKpByh3onKy8upd6CKiooXSs8vL8OUdR5D81uvZwC6xmz4/PPP
8ctf/hK//vWv32v9x3/8h25o5ufnBx8fH63Hjx8//X5cebKOIdn2rVu3dF7M8khRFEW9vqRMpZ7X
//k//0d9/gpdfYMYW9p7PQPQOTqPb775Bv/1X/+Fjz76CH/605/057uQse0///nPr60//vGP+Otf
/6pfe3vXSCdJkp/j7Mtf/vIXfezN/rCnqd/85jem+Xtd/f73v8fvfve7ty7ZjqfnCnU25V4GvK7e
pOwQuafhiV62fbnG5Xw1u+7eRFLGSNpm26Q+HMm59+c/f4SegWGMLb6BAfjDH/6gT6p3KcnDiy6k
l0nW/dvf/oaZmRkdhId6WlBRWoyUlFRUVjdgbmULy3MTqKxtg212HIXFNfq9+IXZKTQ0dWJrdwfy
PL6/oxYp2SVYXtvA9MQoegfGIO0hdna2sby0hO3dfcj78Vvb0jEFsLellpu2qrTWVLpT6B8ZxdjE
pM7PcfZDjvvly5eRlJSEhISE5xQfH/9SyTKyblJSoul8d70oPVk/ODhY58eTY++u7777DhcuXMD5
8+ffmiT9H3/8URu+N80vdTYkhdiblj+yvlnar5KcQydV9pmlL2lfu3ZNX2fG9ZaUePh6Na7No58v
kqTx7bfferzP1M9Hb2wAvv76a/znf/6nfvY9Pj6OwaFhWKanYZmaxODgIAaU5PNlGhgYxOjoKIbU
95GDT/f5Q0OHf5tpbGxMP+OTC/J1C3a5+MQATKt8C7Mj3fDzeYiAwEDERMXB3/sOLly9iXs+gQiP
CcPtW/fx2CcAYQHBuHD+OsraulU030B+XjoC/YPg4xsEryvXcMXLH4Oj40iNiVDTghEfGYUbt68i
OCIOMRERiI6IhfcDH/g88kVBfhkqqsvRMTCOj/50PAMgTl7aMbwJG44VONwaLXqCvJ0g+XWdTOZ5
fZnEyHz55Zc6HVejzsMNAaWVqntLZtf3Ld3gcUt9397ZlfaFrmW3ny0ry0iDQ+lFUJbZ3dnRLYKl
NfqlS5f03QCz/FDvj6R2fO7cOfT39+s3ekZGRzA8PKw/BwYGMDIiv4f0d6OseFreqHJFyicpt5KT
k/X58Dplh5Qbn376KZqbm/V2dNlnsWB0ZNi1bbWNYZUn2Z5ruwMYVsuN6Py48iDT5bOpqUmb0qPX
kNy+rqysdJ3cii3nGhwbb3a9Cg8ePDixO3dHJXcWxFxIXPjtb3/7ziTb5zX+cp2IAfjtb/9Tn8Sa
3U20NzairWvY9fuYrKxIC39gdXlZf3qCvPJndhG9SkcNwL5zHkFPApGfkYrI8HiEKgNw5/5j+PmF
IzgsGFcuXUN0ajGqCjNx/rsryMivwvbeJgrzMpRxeIK80noV9MMQEBChAn0srl+9h7rWLkR438Pl
a7eRkZOOx3fvwicsDHfv+6KovBblBXkorihH19C4yv/xDIAUDvn5+TrPq/MTqKwqR3xsPPKKipFb
UI2FxUWsOJzqmNphX3GoALiJ0aFetPWov83eNiqLMhAQFIowtY8jk3O6F8e1tVXMztvg3FKBcn0V
Oypty1AbElPy9CuBq4s21NXUYHRqFouLdmypgN3b1YE/qmP+JgZAaiQSmIXRkT50tbWhrqEBrU1t
WFiXXDyPvNq4rbzC2rINJYUZCA0MQduw62/oYh/9vQP625LNAsv8gn4TQbhx44YuJMzyQ70/kiB2
//59/TcVHOocdUqvmSvr+vfWmgObz14Meop0Jra98+xtlK6uLn0+vI4BMM5bMZUadX11tLbAtuwK
0LKNo+wpM7t1sN2V5RX9KUjX23/7m7kBkIZagtMxj/CAQGQXV+jXqqXH0X11HRfn5WLCtoKumnpl
KEZQU1SNOXVtzEzPqDJtRi23pI3zaH832joH1HW9rs7/22/t/Jd9+OKLL3R7pps3bz6VXHNmetF8
93XN5pst476cbP/ixYuv9Tc1ZNyVOW15ktc30YkZAHHgwuxoFx6pWm1QcDQamhrR3NGB1rYWlFbX
Y2JyAi0ttegdHoHVMoOJkQHUNtRiRdXWcpLjkFlajtzcPNTWVaN/YhKWkX5kpCQjOiEblkkLxkcn
YR0fQWNDEzo6e9Ck1q1tacWaqukJU1NTJ2IAZGyD5ZVlrK+tYcOpvi/OYWZuXgXPIVhtB4NLKMOy
opZZW5dxAlQgUoFwuL8Lg2MW/a71yvIC5metyu2PwDI9r989l17wZLCkJcea7svAoZaT9/Ud607M
TqnawtgExicmjn0iSOGQl5en87y7tYbk8EA8DgpBsH8gnjwJwENlWsJDIpGcEo3Q0DDcvHYRn3z6
OeLzm+BcnkZiYqw2OiGh4fC5cxsXr17G3XveuPvQD6Eh4bh88RweBUhvgIE4d+MRirIzcE79vb+/
6IXIqFjEJYTDP0htxzsAf/u757fUpSCVR0nSP4DQWV8BX19v+D0JQnhYBKJiEhEdk4IaZXCS0pOR
m5OJkBAfnL9yDwsbO6grL0R7by/yEnLR19+KxPQU1NWXIyMrARGRMWpfYlBVVoWS6hrIvQW5y3D9
+nUagJ+BpJZ3V5lpF/uoyChAX+8g0kPjUVVXi3xlrKUFemtvD+anR9HQ3IXp8S48UEZ9wr6G/V2X
uWxpafHIALift0MtFfB+4I/+IVWjr6tBTHg44tNLMDszhTpVw7daJxAe+Bg51V1YXphAQkIamlqb
MDAxhYaqAmWin797Kde45F/YUNfs4wePkZGRjjteDxASHImEuEjc8/bB4PwKGvOKMDI2hcBrt/Dw
cRACHvvj3l1vRETEIcjPH1/982tEJ+ciLdwff/7TH/Cnjw7vz0lJ8pybm6vzfPSN36OvLIsMXjRd
2D8yz/hthrGMIHeF5O/0On9XWfbvf/87Pv7441OXWX7epk7cAFhHOuH/OEDVfMPww+ef44uvvlO1
3rt45OMPL6+7CIkMRkR0FJ4E+OGR1w38/R//RF33KMqyM/E4MADnzl9CYKAvwmNjEODlhf/9m78i
IjYZj29fwfeX7yAlPgFffvwJfrhwBzd++Aqffv0TBqeX9LZPygBsqdqvBAmjbwPdr8HBmWyceLuq
4NjRt6td2lYOW3q10/PUOnIb++n77vt7rrTUcoKsq9fTabuWN+aNDA97ZACE/JQo5OXkIS5CFTzR
ylAV1qA0Nx0BT3xx+/Yd3L19VwXsYJTUdGJj1YrYmChUNnRhoKMRXpeuwNvPD9FxaSgqKkVUUJBa
5y4iYuIRGxWI+97eCHkUhAvnLsPbP0QZizDExioDoAxCXnkL/vmPj1/7uBs6WpAuTnbgoSrokiJD
Vd5DlZt/oF8hu6vOh9SUeHz98T9w4dJ53LwXiDXnNkoLczAyZUFVdilKijP1uXVX1QrDw5/gltcj
XP7+R0TGJKOwqgJylKWvCBqAn4cOGwCgSgWebmUG756/gYDwGNy8dQPejx4iPD4S4b5++Ntf/qnO
cx/4BIZjfP7kDID0FbK8MI3szBTcVNdNQVYeQn0DERObiAtffIYvv/0W931UxSjoEa7dC0VJXiZ+
+PJ7fPbJxzh/+ToCwsLxz08/fakBWFPpF5fVo7+9Fr6B8ehsa8QTXx88CQzCmG0dE32NyMhOVdd4
BFrbuxHm+wABkRnobG9B4H213WvXkahMR/iDR/jqs7/gD8pwuG/rpCR5lldthZ2tVaTFRuru1pcc
5o8u5ixj6B85uPuqykODwR5l1ubsqCkuhWXJdXfQwPAVM+P96GhvVdd9CZqamtE9aDmY42JYVcBe
xwDIOSB3D2ZnZ7UWl5b0o8kl9SmdqEmlb2HBrkcqtVqthyTLzapKn1VGjp2be27+UbkvI9uS9aU9
lZzTZnl7G3pjAyDPbn/1q1+hp6dHBzP5Yw5PqAMwMYQUFcTTcwtQW9+C1tY21FSWIjEpDn1DIygv
LUFPVwfiVECfWXagpaxYBfoklJZXIjczEbmFZciITFAXRiSqa2tQV12OotoGVJWUI8AnAFml9aqm
WI7EjDwsOtb1tsfHVe1Z7dDvfvd79Uf/w7H129/Ks78/6+d3EsT1yH4eyOhtzGyeu9x7JjMkt+jE
ZMhzQk8MgKwvo+3pUfRUenogpPUNZTy21AUYhujiesjIigvqRF5aXNKPA3p7u7DgcOoOmdYdy/rW
v4wKKHcrpPdCu30eDvXbOj2JheVVONS61tk5dQHY9C3L+blprG9u6/YXf1b5PQkDIH/HzfVljIyO
Y846gwlVOxocHNGDEHXUFOMf3/6IqrZu9PT3oK+vVxUqToz2taOjfxj2uUUs2iZQU9+IGcswahvq
MTk1jY6mFtTVVKGrb0gfY+MOgFxocpyPK7O8U+9W7gbAVf70I68wF/EJUfB9EoLSylqUF2Uhu7AA
pek5CItUZUtOmgpIKVhcU6Z9x3X7/k0NgASu6fE+xKWkqDKsArlpqSgsqcP45CTKcrOQlV+Ihvoq
JMRHIzMtS5nqBBTkFyM7IxU1za1IVdM/+vNfntu+uwGQ9i7Sc6r0Jirdb8somo7lBXWOW9T1KpWW
LczMWLCqrnspU6RXUIe6luX7ks2OhUU7VuT6X1jAtetv7xGY5Nlom7S2OIW84lqM9rQj9Ik/kpVB
kXnZmdnITMlEWEg4QoPClVGKQVJWGjraGhDgG4TSsgLcffAQzZ1deHzjFkIj4hEXG4GUnHRERUXC
R/1tG3vG4ZgfR5gy/I+fBCJCmSgVm3R6ebmFyMlOxBN1nP/61+M3UJa8y+vYBv3KhEi5KGXN5Ngw
6hqa1fG2qnLRddf5Gbvq2M8efH9mUF6G0WGeYFQWMzIydDw1y9vb0BsZgJb+aTzy9kFUdAx6evtU
DdoKy/QsZqyzmLbOY962oEflm1MHcFZ/inOyKcczp7/L6H4ii2XGtZyaZ1PrzKpPvazuxlelcbC8
Ta/vSke60ZXlJCDJ+tPq4PcPDCIoWNUaA4MRGBRybD0JCEJkVAyGlFuUfZhS6b1NTUxaDksFOQl4
EsS7u7s9ewSgajJSABrSPe4dfD+KzJMgqL/vue5gGKeirGP0MGj8dqHSO/gmPL27oZiYmND5PQkD
IHnZ2nbVyqRWZWx1T+VzUxkcGWHQPR+6YZ8qxMVYyWiBu7uuuU+zd/BlVxmhLWV05HmtbEOeDf7v
//2/dSOh44ivDp5NuRsA/bc9KFQdy4vKtD7/DN6dnW1XF7VCY2MjfvGLX+jCVxrXHqeB3NHzVt/1
O9ILqtEzqVxT7hinp4F0Uy6N545eQ4cMgAryYtb1fsp5rz7lzqFci3IHUubLdes+T+48uo7Ls7JB
uHfv3lurabobAOeKFdGRsSjJz9ENqyPi4hAS5IPzP17ClXv3UVJWgzB/H9zwuoeo+AgEPvDDN599
jStedxEQFIROZezz05MRG5OApIRIFW8e4sGjYESGRSCruEFtYRcBalp6UiL8ffzx6N4jZfYqEKi2
FRcfg9t3buJvH8vjSfO8HpX83aVPFoNIf2+EKGPhdec+kmOikZZZhLycXPSOzqpj7sRAbyfa+0fV
334TmUkJSM0s1Mv5Bcdhzr6Ege52ZKZno6OrDxXl+aiob0NvVzd6OzpQkJuvjVBzx7BupCykKAMp
559Z3t6G3sgAdIzM4fvvv9cOSwa7EeREfxcSZFwA6UlPXFRm5vGVnZ2N+/fvKSMxpdN520hjN+kT
39UnvcuhW6ZndKv13t5eFXB+qwqX3+MPf5DXK1+sf//3f9cXmlzU0ihoRhklM4mBEh13+nFlUWZJ
xiMYHx/T+f39739nms9X6T/VRfflF1/oOxiCqzB9XkahajrvwMi8SLrwc/s9ODiA9vY2dHZ2vESd
6FAXant7u27p/dVXX+lC3+xCej25CnopgOXx2W/lk/JI//Zv/6Zv2QoS6CSgi1x/552nv18mOTek
EbPcfo2IiFA1zCgEBgZq0ycBwWy7IulE5V//+pe+juX8k+17IkEeP8r1I8HTfRu/+MX/fGoAjEeS
x5GYAP2o0f27OibGfC8vr1MxAPLac3tjLZo6+rG6NIOWji5VZiyq/VWVtllVfiwtqXJ3GtOTI2jr
6sTM5BRamjsxNjaE+vp6/bq1tKWSBo9TY71o7+nXlT95ZXvetqj3RdpVyXglVlUGTqn17YvLsFnG
cPvmZdwIT8c/Pv7bsc37YQOwi2IZ1fbyZTwOTFCV3FaERUYiJCIBo5YF9Pe0qrKhBXEJSVjY2ELc
k4d46B8F37teuHLjEXLzSnD7yhWERqfC+9ol/P2TT+Hj/wTXzv2EC9du48efLuFJUASSU/Kw4Yr/
75cBaB+exYULF/G1csEd6g+7uLSs/zjvSjJIzuqqA6uONfV5PMmtNBnzPzk55ek+vG3puwxTFlRW
Vum7FnIXY3BoRN8laWvvUCfGOZw7J++tyzvxL9bX33yLgoIi/WxK7qDI+qepmZk5lf9hdCpHK/n9
6adX59lMP/zwo26jMKMuYLt9AXLH6G1L3jpxOGRkQtc54DoPZIAhZc70p8yTgXOc+sIUk/bDDz/o
oGB2Ib2O5A7Pv/71GZ48CcSTAOpN5O3ji/SMTB3cJJiaBfjjSNZ3RwY2Cw4OhZ/fE9Ptinx9/fWd
Q2n067rl/uxcOp4c+nVVCWIS0AIDg+HvH3BoG7J/tbX1ynDPqjJj+vhSQdX9rqM8ChufmNLns+T1
9u3bp2IA5NgaGHfn5FjrO5RKT7/rOc/unBi4xpZxmfeny6jfso5Mk/Td05F7K7oysLOt9nNTlauv
1wjQ3QDs7W1haGAAE+OT6O8bQG1NGbKKylR514dZu+sNDmnIPjrjen25rbEO3QPj6O1sQnlpOXIy
ctS5WYixqRn0dbapsjoffSMj6GhqRKOqXFTX1KF/eAxDQ6Nwbr+HdwBaB2dw5+5dPH7sq2pUQ3pk
PLsKRu9SEgxfS4uuxh1FRcX6PV7Zh7cteYwhrndsbByTyrHK7wn1OT9vx4A6jmFh4QgPj0B4RORL
FRQUjIbGJuWil3VN/LQlZmZyclqdwCM6v2HHyLOZ5A2FhIREZSrmnjNLpynZvjzHk7+Hvjsixmx4
VN+xkZqK3O06CQMgNb2bt24jMysbly5d1q8rUZ5JOsKKiYnRQeFNDIAho1Yu7YGkbLt+3fU6mZmk
gx7p+lsCuTyqdD2KtB5bEpjHVHARAzA5Oalq5Xdw48bNQ9uQ/irk8YTc3jfydhyJgZFaseTNVe4s
q21N6LJC9vNtGwCjEaAExtOWcadP6Ovr89gAyHE0TMVRxGDIcZTn+PIYVb67eH5Z94aNKsGDLweo
33IH21g/Li4O//2///fnHgW9Lb2RAWgbsuKqugguXb6kO8KQAyaNVN4niSMWyWMAuQ2oLyB1Qb5N
ifuXZ/0y+E1tXR0WlQkRdy6PAKQx5a9//R/q4vyNbqTzMskzS8n3u0QCpTRclPz+5je/Ns3nq/Qr
t1up7xLZvjxGkpa8y8tL6rxY1zUpqeGdtAG4ddsLj3399GMcszYH1PEkx0/e/Rbk2pWC9E0kaUhA
loatH330Jx0QzLYrkpqanLcSZD1FHqMZjyAkUB29huQaN4Lp6yDnrORL+jeQt6NkyHZ5zCh3vqRn
UjEXEqglAJy0pB2F5FmCsNwplLZdpykx8ka/MvL4Tq5Zuetmltejkr+pt7e3Xlcem8ixOi3JeSB/
L+mUShrXS57Nyo+TlOzzGxkAccjSorSjs0vXYKUG9V7J6lJaeoa+lX0q+6C3+ez5u9QG5LucAN3d
XfoklIJHHPrLJM8Hs7Ky9Mn6rpD9kVdAJb9SoJjl81XSz1I//fSNCtKTwFVbWsb83JwO+Ovrjrdm
AOQOgNzilf03W4Y6nuT4uTcCNAvqryPDAEjvgPJe9ssKYQnYX3/9DaSxslnl4jgaHh2HPLbs7x/A
vz77DJ988g/885+fPtWf/vSRCqYlpuu+TFLT7+3t0/2ByCil8nh0VG1LArLcEZBGgNIWxX1bJyXJ
c0FBod4vKdf0I8O505OYqr7+IX3nTtru/P3vH+Mf//inaV6PShoL+vr56WMolQEpD96KVNpiUgzJ
38Qo/yQOSJflJ1HWvEpvbABuSO9Lt27qOwD6tRRVi3qfZDzvzcvLV8HMevAHkOdIb1n61o9Lrtbu
ynGqP/zExCR8fB7rxyq+qob4Mt2//wB1dfVYUwHq6KuGp6H1daduzzA8Mqpqs77HyrOZvL19EBYe
rp//67+H2p93IXkUNDQ0jI6OTvT29cFmt6t9G6MBOMN6lwZAauiJickq6LjeSPJE8vaPBEl5jJaQ
mKRfi46Pl77+XZI3rFpa203XfZmkti/XpTxSFE1OWvS2pC2AmPa8/AJEx8Qe2tZJSfLc1Nyq29rY
1DU9r8zH0TY4b1Vq/6VcEuPR09OH2Lh4dVzN83pU0dGxKCoudR1HMS5vSfK4SNpqyN/J1V5jWrcD
E9OyuroK6d76/TAAN6T7xVvo7OzWB/9QTfd9kKqNi2tMTUvHufMXcPnKVVyRfvxPWZe1ruLatRu4
c/fesXTt+k2UlpXrZ9UjoxMYHTtdDY+Mq0A5iK7uHty5c0939GSWz1dJbodLYyu5IORvYdyVOW1J
Qey6K3MwTZ0fkp/t7R0agDOq4xoAmXccSfCXW9fHMQCy7cLC1789747UVqUSMDExjr/+9S/44x/+
gI9UoWxIbqeXH7wF8DrI4yvpyVT2XRoaOp0b+k6jPH6UZ+S3b7seAbhv66QkeS4qKjrIiQvj+fxp
yfXsHvpNHrlm/6T+jmZ5PSq5++r+GuDbQgK91PilnYYEfPkbiTmTae+NAegas+k+n//933+pnwML
Zn+Msyy53SIEBQXhf/2v/wV5Be/dy/yZ41HJ88GSElcBtLLq0Bf3aUq2Ke8+S4MpeZ1N2gGY5fNV
kgLjiy8+1/txVpHgIKMI0gCcLR3HAMh0uYsjBeurJAWwtJI/rgHIyyvQ234Vxt0+yY+EJn3nT5U9
0ghZriG5gyq9kboK5GfbkCAtg5y9CknLKM9E0p5FXi00BkmS287y6p18Sh5O6y0AQfLj/vc4Dcnf
XLYrbQBkYCLPXgN8HuNuoHErXx4TvPpRweH5srz0+ieS80x6ARQjII8FJO8y/70wAGZdAR/9QxxP
B4NpKFwdWrjk6uTi7Z48xokSGhqqT1yzg3RWJSeINFgpKCjQozGetnKVZDCi2NhYfYEd9yI7Kilk
pTGV9N8gbRqkL4ezJMmT6PPPP39pQDiuaABOTq8yADJNgqEUthLcjyMxANK51esYAAniUl4drWCI
dmQkSvU50t0EP19/VNb1qmVdFQ/nxhp21qQjsFGPDYDkWfZvcXHxkGRwNDEB8oqhBBh5xCXB6zRf
AxR+LgZA7g7JcTZGG5UG3Vub61jb2NR3VYzzz/XpuqNkLCd/f8mPdEi2qv5e8rhXXnGUNGU5MRby
N5PlPiwDsC0H0YHS3CwUljXBbYAurK8qhzQ1d/DLBHnf82B545aPGabbPZBxoryPBkB6DpMatNy2
kry/C8m2T6IgkQvULP2zpKOFs6cSAyCPPaSx0S//7d/0s2TKM/3yl/+GmzddHQEZham7pECVWpcE
vddB3gKQ28bydzfbruiXv/ylMsKunjjlUZH06nnoXfwDSU+f0nV2e1U+rty4j7Kycjz2uo2A0FjE
hoajr70ck1OTB28BHH77x/0u34uQ4C777s7R8tD9twSl0zQAxp2P5+Wq+EklT97dN1/mQCpOuILo
s3f+3SuLIjFVxit5Rrl+kgZA0pVzSZCjub22jPyUJMSm5WFucVV3x2zMw/4unJuu3/kZyahtbEZK
UgJKCouQmS3dQjdhctY1ho3si+TV+Dt+UAZAhuR0rszA564X/EMTUVlciOz8CjTVViIxOhZhMSmY
tc+jqiAbxRX1erCX4soapKTEonNsDjMjPYiJTsHQwCBy0lKRX1iC+MQklNc0oawgDekltdhUJ8/R
k+Xp9g9OlPfRAFDvp8QAXL58VTc2CgkJQ2RkFOWhgoJDUHjkefNJIIVwTEyc7t/CbLsi2XZDQ9PB
Gq/GblU1fVWh2VxbQn15OfKKKrEuYxVvL8GuCv/o6BjdL4b7NoJDQvU4KvKq8FHJ44PFxWVdK5Ug
MjU4ohvAjQ1O6O3tbm8eqlBhf0fVPtd1mXcaBkCCtbzaLF1wP1f2SkDfcqC6ogaj45MYm3zWj/5R
dG3auQZ5Y2p4sAeztgU9aNrRQcJXbLMYt8wf/HLR1tb2VgyAMNJah6rmYSyOtuPS+btIyslGfFQg
bt+9g8DAUIRFJOsxA4rT4nDHywv3HgWhvroCefklyMnORc+Ia5/1nQFlaj5QA7CHjSULAvxDMTg+
jmhlBH77x48RHJ6AwvgkfPqPb1FcXgnvCxfwx0++QnpWCm799AM+/uSfyKnqQFNVKeISUhDy8DG+
/9dn+PSbiwgJjYDPvfv4+A//hRveEXBs7erbLabbpwGgTllSGP31r3/Dd999j5/Ondc9P1Ke6fvv
f9CNkKUzIOnC96giIyMPfT+OoqOjVeAPV4Ww+tv8+JPpdkVfff2NMh8luuxrbW19pTo7u9Dd1alq
pR26B9DBARnJrh0dnd2oqalR27uAH45s78svv0ZZeYUKPCu6Rf0h2eQ5stzaX9Blb11uCQaHxpAc
EIaEpDQU5JciIzUd2bmlaKiuxZN79xCZ6rqbcBodAUnglv5N5NGDBLZDZa/0fb+zgjtXb6qKXzzy
snJU8IxBUkoGQiOikF9cibSEUCQWuIbwHulqQXPfOMZ6m5GekYXUhCiERYcjMTULsdFJqKutRqDv
Hfipsj87PxXJaRno6hrVg/i8rTsAK9ZxlcdU/Xjw3l1fRCck4e7VK7h77w5iUwpQXVUNi20Z7XWV
iFNmLj4pF40tNQiKUKYyLl2ZQbtO68M2AMoJOteWMTElbmgXTSWlKKlq0HcAioqrMT42iS51wZQr
11RTV4+rF7+Hb2IOmhpqYVlYhW12BtNWKzqUE8/PykNdS6daZ1y/VtNcV4XWPuncx3Vr0Gz7csBp
AKjTlhRIUjBRb6Y//vEPuqA8ycdgRlpm23OX3KKPjonTbQVkeQmobyJJTzcCls8DScPkiooKXbZK
Ld9MUrZJAFl3yCie27Cr8lBGCJydUZ8qAEsf+VbLDCZUWbq44upsSwyANL412683lQyydfQtAClj
D0nyvruFqYkJ9Pb0q7yNICczHaWVdbpL9vbWNqTERiE9v1KvPzczjfVtFXZ3nOhXQb2vqw3xcTFI
zSrG8NAoWhqbMDw2jGZltIaGe1FVVY915y76env1cZXHK2Z5PSrpk+TRo0d6m0eRePHUABzcWbHN
TGLcOo/W+mp0DE6pfdrE1MwMNja34Nxw6scSzg3XUMa721vqbzKJ4XGLSkvFo4Puf42/43ttAOSZ
2WkgvTw9azJ4cojzlwvf7CBRFEUdlQSVFFXDvnr1qh4V8LvvvnsjyWumRyXlqwxMlJ6ejqSkZFNJ
z3FJSUkqL6lIUd+l45/09LSDz3Skpcn3NFVzVt9TU/RvGUBJ0jbb5ptKGstKrVhiglQMX6wB3fhR
lpO3ICanppRhmdC/RZbpaUxNTqiA36eC+rC+YyJ3Tkb1/HE932KZ1OuOjY9jdGRUt6ofUZ+Tar2x
sVFlBKqf/m3M8npUn332mR4QygwxWTJqozTYMySPMvSokvJIQwVv6QtHPmVIdml3oodo15+uIZrl
cYj0MGhMM9KRoC+NAN9LAyAZTVUnX1VVlR656u2pHLW1taisKDeZ57nq6upw584d3aDO7CBRFEUd
ldQYHz7yQUxsPKKiYhAVHXviko5pgkPCDgaOCjoZqbTCI6J02mbbfFNJuqFhEXqo9aB3KNm+HDuz
PL5IYSrf0kmSa1h4t4ackxbdvkLeKJHX9ubm5k5Mkp68sSGNM987AyDuSpyw3GaR5ydmt7bOuiTf
cjFLq3qzg0RRFHVUUl5IIe3epwX1fkve7Hj48OFBnf/5xy6ngdwZOH/+/PtlAMwS/7lJTM5pvXIn
2xHJSUBjQlEU9fYlFUIZJ0E6N5NHC6ctGRRKJEOPn0ZcpQE4hqTBlhyo+/fv6xbCERGulsK6ZXFE
hH5mJN9lWmSk67e0KZBPT2SsK+lduXJF350wyxdFURR1spIK11//+td3KrN8vQ3RABxDroP0Z92r
lsHmhvQA5da5yP4uHI5VVycQJ4i0eZA7AkfzRFEURZ28jArfu5RZvt6GXNt6CwZAEpZb5p7oNA/A
cST5EVco3YMK1tEeBDwJQ2VtHWrrGlDXUIWYqGikpGdjdnEdCzNDiE1IwajFhmWbFS2tXdjckS5B
t7G8tKA7h9jd2cSGUxp97OoeDWcs07DZF7Gi5re1t8Kx6ermorq6WrdRMMsXRVEURXmqt2IAxEHJ
u7HXrl3Tr5u8rv75z3+eKRNgGAB5xUQY727EQ58QDE3OIyP8Pm4/Dkdmcjwy8yuwsbWLhpoihIdF
wOu2N/zu38d3P15DQ0c/KguzcPeOD+Ii43DnxmV4eQchNjwMoSGRePLYHw8feCM5tRAFhbnoP+gk
Qt6soAGgKIqiTlpvxQAYDSmEow0nn3UG8WyGewcRQlhY2Jm67X3UAFgG2vDoUSBKK8qQlZuD8ooS
PchHUloWZpfX0FpfhtDgEEQn5aO6OAc+3gGIjUrE3Zt3kVVch+L0BFz4/hwSsnIQE+KP+34h8Pb3
Q0pGMZrr65CckoIRq6ufaBoAiqIo6m3orRgACVgySp2wv7eDjppKhEcmYMbu0NNc7KGqoADdo1bX
LxX8pUcrQbr1PEud8hw1AFvOdQxJRxZDw3BKZ9v7cgt/Ar29PVhac8JuHUf3wBDWdUcPDtht87BM
TmJicgZr69IxxCYWbLOwLa0ctCXYwOrKiu6ne23Zjs6uTjgPeomqrKzUvVMZPVVRFEVRZ08SB10B
1TyOnEW9NQNgdKe44VhDcnYTtnd20V1fjLjUeCQmJiE84Am+//IiEtNzkJYahQwZCfDgDoC0qD/T
BuDAqAiuLoa3n74jqod43HUN/SidOhhdDRvvkcpv6ZpYusKUISSNZaSXKelBSoaO3NtXZmhrS6cn
jQClVaj0UEVRFEWdTX3xxRf45JNPjj3uwFnQWzcA204n0lMLUFfbhITIYAQEPMI932gUZqbgzoNA
PPH1RWhoIGKS8p6O7nTmDYDbWAJvW9LzlPQR7T7ON0VRbybp0116XFtZkU+Keh3JefNMcvdWzicp
q+X17ffpra23bgCk32Pb1CjKS2sxMTaAlvY2zNkXYZubxej4FOyz07hz7Tz8Miue1qLlPXgZqEKc
1GnIPe9mepcGwLiDQFHUyUiQ0fWmZ6QLVjvm5m2YnZ3XmlO/ZZp8tx6RjPlvNp36cKTPEzkPDKnf
0zNW/VhXkL5bzlLl9VV66wbgOGwY79MfGIDY2FjtoiTovi3JbXXZ+T/+8Y+H8m6md2kAKIo6WYkJ
kGFqV1dWYbfZYF9c1v137O/vwbG6rAr1OWxsuh7zGSOJyrj28im/d3UD5n1XevLIT5l0+Xw26qiM
9OYaoc/1yM+1PvX+a0XOGbtdD3EsWlxcwuTUtDIDNn2+nLW716/SWzMARiPAqakpDAwMYGho6IWS
rg+Hh13fh4eH9djYubm5KCgoeGPl5+ebTs/Ly0NzczP6+vrw7bffPrcP7qIBoKifjyQwz9sXMdRR
j/CYZDS0tKJJqbWlFnExscgvLMbS8hK6e4dUAFeBXy0P7KChvhnLGxuYn1Fl2siULguE9TXXELvS
sPkZe/pOwvrGOnbcJ5P3GqdzQ9/udzgcT2VVhnHe5nptmwZASQzA48ePnz4TKS8vR2lp6bElr77J
CH0nJTEU0prekIyvLdsRJycO/aeffnrpwAs0ABT185EYAKn1t1UVIjAiGdO2FYTdv4SQuCykxMSg
orYdDvsEfH38kZudgLicQhXEd5EUFgwf32Dcu34TV+8EYmRiEpkJ0fDzD0NSdCxueV1HaFQiEqIi
ERudgMeP/OD32B95Jc263CDvPzJQz+rqqo4pEls21tf1HSMaALdEDQMgjW2ktn0WkKEW3SXjMcs4
zOLmfvzxRxoAivpApMd1X1hGd30Z/EPjUF1Tidz8AlU5KIafbwBy8otUuWBHXmoSkhLCEZWah629
PSSGBiO/vAVZSTEIDo5BQkwibt96hOaufsQHPMb1m3eRW5iLQG8f+EdF44F3IMqqG1W6DbrcIO8/
8jhH4oAEenneL93D21TwNwyA9GHzi1/8wnSkwbMo6bPnd7/7Lbr7h07eACwtLelb7YLZhXgakj+Y
uDYJ9O6SvMntG2nFSQNAUR+OxABYZqxYX13G0NAgxqYs+rqW5/ozlkkMDAzCub2DDccK7DYrbEur
eq7U9ja3trHpXMPK0iIsaj2bfUU/+9/b3VHLzmFdzd/dVttRv6WCsam3+ey1YfJ+IxVHuXNstVq1
JI5IY0AxAHI3uaamFoFBIYiIjH4vFB4RpT6jMDY5gxHbNg2AmY5rAOQEeBtyNSwy3yZFUa8nMQBT
lmlsqcBNyOtgxBKzNgDSuDQtLQ2ff/65jinvg2TY4R9//AH9w2MYXdg9eQMgjfkECWLvQhJAxbW9
TQMg25HHCpKm8Z6xfHf/bSaZb+TFNc21zrLbetIHgORTtnF0uxRFvb4MAyCtugl5HcQAGOW2SNoD
uDcClDZv//7v/27aU+BZlMS9P/zhv97eI4DCwkIdhOXAvStJADUC6tHAelIGQNKU9PQ0eR1oy6mH
C97f230avOXT0JYyDNvbWyrYL2J1fUOnu7+/i/W1VSwuLevCyUhfbjnJfhjpPJPcWnS9jrSzu6e3
ZczbVW704K1K3avgs3VOXkfbV4jMlqOosyAaAOIpUg6/zACwEaCSYQAEueDcO+F4V5KL/qgEuTvw
pm8BSGAWQyFpSszd23SgNDMNUYmZsNpVMFfLPGMfzoOCp722FAmp2WhsaUVLWweaGioQEx2D4opa
bO65ug4W5ESTNyoOG4Bt7GyuY2BgSL98tLFsx5R1QS8vLM1bMTI0iIbKOjg21bJP1zt5iYkSiQEy
LgyaAOqsSq5TGgDiCTQAilcZABnT/9atW/qdfnnPvqen58yqu7v7jfsBMAyA3OkQZvrbUFTZhY25
IVw654W4zCwkx4fB6/4dBASGITg4Dkvr26jOT0VMaj4Wl5dw48evkJZbisjgEDS1D+jxAMS4CKYG
QBoebS4jNysXlWVFCA+JwL3Hwejo70FhXioCQmNQ39SEGP8IzK5uYve5uwcnJ8MAzM7O6k8aAOos
iwaAeAoNgOJVBkAkXexKL3vvg17VHfDrGACps68vzCAjMRU5Obm4e+cxIuMScf/aVdy954XQ2CxU
V1Zh3LqMxtIsRMRnoKqqFOkZGcjPz4CPzxMUlNXoUQZfegdAGYD9nTWkRkfB69xl/Pp3n+hXmu7f
voLPP/0M3/x0A91jFlRnFWJ6af2tGgBp7dzV1YXQ0FD09/frvNIAUGdVNADEU2gAFMcxACL3/vbP
sszy7q7jGgCpsRtBe2nOguHJWXQ016KxY0jN28bU9DTWNjb1SSS9g22sLKCnpxtjU9N6nZ2tdQwP
9KG7bwgHowFrTA2APALYdmKotxdluUXILyxDRmYueoeG0NJQjYb2HtgWFjE5PIaV9c231g5A8iS3
/qVjjNTUVDQ0NNAAUGdaNADEU2gAFMc1AD8XvcoASM1fGgHKCSEniNSIpYa+uyMBe1sP++tUAVEK
nq1Np/6+sbGuCyA9RLAKovKOsQwosSfP/vd29XxJR2Sz2XS6hw2ASy9DhhdWlkStd3idk5bc9pcL
QQK/fMpxoAGgzqpoAIin0AAoaAAOFygSmCXgSaCW5+Bzc3MnJklPTjKz4H9WZDz3dxcNAHVWRQNA
PIUGQEEDYF6wyJ0AKVxOWmc5+ItoAKj3SXJN0QAQT6ABUNAAmBcsH6poAKj3STQAxFNoABQ0AOYF
y1HJHYHnau/HqM3LOvLc/nVr/sYdCPk8De3uuvbPzADIdLN1jqv34c4H9X6KBoB4ypsYAIkh0vue
zH8Xkm1LHtzzRANwDHliACSALy4sYH1z+2kwcwW3Z70BGtPd57vW3cH+/t7BtMMBXS9/sJy7ZJ5d
bW9sfBJTU9OnoonJKSwsSA+IroZ/ohUluUAs0zOYNFnnuBqfmDR584Gi3lw0AMRT3sQASACWTufi
4+MRGxurFRcXp2X8fltKTEzEuXPnnovVNADH0OsagL39fcyO9cLvkQ8y82qxuu7UrfvXVpfR0tSA
wYk5tZx0UbymW/zb7HZsq9r0htOp028qyUZieiFaWtpgX3KNA7DqULXs1TWVzi7WnRvYUcu7b1MK
tckpC5ZXXA0GT0NyN0M+jYvBkNwRkLcfji7/OrJa5/Qwm4YpoqiTEg0A8ZQ3MQAyPTk5WS/3LpCh
io/mjQbgGHpdAyA9AUz2NuLGzbu6W9+IJz645x2M/KxsRPj6w8svFNNTQ3h4/SaCIqKRkByLJz4P
cf7yFQxal9BTX4Z793wRl5COxPAgXL56H498HsM3KBKRgY9xTi3XO2k73Pe/KtSk1i2vGJ4m0veB
e/AXiQF4UxYWlmC3uzpXcj+2FPWmogEgnvKmBiApKUkvt7k8i+raKiTGJSC3sAg5ueVYlHRXN7Dh
WNJDUO/ubWN6chgtHX26AilsrTswNTOrY8zC9Agqqpp0fjpaWzFqmdfDUm+srWJufkGtvwvHmkOd
567hqINDQvDr//j1oTzRABxDnhiAif5WlNR0YNU+g7s/XsL3l24gJzMHiSER8H0SjoKMHFz9/hKu
3n2IiPBgXP7pPLzue2N0bhn9na2oqiiFlzIIj28+xGffXUZiWi5ys7Px8NpV3H7gjcFp6XjoeQNg
3EU4LV5kAIwOkTzFbl+kAaDeimgAiKe8qQGQW/GavS1kx4bBOyAIwU8CERQYhAf3fBAeGomkZBmn
PxJeNy7j08++QGB8IbDrRGd3Nza3NtFUVYSShi6sLVlw++pNBAeG4KfvziEoNguDfV14dOceQkNj
EPjoPi5evYroqGiEBQXj9s3z+N3v+AjgtfW6BkBujUtHPmvrG9jZ3oJFrbewvILJsWFMzy3qzoBs
8/OwTE1jcqgHV+/cR7dyb7Nzs3CqddeVa5NOgRzq5JqZmoLFOodVh0OdbA41bwVTUtOXW+Vu26QB
oKjjiQaAeMqJGQBFRU48sjJzkRAZjoTYeCRklKC6JAdP/H1x985d3Lp2E74BgcgurFXn7BYmpiax
6VxDQ0052gYmsLE0jYf3/dHe1aVMhB9iohIR4h8Ib78o9HR34P7lS3gcHImc7GT4PvLFx5/8/bme
b2kAjqHXNgBK8hxbGvzJd0Fq6xIT5VOCmhRCgjTo06iZEjQlqEsjQFlfltFhVE2XdbRkvYPl3Ldn
GAAxH6eNe/AXncQjgMXFZbYBoN6KaACIp5yUAZDzUCqJUmFzbjh1g2eHYx3bqrzLT4nGk/QiVY6q
MnBxQTcm31TlusSHLbXO6tq6SmFfmYENtcyqTmNlSVWYbPOYnJjCyuqaSlulu+6AdW7+aS+0vk8C
8Zvf8BHAa8sTA3DaMgzAuDoB5IQ8Dc3MzGJp2dUN8NPgf/A5q048achntt4rpdYbHhnTz8RoAKiT
Fg0A8ZSTNAAS7J9W7A4kFT/jeb/cXZVu5OV8fXb+qoqlWsb4LvOMyuLuwVg0xuvZUlncV9PkuxAS
HIxf/5oG4LX1PhgAQy4neVpy6AtCavzGBWFI5pmvczzp8RRM9o+i3lQ0AMRTpIMzKe8k8IukvJXK
jryCLUhL+//5P/8Hfvvb/3xOMj0hIV4vJ0H6dLSrDYMYg8DAQBoAT+SJAdjZdY3lL7dq3KeLu5OW
mu7Tjkr9rfQfTt/ycZ+nnZ75uuLy1tbWtRO12RdORbItuQXlfgdAJA5ZL+NpXtR68vyfvQlSb0M0
AC9HaqKWaau+wzdjnaPcNDlpwejYOMbGJrTGxycxODSCoZExPT8vvwCPHvnA3z/gOcn0oqISvZyc
fyevmSOS/lSmdFyQuwlPnjyhAfBEr2sApIBZnp9CSkIC6luH9DoGVss4Zu0OHdzN2UNfT4ceyndI
nViH2ceqQ57/PGN/33V7SNoWSD8A09ZZLC4unYpcnQCtmd4BWFxaxoLJOsfV2NikctWLujA6enwp
6k1EA/BypLGxGACzY/ehS46NlHtGObWkyrrZ2XldGZL5uXl5uHTpMm7f9npOMr2ouPggLbmNf7KS
yphUnKRCJmWyPEKdnJzS0yTe0AB4qNc1ABLaJ3ubcPXyNSRnFKEwNxOFpbWoLMpHZHA4ErKLsGCz
IDUuATV1dUjPSkNpaREiYqJhXXWip6kSBYXFSE+MRlxyPLJyixAbFYOE+DSUlZajoEilV16KuMg4
dA1O6wJN9HNrBMi3AKi3IRqAlyOmXu7Eked5VRsAeQTwi1/8Ar/73e+ek0yXXv/eFtKoUMrezs5O
DA4O6seoMzNWbVhoAN5AnhiA8e4GhMZkYGJiFDe/+Q5/+uRL5GQXINb7MX646IXq0lJ8/8nn+PL8
NWRlJuHbTz7Bl9/+gNbhOWDThocP7yDE3xfffP0lLt14hKToSHz1j8/xw09XERMbinOXbiAlOR15
RbU6T4YB4GuAFPVy0QC8HDEARkAjhznJ1wBPGqcq++fn55GXl4fKykr1d3RgxjpLA/Cmel0DIEFr
yTaL+UUHdjZWUZ5biKaObtRVlKC+qRuWyUm0N7eirKgCtZUl+PSbb5FT1YjGllYsrUsBtYne7m7M
z82ioa4avaOTsAwPo6y4FP2DA6ipLkVbzyBmrVZMTc/q7dEAUNTxRAPwcmgAXszZMADmZavzIG/S
dkrMgOSNdwBOQK9rAETyCobuqc/klrx7cNxxrmNy2oqD3gCwu+1aX5DgamD2J9eviRz0BmgYgM2D
dU8L2Rf34C/iIwDqLIsG4OWIATBatZPDSHA1yjjRmqply1sAxiOTsLBQ/I//8T/wn//5n89JpsvA
PC9jZ3MdM7PTGBsawaiKN6NDrphjxs6WE7Mz02iqqUS+qkyuq/N5zbGKoqJCFBYWwmazYW7eRgPw
pvLEABxX8i6ohPejHfu8rsQITExZMKec6Kq6gE9DK6vyGqBTXwhHTYBeRs0/us7x5NCtbWkAqLch
GoCXIwZAWo/r65c6JAmmcyrgS2AVyRtL+o0J66yeX1JaCm9vHwQEBD4nmV5RWelK67kyT0lN391y
oDA7Hd6PfRESHoXQ8BiUlpSiqqYF/T2NKKisRWdHE5KTYhERk4CC3Gy1XBIKc3JQUd2uystt5Obm
KRNQrIzJHEbHJnQ5SgPwBnqbBuCkJH94aQU6rU5GqzoZT0PTM1YsLblug0mDE7ntJJ9yG0pui8lF
YbbeqyTrieR2m7zeaLa/FOWpaABejtxZlBqt3Na22eS1XMqQlHkTE5N6KHSRvHk1NDyGkdFxPT8t
LR3nL1zE9Rs3n5NMz8rO0QFZysfnZJ3Tx74+Nx4BweEI9fNFaEgobt/1R2JUOB6rAB4bHojP/v4P
fP3ND4hIyEZpYQ4Ssyow2tuJ4uIGfafYeANLjIqkKT0BSrr+/v76MYR0B2zoj3/8o/r8Ew3Ay/Q+
GACR1JbF6e3v7+keoN661LakMBUD0NXVhYaGBvT29urfMt3jfBys96LgL9N/LjLbP+rtigaAeIqc
P6urK3A4VrWkwiN3AuSVZSE6OloF2V+puCF97h/Wr371f5RBSNPLvQzHsg3zc3bMWi0uE7awjHWH
9K46ixX7POZmbXCurWFpeRUry0tYWFKfizY41l/e/is8PEzH6k8++eSp/v73v6vPj9E7OEID8CK9
LwZAAorcjl9YWMDioryr+nYl2zF6A6ypqYG3tzeampr0RWHMP7rOqyTriKSHLbMAKdPkEcNp7ePb
kuRfjhNNwOmLBoB4yssaAcq1XN/QiMjIaMQnJD2n2Nh4ZOfkoaKyGmXllS9QBSqra1V5Woea2nrX
Z00tqg6mVenp6lP9rq6uefop61RVSboVR9JzqbKqBplZOToP7nmKi09AvNL4lBXDtm0aADO9DwZA
Tj4JmhJcpICT34aeomrW8lvuFLjmuZoeyoBEL1rWbDl53GDMk7RcpmNR1/7lopBRDJ/ONz5VnnRb
B+O32zbdZTzzlwYsR3sClPliOOQCPLqPLhlNKRX7z2/LfZu7B/1tu+fJkCx3dB33RpjS3sJ9ntlx
NPbbTLKe7Jvd7uo8hDpd0QAQT3mTtwD+rGKI3HJ39Qvw+1PW79S2/6Tz4J4ntgE4ht4XAyAnowRI
wfWGgOstAutwP6Kj4jAy47pN5c6yOpndg9tgZyNiY5Ixbl09mOJiaHAE22avIii2t2To4hVtQOTi
WF3fOJjjzg4Wlw6naWDk1T3PYmSkTcHRfRSzITVn4fB6rsyNdbcgOjYZ0ytmeXiGY3EWWamp6B+b
O5jyciYHOhAZFo6Wrn5suQZyPIQcx2fvbDxDHmUczqdL8vhE9pHdHZ++aACIpxzHAPzqV7869Jz9
LIttAI6h98kAiAQdaCQm7juRnZ4F+5IDHXXViI2IQJA6SXt7uhEXHoRrt31RXJSDoMgYrG/toTo3
Bde9HqO6qhLx0XH6FlN+ZjoCfINQ1dmHiZ4mhEckoaGuFMnZechOjUV4ci42tzfVOg2wz88hPiwK
icmZiIsOQXRqJuqrVVqhwXjoG47a6gJkFxcoQxKL8qp6DI+O62BoFhxfZADEaDzdR2Md9Xt3zY7U
xBzMz07B/4E/YlIy0NBSi5iYcKRkZOvxsrv7JpRZ2cD8VD+iQiJR19yM3Nwk5FfWY27OiryMDCQn
pSA3pwD1FcUIDA/D3KoT7bWV6OgZQnp4MILCE5CaEIfgmGhU1dahICMVXrceoqyyDNmF2UhLTUZ6
TjF6enqxseNqk+GeV0M0AO9GNADEU97oDsAZFO8AHEPvrQEQB7C/jaLsbLS3dSMjMRl+d27jhwsX
EPEkDF//4zNcuPUY/rev4vvz12FddqK2MFMF+mEM1pfhX3/7F364fBs1RaW4/d15BMWkID82Fn/9
86fwCQ5FvAqGn/7lb7jxMBTrygBkJKagqrwMt86fw71HwXh09TwuXLmOgIAIlKgA7Pc4ACnJUfC6
44XElFz4+t1BXa/FLb8ueWIAZFf3NleQrYxHY1Mzbl3xQlhMEu5cu4CffvoJl9V+5uYWoLisURX8
O1hdmUNWVhIuXbuFuMQI3Lj1CKnJqbhy6ZZuyFNaUIqAa5fw1Y8XMDC9iO6GCuQVlCE5xBc/XbqP
sMeP8OP5i7j/wAcVeYUIDwhGbGwUggK9cd8nShmREAQn52tjciifbqIBeDeiASCeQgOgoAEwL1je
pQwDYDwCcGdjyYbywlL1R57A2rIdXX29mBqbVLX4RnT3qlr96BA6+wb1sksLCzpoOWZnUFPdhLHx
UVWDr8bUjF3VrK3obe9Ec2s38lOj8KUKqgODA+gfdwXxoa4WVQuu161Vp6ZtsE2PoU9txzLSh/p6
ldbICHp7WtDRO4iFuUmkZqfD8YKhC15mAIxHAGYsz06irKoR7a11iEvKgk2l09fbibHpeayoC9Y6
M6sMxCY21xdQUV2DGVXrb29r0gGhrrIW/UNTuhVuXXUtpiYn0dHdoztpWrVNobCgSB2HGYxPTGN1
yY5OVcO32ayor1Hr9Q9idKgbzW1tsC8to6goAz2TL3+8QAPwbkQDQDyFBkBBA2BesLxLSXCUk1Ma
z4kJMO4GiNY3nKqGLI3dNnVXwVIAbm5t6pq2NOiT3gpliGJ5rUU69pHepNbVcvvq3/aWNJjbU9tw
dS8pHRfJCITzVitm5u36t/ReKNvZ2tnF/p5KW4LaphNOWVelvanTkF4RVT7VMrtqm6tLC5idX8D6
2uG8iuTCMmsgJ/sowd9sHw1tONV+qW1JQ0TZ7qbe3z3dTkGOj+zDmtqmY21d77/kdUflaUt97u3v
YUflUY6B1NClV8U9daykt6/1DXXCK1wBW9I6OI5qe3J8JG9b264umTc31nR/BmvrG6Z5FMk+ypsA
er0j+0m9XdEAEE+hAVDQAJgXLO9aEkwkMMqAEBIk35Yk/QVVe11alM4xZChM8+VeJJ0/FeAlANqO
5NXIuzYbJsFRpslF97J9NNK3G9+PzH+rUtuT46H3TX3O697CDutV+0i9XdEAEE+hAVDQAJgXLGdB
ElCkgHvf9bLA+HPZR7N9o96+5NjTABBPoAFQ0ACYFywURZ190QAQT6EBUNAAmBcsFEWdfdEAEE+h
AVDQAJgXLBRFnX3RABBPoQFQ0ACYFywURZ190QAQT6EBUNAAmBcsFEWdfdEAEE+hAVDQAJgXLBRF
nX3RABBPoQFQ0ACYFywURZ190QAQT6EBUNAAmBcsZnra297BbxkW1/gtXe660nvWH+729vNpHJX0
qnec5SiKel40AMRTaAAUNADmBctR7e5uY2hgEGtbRqiH7iZ2dc2pv1tGelHd0I3trQ0UZ6cjr7gB
22Zjyh5hVZ14OybLmeWBoqjDogEgnkIDoKABMC9YjgrYQ0F6MgKDIlFUVInivDx4Xb+D4so6FGak
wdfbBw8CUrC1sQTfe7fxJCwJFUUFSEhIV8uX62F4U9JykZaWgsSMAjTXV6l54bjh5YPSsmLEJycg
N7cQ4SGhKK3qxLYq2MzyQVHUM9EAEE+hAVDQAJgXLEclZMUE4c6jMGQmJ+Ly9z/gX19dQEZKJi59
8RU++vgz+EdmY3PdjuCAMAxPTiL23l386jcfITAsEaFeXvjNH/6Jh4+DERYWgXOff4bvf/wedx4+
wcNrl/Htd1/j7qMQhD70wpU7oXDuAdsm+aAo6ploAIin0AAoaADMC5ajkuf/U6NDGB6z6KF0W2rq
UddQh87mdlSWlKOmoRmDI1PY2d7AjNWm0+6sqUVhWTUmp2fRXl2DkqoGjE1MYWJiEmODvWjpaENf
Xx/6utrR1NqCSbXeSFcHGlq7sbu3r0evkwKO+vlob08+d0zPMer1JceUBoB4Ag2AggbAvGBxlwxY
Mzc3j7n5BdjtC+rTjsXlFXXyrMC+qE6gFRkSVn232zE9M6tHjZuetsKu5q+qefJ7Qc2X8e9t6uSy
2RZgW1hS68swsouwLyzrtGRUOfvish5bXtZ/bc0c+TSTzHvZfHep5WbU/pjOc9eL0pN1jXnu2zVb
/mC+3p6xrKGj6xz9brbMGZUEKzkH3BuTUp6LBoB4Cg2AggbAvGA5qpGRcX3CyNjzUtisr2+8VDJ+
vYxLf3T62roTTjV9TaXjPl3Gq5fx/eXz6XS1PWNcetm2+/Iivc6G8+lvyeez6c+W21ZpyHC1ehn1
3VhOvou5OZq2jH0vcqrpcoHIPrvPPyyVZ7fjYay7vbOjL6g156bejizjVN9leSM/cgxEG05VkMuY
/Wpf1lZV/mU5pU3Js/qUPBrL6+093U9J16nzJ/vkVNuQMf6NdM+iVh1rGBmd0PtknFuU56IBIJ5C
A6CgATAvWNwlQcW+YEN7XRlCguMwOr2k1xX2VOAyY3XJBtvy+sEvd7ZRnFMI+9qzAmsfe+hp6sbs
9Az6ukcPprqwWafQ0z/y9DVDdzpa27Cy+WxOU2MrNre30NHejS23bFmnpuDY2NHfGyuKUdnUr78v
2eYwYZnHnlniKk+lOZnIyS/A6kvL1k10dfUdfH+GZbgbaQnxyC+twty0BfnF+aisbVVzdlFfWY7+
sTnXgoqdtTnkpuRiYGAQieFJaG6oR1Z6GZqbmpCdWoTymho0t7m24VieRU5eEVaVEbDPjKr5qais
rEdDUzOKC4sxOue6eM8yU5YZ0/OMen3RABBPoQFQ0ACYFyzuEgOwtGRHQUos7vlFoLGqBP6PvBGi
glVhVjoee/shLCIavkFhyMrKRVDAI3x//iqi45LwxP8RgsLjEPrkCXwD4mGfnYSPlzcKCjORkBaP
iMhUzC87UJ5eilnLFLwv3UZgWBxaG5sQ8vgRzp2/hEu3vJGRmoCHj70RERGD2Jg0lKj1H/r6wVct
4xMcieL8JNz2jcSGqlkmhYfgsW8wMjNyEREYoNK4g8amejxReb5+4z6SUnOREBqA73+8gtDoFORk
JiEpMxmRYRFITC3E7PyqqsE7ERsSjKLSWuTlpKGisgXZCdHwVvsfHBKC8JgExEUnIyE9EaGhkXj8
4Dais8qwsriKnc1lxEaGw//hY7UPQQiKDEPH4JQyUSuYGulDamoauobnsL1iRXx8PEamLChNzkZ2
WTnKKkvQ1tuLgtREDFtmkRUXhdb+MSwtr+q/1862EzPTc1iZt6BeGYXSvCzkFtVienYe85YRZTQK
sW1qaM4G0pZkcmra9DyjXl80AMRTaAAUNADmBYu7xAAs2GdVjTgHw/NL6C0rwOcf/wvXfSJRnpqO
T//+OW57hyIvNx+BKsheVEHbOyAMMcHBuHX9Ou77haO8IB9Xzl1XQc2KyqJCZKbHw9vnIWLSKnU+
msrzUaTSfeAdjKbWVoQ+8MPF737CxVsPkZ6egYB7d3Dz1g2ExeWgrrwI3mo7EWGB+Omb7/HAxw9R
ESrQRifBubeHSP/HyCioRkF6Cu5cuYwb9/2Qk5CKn776Ht9evIlg3zB4nb+M7y/fRmR4BIKCAhAY
6IvYlAKUl5ZjYMyGfWwjPjQYefmF8Ht4VxmKKATcuIOPv7qoTEIuUhNice3KfcQkxOHOzTs4/823
iEwrxvraBvY3lxAd7quMkS8SEvJQqGr/I3NrKvo50dTSgeG+DkQlZKOnuw3B6hiNWm1oL6tDSXkF
okKUmamsQFJ8NArKK9VFGI5JmwPY28GifVkfK6G7uRETar3G+mLc84+EfUNF/Z0Vld9cGoAPSDQA
xFNoABQ0AOYFi7vEAMxMz+hn03qd1RUMDQ5jyeHE2uIChoZGsbS6ho11eRa9ifm5Gcyr6StLC5id
m8aCYwNbaw5MTkzpW/k72ztYtlswPm1VNe1dneb+7jpGx8ewpgqynZ0drNgXMDY6pmrjs5i2WHRa
FusMNja3dQ+EC7NTGB4dh2NlAfOqdrw4N4nh8SmdlnQutKHS2VT5mZmcwpxKY15ta3RkDPMLS1hd
Wsa4+j6j0pu3LWLJPo1xy4xOd3PLickxi86nfWYSXV1dmJqzw7nqwPjwKCat8+rCccK54UBJXg66
hyb0eja9n2r/N1zHaEXlr6SoRNXuF+FcmcPQpFVN3VP7K88mttHe3gbr0rNHJJtqvW2V35HeMaws
2jA2bsXywhxGxmb0/P3tDUxPPXts4FR5ECZH+zFudV2wawszGFTH5KzDRwAnJxoA4ik0AAoaAPOC
5aiGh8ewuOhqtb+oAu66CkAr8ibAisP1fUV9l99KDhUIV1XAXFbz9Hc1T94akEZgen0VgJdX1tS8
NXUCLsNuX8TComs9eZtAtrOs1peGbqvKWEjDsRX1W9ZfVsvL/JVVV6OyFTXfoebJ59ramk5L3kqQ
dHVepOGZmrei0pAGdK58reqGekY+dRpqvuRLtKIuBLvK54qaL8Fe0pe0dAM/tQ1jPyUPkoZsa9XY
T/Vd50GlKevKcVlQ0xYWFlSaSyrvS2pflUFRAV+Onywrcm1btqHSU8fXobaj83mwT7LuskrLfXn5
XFXmas3h0N9tMl1dyMYyZ1Hz83aMKJPCRoAnIxoA4ik0AAoaAPOCxV1SWEsAdgUg16uAL5QKVBL0
jN8SrOW1Pvluk98qcMnJ5voupkACnGuesc57IwnqZtOpF0peARTTRQNwMqIBIJ5CA6CgATAvWA5p
ewc7Ww7kpCYhr6gcbsMBPMeucwVd3QMHv1y34zfV+gbOtWXMzi/o70vWEWRklWB929VBjNz6p37e
kk6A2AfAyYkGgHgKDYCCBsC8YHGXPKffXJ2F30MflFTUISsrEy3NHUiJDkd4VCKCw0IRm5iGxPgU
xKfGIyI8Cn7+j1DaOoipoU4E+AUiMSkLmalpuH7+CuLTC1CYnoAHD7xx9dYTLG6owMCgQFGvLRoA
4ik0AAoaAPOCxV3aADjm4fvgIQoKi3H10nn4+0Xh9vc/4uOvziNWBf4gXx9cvfoQoZGhuPTjRXzx
+ZfIKG9FT0ORDvLlpcXwungFX375HeLi0+B96Qr+8s8vcPNhGJZoACjKI9EAEE+hAVDQAJgXLIe0
vY3tbSe6WptQXV2F/pFxWIZH0VzfhK7+YczO2TAzOYTo8Ag09wzAbptHb3cHZpYcWF2cx+i4RbcD
GOjqQWdnO4b6B9De1Iq2rl6MjE3plv3b2ybbpSjqpaIBIJ5CA6CgATAvWMzkjnszAOkNcF/J6FHP
6B1wX573qgJKlpaCypx9jvpHUR6KBoB4Cg2AggbAvGDxRGzZTVGnKxoA4ik0AAoaAPOCxUxnLcBL
ftzzdPT3aeqsHRvqwxANAPEUGgAFDYB5wXJUEuDkJJEObY6jRZNpJy0Zfnh9ff1p4JcTWKaZLesu
aY8gMpv3ujLSkWNDE0CdtmgAiKfQAChoAMwLFndJYJMOeyTYyfN9KXTcZSDf3UfWk3YB7ssZs55O
c1vYSHdvX6Y9azOwv//89kSyvB6lUAV8yZ8Mlyvfn1v2oD2CsHcwzYVrG4b0lINl3fdRo/L09LvC
mGdIlpdjI8eIJoA6Tcn5RwNAPIEGQEEDYF6wuEuCmsPh0CeIIAHPkAzu0lNXjqqaTv19e2MVhWmp
SMstw7bbkLzCttOBObcBbXY211CclYbSmjbsHniB3e1NONZd/dzPz87Cua2/aiPgvl1DUvuW/Bkn
s/B0vgRulV5RYSbyy2uxpTaytbaAuKBAhMbn4FlIl21ZsbaxqfbRAfdsL9rmsLS6ob/3t9ajqLJN
76du9HggQXo/lGNEA0CdpmgAiKfQAChoAMwLFne9zAAIwy01SE91jeo30tmIkroeFe1XkRQVDV+f
e0jMK0NNURbO/3QZoVGJiAh+jIwKFfSld8HEWBQWl6MkPxd5mTKUcACeBEYhJSMFN+89QGJiEmJi
c7C5I2bj2XZFUvi91AAoyTpL86NITk3D5kFk76ioQlNDh8qfH6KSM5AQGYEff7iOodkltFQW44l/
MLIyC5EUE4ML526gqq4RsSFB8Lp1DwFRuToNGgDqLIgGgHgKDYCCBsC8YHHXqwzAwsQQSvLqsOZY
x9x4P1JT81BbWoLY8BjcuXwOD/1D4X/jLv7y6feICAvH+W++Rkx2DbY2N1BdXYgbt70QHpmI3MQ0
hIVG4saVO4iMjcV9nwBkxEbgwsW7sK/LrYD9Q9t+lQHQNfXtNQQ/vIuCmjasO1x3FnpVQK8pKsPN
c9/C2y8E969ewrfnvGBzbCA9MgAhsdkoykrHrQuX8NNlL2QnZ+LiV9/hk8+/U4ahRKdBA0CdBdEA
EE+hAVDQAJgXLO6SoCYnhwQ4M3Y2nVhZWsHqsmv+RH8vGps6sLq+CZt1Qo9bP94/oP4wA7DOzKht
D2Nuxalr590dLXo42+mxAbR3DuiR+coLslFc26JOxDmMDw5jaHhMp3sUCfBGGwB3A3CI3U001dWg
u38IK8uu4Xc31L5sbm7DahnF9PwCJoaG1DaGsLy6juVFO+wyMuHqCkb6BzEyOoLJkXH0dPZgeHwS
toUVncZRxADIMaIBoE5TNADEU2gAFDQA5gWLuySoSSO7+fn5pyeLITmBVlZk+FrXHQKZtrG5qdbb
VIZBhg3ehHNjHU41TTr8kVb7Ulitr7mW3dxSaav5Gyr9LWUk1lQ6MhSubE+WlfU21XRjW8Z2RRL8
ZZoRdOW3NMYz5ss8GbZXujKWtFdVUJdpq/puxora5iY2nm5D5VdMzpoMMyzDGDtU3lTeVT42nBu6
N8RNyZOa50r38DGQYyPL0gBQpykaAOIpNAAKGgDzguWoJLC5hu599Wt2pyEj2LvnTwKwMe/o8m9L
si2R8Tqi+zGjqLctGgDiKTQAChoA84LFTK7hXI83dK/xfHxH1b41+/LdfNk3kXv+JACbLXMaYvCn
3oVoAIin0AAoaADMC5bntalPGKllb21t6+fvMra7ftVOFULG+/ZG4zu5rb++LrfEN2GZGMf8okNP
F/NgLCPv5e/tuaaJUZBpgstkuBr5ScM/jhRIUeaiASCeQgOgoAEwL1gOaXsXWw47ygtrMdjdjcrS
RnWizGNsfBITE66GcavLi6ipqMTwhBXLS8vITopDQk4dNpZn4PfgHqLi82Cdt2N5ZRVzs7OYmZnF
yooDM9ZpNV1u5Tthn7egvKIWS45VLKoTcmHBjolJC1ZW15/PE0VRNADEY2gAFDQA5gXLIWkDMI/8
jDJMDHbhpy/OIzQ0HDeveuHRQz/ERETj/s3r+Oyrq6goL8ONc+fxzfcXEZtZjbWFCdz1uoeiqnrE
PHmMz786j+ioJAQ8vIvvz93EvfsP8PhJKB7dvobvvvsSF68/QqD3HTXvPB4+DMC1C+cRn1GrO+cx
zRtFfcCiASCeQgOgoAEwL1gOaxt72xuoLctGcmYKopPz0NPRjKsXb6Civh11ZUXwu3cfD/wCkRGX
gptq+sXrd5BX3oZV+xQqajt0D4Eht+7h20teKC+vQ+jd+zh38yEKiytRmJ8P/3t3ERQeiqSkFEQ8
8VOmIBD5pXXIigxGRHIhdvc5bDBFHRUNAPEUGgAFDYB5wfKcpJX9xhps9gXd6E2/HidtAuSVPyW5
7S+vz62uuF7PW9twqmVcrwPqVwDVOsuLC1hcdr0rv7Rgx/Lqmiq4ZP6WCu4bWFhe0q3p19ZWsaDS
297ewYo6QdfWN57PD0VRNADEY2gAFDQA5gWLmQyMVu/Gp0gKIqNFvG7AdzBP1jM+ZRmRa3lp5Pds
fVnvWRrPltvR017eCFC2Z+TLbD5F/Vwl1wkNAPEEGgAFDYB5weIuI0CPjo5iaGhI19qNYLt/MKqe
9Oonv12B+9m68ttoxW8M/iePFARp9W/IQJZ9+uogXGkav8UwGOkakvStViv6+vr0SSxmQKYbbydI
/jx5dGDk1Xhj4WkO1Xe5MyG8LF2XkXlmXOQOiLz1oOcp86PXdztOr5bx5sWzY23o+WMur1y6tm3k
25hH/bwkf3saAOIJNAAKGgDzgsVdEsxaW1vR3NyMzs5O1NXVqZPHqQqfTfR39GHaYsHI0JROTzoL
Mkb2E9ZXl7G0sqa/Twx2orS6Xd/uz89IRX5RKTp6h2CxTKKqvAip6ZnoHZ3Gqn0a8TGxqG0e0Ovt
bm6gp6sb1gVXV8NGviQgiimpqanRBqCyslI/fpCgPd43gKmpGQx2DT4L3gq5M2H8Vqu/gH2M9bUj
KTUTdU3NGJ2YxvBABzLT05Gn8iw9H9ZW1MBxMFKhICbFuBMhbDrX4dxyGQVhd3sDNrurq+KNpRnk
F5RhaU2deG7s78mdj2fjCxxGndBqn2amLRgcsRxMk3V2sLy0cmgEQ8eKuqgPRjAc7WlFeW27vpPC
NhQ/P9EAEE+hAVDQAJgXLIYkGEkNu76+Xgdcob29HUNDI+rbNvIS8zE+PAS/Gw8Rl5CK9NQsxERG
Iye3BLkZGbh28SYKy2uQnRSPRw8e4UFgCjY3luBz7wEqatvQ01CEC1e8kJ+dgcDweEzMLWNqoAVX
Ll9HWnYJSnLTcPPmPVy77gXvR4HoGpzWeZK8iTGx2Wy6216ZNjU1hcbGRp3H2uxC9PSOIDcsEqFR
SaguKUJAWCisyw60VeYjJ68a9SU5iIpJRUJiPGJSclBdXoiAkBDMOjbRUp4N3+A4jFlm4HfnCqKT
MxH65AlKqpthGWrHrasPUFqRh4z8bGRmlWB4dAyjY+OoryxFdGQs0tKyER8bh+TUXBTnF+DRLS9E
JuagpjgHT/wDcenaIyw5d9FVXYCY+Awkxcajs38aUxOjGB2fQHF2OlJS8lCUlYiolCzUlqXByy8a
o8N9uPvAB2kFBWhoaML45ARa66sQGhKBvLxS5KSl4eql2yirqUdGQhweqOPsE5yqTQ8NwM9PNADE
U2gAFDQA5gWLISlgJMhWV1frRwESaCXIjqsgJTXl8twsVNWU4dIlLxQVFeK7zz6Hf1gi8jJScPXH
n/DZ1xeRnpyBy198jY8+/hxPIrOx5VQG4O59FJVWq+CYhsCQKMREhSEgNA6Dk/OY6GtWwTIPlokR
3PjqW/zpn9/CP0iZisxMVQOveZpvXfipoC+1fjEn8niira1Nz++sLUNxeYke6vfKufP48h//wjc/
XsCAxYbK1HB89+1lPLp6E7/76FP4PAlHZGQUzn/xGb767if0Ti2gszoPj4Ni0NragrBAfySrwOr9
0Ad5pTWwWsYQp5ZPSgzH9etXEZtZi7nJQWV8EnDl/GWk5RTB++ZlnL/hh2J1TLwuXsK//vEFomLT
8OT6Dfzhr5/islegbvQYd88LH3/+I85/+x1SCxvRVl+N8PA4ZRhu4sJ336t8f4qLV24gIMAXIXHp
GOzrhb/3E0TERuK61030Tc0jKyoAD/1jkZ2SiMvf/4AvvruKzJQMnPvXF+qYf4HgmBwagJ+paACI
p9AAKGgAzAsWd0nQ7+/v1yZAbv/LHQCjXcDC3DhqGuowNDEF2/wcOlQAHpucwdysFa11jWhobEBX
Sweqy6pQ19yGwZEpte4mGqsrUFZWht7RSWztbKKzvRnFJaXoGZmEY3kRtqU17GysqhpzOeqU4Whp
acfs/DymrfN6u5IvKfymp6f1rX8xJbW1tfoRhMx3ri+iXgXT4ckplY8Glf9eNLS0Yn17CzOD/aiv
a0JLdT0q6poxpvIuHRqND/XrZdbUvtmnR1FUXKq3vbjuxKLNovs4KKuoxrx9Ue3fHHo66lCn9m3O
vqwfa9SUlqO6tk3NX1CBukediKOw2W3obm5V26tBV3snGiprUVXfhO7eIWxsOtFdX4/qhja01NZj
aGoOq7YZFBao49LRjabGFvT3dKJ7eAw9rWq9hlY4HasoKShCR1crEjNSsb6zj8mRQYyMWzA3M6PS
aUBDUyM6Vb6q1DGvV8d8aHTq6TGjfl6iASCeQgOgoAEwL1iOSkyA1LTn5uZ0oSMGQKbvGq3lVB3T
6A5Y+v2X5c3Z1+s9RdXcdw4a1WnUuq4GcypguU9XSJrSbfDRfMkjgBkV/KRxouRNpssIgJojD/ql
FvxcztQyxuMNYUctc9BOTyPtBnbdGjbIb/f903k9aNgoSGM/A8nPi5C8HEK6RHbfsAlGA8Qd55pu
W7Gj/g6unEmXyof39RmuY079/EQDQDyFBkBBA2BesJhJapFGgD1LMvJlmJIPQWIExIiYzaM+HNEA
EE+hAVDQAJgXLEclBQ1FnYQ+JKP2tiXHkwaAeAINgIIGwLxgcZfcWpeTYm5uXslGUR5rdnYea2vr
NAEnJBoA4ik0AAoaAPOCxZDcXpeTZHRsEusbm7oL4OXlFSwtr+rhfqXR3dLSiu7Wd12fUGreCyUn
mcO1/sG0VceaPvHku2NtQxVkTtc8lb50JSzBwn35o5LRBaX74MPTHHpdeV/fmOZQ25HfG84tfeK/
LM3DWsaa2k9ZR/o+kPYGT+epPEq6sg8yXY6PQ+3LijoWh5ZTcqj9WJX8yH4pQ6X3VeVRPuUYrup1
lNaccEr+dF43VZpyjNX+HcnvijqOKyvPfsv6zx/H5afz3eVwrOt9cR0DWeb0ZJm2YlpJApfZ+Ua9
nmgAiKfQAChoAMwLFkNiABZV0Fi0zaCyMAe5RQ0Hjc6AWcsExiw2/X3XsYiG+nb9/WUcavCn2N/Z
xMama9qCZQgVNUYa2yjNy0Jpheu1vxezjeHRZx3jCBsOO8rUeutbzxrUSe1zb28T+ekpKKvpOph6
PEa7W5GTW4Curl7ML7k62DGwLyzDNjuBWfsKxgd7seQEnMvzmF1wdX5kYJ0cg21VFdL7TtQ1tmN6
YhRNbb2wTKiTddqOJZsF0/NLmJvoQ21LnxwY1BYVILugBBPT8wepPMO9oaEgx3Hd6TqOi9Mj6ji6
Xoc0Y0bNr6ptwYubJ749xNTIUNA0ACcjGgDiKTQAChoA84LFkL4DsOyATQXnUL/HCIlJQ1VxIbzv
PcTNW3fx8MFjlNf3YqCpAg8eBKG0LAtZ+bkoKm3A5JRF1fimUZafg4jwOPSPWNBYVYzIsCgVUEuR
m5GJm5dvobCiDrnJ8fD18cN9vxjY5haxvbGIJ96+KK+oRXFpCfp6BpCllklKzUF0bAzSsguQmZqJ
1Ow0JMQnIyIiCOXNvVi2L2NzYxV9vf1oqMhHttrOvEqvpaEeA329CPL1QWBwBOLiU5GaHo/KpgZU
qDxHJaSgUAXbtMQEJKbkIDYuBnFpBXDu7aMyJxmRsamIjohCfHw8wtT283KykZ1Trvsd6OvpRnlZ
KeKjI5VBKkR4qD9Co2IQHhuL2tpyZBXloaCwGFML23DOD+La9dsoLixQx84fWblFyuTU6vf7S4uL
UJiTiuS8OlhGB1BU3qzMzBram+vR0NyJWatVmaJsxMYkIjMjF3HRsSoPJcjLlON4G/nltchLcR3H
B0+SsLO1gaSYYCSqY1WuDFGddHQUHo6e0TEMDo5h58gbEqeB3AmhATg50QAQT6EBUNAAmBcshgwD
MDc5gLiYZFjm55Dk7Y3/+uhT3H0UiMKiEhQWV+tOeGJV0EtLicSlK9fQ0GPBRG8b4qLicen8TeQX
lqG4qBjBj73wKCABJXk5uHnhEr767hIy03Nx+4ef8LdPv4ZfWBrWHBvYVQbA/5GPSrsM1y5dQFBg
PLx++BGffH0BMXEpCHzsg1u3/BEeHY5LP17E559/iaT8WjjXVRVcs4v02AiUFNbAOrcC59oSCjOS
EBmfi7HxQUSHhCElORKPVDppaUm4cfWm+p2LRypPf/nXj4iKScCTgAhMLzrQpAKn3FEIfPwYP339
DS5cuwW/Rw9w/XagumCm0d3ZjZTYIARFxsHn4UPEJUbih88/w5XrN+D/xA9xSfEID49FQ2s3Kkqy
EBkZDt+AUFRVlMLrrh+m56zoUmkkRz1BSr4K6Nl5qKmpRlp6IXq7R+B02BH0yBuxyoRcvngLFZVV
uPzdt+pYJaOsIBe3VJ6//OaiPo5eP55Tx/ErBMbmwTLQga//+S/4BAXj4uXruHftOr4/dxmDMysH
x+j0oQE4WdEAEE+hAVDQAJgXLIb0I4DFZczNzjzt03+0swtNbR3o7uqGbWlFnTyr+mRaXVlCX3cz
+kcn4dxRtcudddRX1aJ3YFyfXOubqgbsWILFaoNjdQUDHd3o6u7ESP8Q2hpb0NE7oAozC8aGJ/V2
etuaUVenasdjk5hRtdYW6UBH1VztC4uYs4wiKjwCbWqdxYUF9Pd2YXZxBeur63pdwTY1iPrGNiwt
rurHFgsqWM8vyi38Pf38fLC3BRPTMyq43sDtmCwsq/3sbGhCe98w7PYFWK2z2N7d03mV9aenpjBj
mUTf8DCsk5Po7OqXzSjD4sC8dQaztiXMW8ZUnmtgmZpQy43ANjeO9p4+LMxZUFZWit4R15gJ4yMj
esjkyYkJnbakMTczjZU1JwbaG1Df1o2Bzg7UNbgeV9hUupVltegfnMD6xjpGhgZhnV9U66njqMzD
0eNomZ6FY2kZw4M96B2dUPsyh5mxEXT1D7yTW/8G0qaBBuDkRANAPIUGQEEDYF6wGDIaAU5OzWBT
/ZYGaRLbBRlxT5aRtwQ2nE5dCEk/NvJ8WhqySaM4vdzerp4nDfM2t7Z15zVO9Vue0MtdaBmoRiep
fsj2pJHc2trG0w57pJAzOvbZ35NxAFwtyKVBn3TIsyWd4agEpGMdyYfkUbS1o7eg05OGgptbO3oZ
abxo5HVne0sFyxmsrqu8qWmufLi2Ie/ab6xv6LxKoznJgwz6s7+n8il5Vsuty3y1X9JpkbRsN/Ip
HfrIctvbsrzk0fV8Xt7dl3Vkvqwn6bmnoTszkkyoHZJOllzbkH1xpSvHUpaVebK9Fx5HY56asC/H
T/InO6x+yz4Zx+i0NTdvZyPAExQNAPEUGgAFDYB5wWJIBxkVVIeGR9E/MISBweEzo8GhEdPpr6sR
VUOWwY3M5lEnq77+If1Ggxg9s/ONej3RABBPoQFQ0ACYFyyGpKCWk2N80vK0Bi0nirym9jJJbU9e
uzs6fdWhauKqlus+T16bk1cI13TNdO3Z9BWHrh27T3smh67tG+lIGnJCH07Loec5jqzvnjepdW+o
GrZrOVct1Szfsj2jhm4+3yV5PU+/YndkutytkDsVsr68pid3GHR+VbpSeMsjAGNZx7pTGy/Zd7lj
IjX5re2tp5+yvNwV0MvqtLZ0OvK6opFHfbflSLpnQTPyKIKPAE5MNADEU2gAFDQA5gWLId0GQN4f
t1tRW1qAovIWvd6r2N40GuMdZmdtGa1tvQe/XOxuOGCZnIPdOos1p76J/ZR1hwqeB68JHmViYvrg
m7CNyalZ7G1vwDLlSmv9oEx067Zfs6mMg0FHUyPGrMv6+962vHf/ooJ0D9UlBSirfNVrifsYm5g5
+P4M2+QQCvMK0NY7jO31JVTWVeu2EUJXRwfsK8/y5FycRktDByZHhlGSU4HujnbU1najs60NtdXt
aFW/xyatetmlhRnU1DXr5/or9hlUlZWhpa0LnT09aG5pxer2kZ1/x/A1wJMVDQDxFBoABQ2AecFi
SLcBePoaoA8CI1P0a4Bx8WkoKalCYXYGUtLykJGZjqTMQrQ21SAuIQK37sorfKWIS05Afn4JIkPD
Ud00iP6GUnj7hKKiKg8FpcUoKW/G0twkKkpbMdRcD9/7AcgrqsVQVwvCAgJx6cJ5PIlIQnlxJhLS
s5GZkqbWbVTBOBkPn0QgLS0exTX1yEkORnhGNTaXragsb8dAYw18HwUjKzsfWZm5SEpQ+a6sQ0Zi
HO7cD0R3ZyviYxNw+9YDtb0KNT0et2/fR0p2CSrKclFQWaa2JX0GtOtGhNvOZQR4P0ZxaRUqqqsx
2D+Cwqx0ZOYUIzE5CTkFZcjPzkNmfiaSktKRmBCJqtZ+rKh1pRV/THg4gh75I0Ydhxi1rbrWbkwo
w2IZ60NUdDyGLMtwqGBeX1+PmclBpITGo7C6Ctk5WWhqb0NCWByGlCGICghFY0cfZmZdF+nK0jy6
ugawNG9BTWUJEiIiUFnfrh/XdDfXoLyhWS93VuBbACcrGgDiKTQAChoA84LFkGEA5DVAGe9+3DqD
JJ9H+M3v/oqgyDREP3iA3330L3j7hyM6Kg6Xv/0G5y6ex0PfEPh53cCPP/2IB48jEBvgDS+fOEyO
qyAWHonUlEhcuHhFBclx7DsXUFxYiJKCdNy+H4Liglz4XL+n8vkP3Hrgj+S4OFz76Tt8+9MlJKQV
IDLAF8ERYbh36xq++uJb3Lz7EKEh/kgpqsfO+gJKVFpFeam48ygC+emJ+OvfvkWWMiExQYG4qPJ3
/X4QcmPj8I+/fYqvzt9EqMrruS++wjcXbiPQ/wkCgwJw994dRMSmITOzAHaHE/ubK3ji7YPikgpc
v3QOAYHxuPPTT/jr5+cQEZWAgMc+uHnrCcJjInDxhwv416efIy6rCs6NTawvjMPP7yG87zxATEwa
krOzsCpV9q1VNLW0o7m+GmW1nehqLMPVq1dhURdgY14p8lVtPjkxCVVNjUiICUWdqtFHRYZCv8iA
fVXoPxuBsLW+FhNzC6ivLYB3aJK+I7C/OoPcoiLXAmcEGoCTFQ0A8RQaAAUNgHnBYsj1CGAZc9Zp
2BdW9ToDzS0oq2rAzPwi+pqaVY2zFVPTs7pgn54YQWdvN4ZHRjAy0If2rk7M2JdhGehHe/cgtjad
WFyYR0drDboGRrHudAWxydEuNHd1Yc6uTsilBXTWNaOmrhFdqqbe29uvatzd6Ogb1A3IFmxzaKor
V2n3oq+nE1Nz82ioKkL/uOvW+/hwJ1q6uzG/sIyFeSta23qwuKJO7okJtDY0oLO7S9WOO1BVVYeu
viEMdfejVn1vbWvFwOAI+roa0dzRo7c1r9Yf7Hcdq86melRXVaGzfwjjSnXl1Wjq6te9DM5MDCI0
KBj17V26w57OjhZY5pewtiyvTu6hV9XGE9PSMWZZwdRwD0Znl7Cz4cDqxpYyCDPIyy+AZcGhtyN9
GNhVMJ9V+W2oaMHwYC/aOvr1vrZ2DOqW/mtLdkyMz7oWV8vbbIvY29tBXU05uoZdrxrOTfSje2BE
fz8r8DXAkxUNAPEUGgAFDYB5wWJIG4DFJVcjQN2AbR078m7ZwbpGb3KuwV1cr8HJuPTyetvTV+HU
cvIKmrwe6P4KnvyWk1DS3NqW+fL6naux2+5BuvK6m7zetrO7r1+nkzxIwzjJgrwCaLwOJ0vLq29G
WrsHaUktWV6lM16zk/Vk3s5BwwDJg6Qv6Nf7VL7lp6Stt6XyYuRR1pXtSKG7rY6LfHe9lijHSo6N
U68njf1kWf3KoQp48kqj5FEuMBk3YG19TZuqp2MMHNTkpW2CNEKUbckrl6793Ds4pirPO+oY7e3q
ZaSRozR2dI0fsK6O2aaeJodtb2dbLSPbWMKqpKfHKjgbmlVmyWKZ0cfQddyoNxENAPEUGgAFDYB5
wWLIeA1QWm8vrbgG8pEOcqQWNyOf7tLT5nUnOqbzD5aZVTX2p2kc/J5VJ558n7cvYmlx8cXrn2HJ
SHdm0w3pzngOPo3vb1NyMZ/Gdl5Hus+FVceBYTQ/56jjiwaAeAoNgIIGwLxgcZd0IrO/u4m68mI9
OI+rvvwitjF+qHX+80ht/BD7O9jcdqVqnx5Fa+eg7txGaudSwFE/H8kdDLlTY3aeUa8vOaY0AMQT
aAAUNADmBYu7tnf2sOmYg8+9B7q1e219A0YGR1Can4PCkkqkZaSjsKwKJYXFyCnMQnJyOjKzU9E6
OAXb7IwqoCyoqyxFUlIGxqdtaG+oRnJSCsrK61BdXo5Hdx6hpLoRlUX5CPb3xz3fOMiLf3IL3Sw/
FEW5RANAPIUGQEEDYF6wuEsbgNU5PL7/ECVllbh87nv4P4nFre++w0f//Bb+gWF4ePcOrt/wRVB4
IH765gf87a9/Q0JBPTqbGpAYl4Qfv7uI+MR05GRn49Hti/B6GIb0xARc+v4H/OOzn5CZno3LX36F
jz7+DL6haTQAFHUM0QAQT6EBUNAAmBcsh7S9g+3NNVQWF6CwMB9V9c1or29Cblo2CivrMTw6gf6u
Znjff4DCqnr09/SioqwYw7NLcNimkZGcgfKqZlgsFljnF2AZG0Rn7zAskxOoKixBUUkxGtR6+Rm5
yC8pR1vXALZVwWaaF4qinooGgHgKDYCCBsC8YHlez945N0UPWnO497/9vR39JoCBtGSX5/oHDfwh
gwm9CPM8UBTlLhoA4ik0AAoaAPOC5fW1rQojDvBCUacpGgDiKTQAChoA84KFoqizLxoA4ik0AAoa
APOChaKosy8aAOIpNAAKGgDzgsVM0nmL9Awon6cts/wYkvnvKl9HZeTDLJ8UddKiASCeQgOgoAEw
L1iOSoKanDArKyvvRNItr1lglWkOh8N0nXcluZCO5pOi3oZoAIin0AAoaADMC5ajku6A7Xa77mNe
93W/t4N19V36oZe+9KUB4Ma69Dvv0MvoT/Vb1jOmuUumra9vPF3H+O10Sv/26vuG9Ku/q7chJ+bC
wsJzeZLatgTcxcVF0/Slb3w9foF8V/mU/vn12woH813TXctLv/pyQWyo/K6vH0nHbTkjLW2I3PbX
XXJRiSR/R/NMUScpGgDiKTQAChoA84LFXRLs5OQQCb1tzSgoasa2fsNvF+01lUjNKtSd9xzF4dBj
15qjAvzhFwH3sXqw/O7GAsrL67Cx41pCgryYCfd8SYAVYyD5M2N/dwt2NV9/33GivakedY1tpl0Z
b6pgLoP2OFaMEflezowqdNfdhuN1R153FLNkdseCok5SNADEU2gAFDQA5gWLu4zb7IYBWJybQqh/
KOwbe1iZGUZGdpk+kQqzchAXE46UgnL0ttbpngMDwhJQlJuIzIoWrMgQtpMWtNZXIT42EdnZBUhJ
SkZ6RiHKi0vgd+8+YlMLUF9WgJDgMFy54QPbmitcv8gAyHT5vr+/7+pn4EBCX20uAmJS9ff9nU0U
xEcjLrEQIyN96B+bxFBfH+IiYtA7tYTZ/i40NfWisaBImZtqtLf3oL2tHQ0NLa4811YgPikH05Oj
ykg04PaNe2gfdg3H675dkbsxcc8vRZ20aACIp9AAKGgAzAsWdx02AHuYGOtDSGgAhi1LWLdNIC0t
HwPd3YhSQfvmT9/hspc3gu9547/+9A/4B4Ti0tef4mFYBiZGhpEUl4Lrl64hPbcEj29dxYUb/igp
Kcbdy1fx2T+/RExCJoJu3cZHf/8MV7wCYffAAOghcbdW4H3jW1x/EvX0LsN4ZxeaK2tx68d/4cL1
O7h9+SL+/smPGJhfh22oEw1NnciPi8D1237K4Pjj6++uIiomCf4PHuDbT/+Fe77RyFUG5y9/+wzf
/HgLnSM0ANS7FQ0A8RQaAAUNgHnB4i7DAIjkNv1QXwfqVbC0zS6qX3sY6WpHgQro45Z5WEb70NE/
hN7mVlRU16Knpw89na3on5jVo8DVllWgpq4dC+qEG+7vRd/guB63vrelHfX1teju7EZTVS2q65vR
0zcMp+s5w0sNgOTvsAFQ2tvGSE8L8krKMDvjOqGtIyNqmyMozUlBcXUDClKTER4Zg+FJO7bXl1Be
koWMwiL0Dk2gvbEasYl5mJyZQU1REeIiw5GTV4C8+DQEBEcgJjELk3PLOl334C+SQpkGgDoN0QAQ
T6EBUNAAmBcs7pJAJo3bJNju6ZZ0Bvu6ADouEhxfF2kIKNuQZ+rSoM89X0ZNe319/WngfaZn25Ll
ZNrh9gbP2Nvd0Q0EX9IzsSliNA5v0yUxKmwDQJ2G5HyjASCeQAOgoAEwL1iOSoKZBNvp6WnMqFrx
aUta+x8NqPJbgu3s7KzpOiKr1aqlfx98GtPcdXTZp/NesLxIp2kimScXFw0A9bZFA0A8hQZAQQNg
XrCYSQLau5LU4l+Wp5fNe1cyyxNFnaRoAIin0AAoaADMC5YXSU6asya5C3A04MpvmW62/LuWez4p
6k1EA0A8RcoiGgAagGNLHgFIO4Dlg97u5OTRJ5D+vfL098skJ5rZ9GNJrSuPAo6mIc/bpYGiYQLk
U/In041lVtTvZWOdg/Xd01lePpjnJmP+q/Is81fV9ldWXBfS02lqmytH1jWO4dFjS1GeiAaAeAoN
gIIGwLxgcZcEVAmwcpIIu9tOLC4swWhmt7flhF2dSK9kf/+1G9odRfJyFHk8cLTRnfx2b3S4rgzK
9o7rt7wx4JL+qXlRtoxlX84eFuw2bGwdbhC5ZJ+HY/35jpDEAEijSvf8UpQnogEgnkIDoKABMC9Y
3GUYgNVVVy952RFBCI7J1j3q7awvITclBUmpubDMLmBt3YFNFZC3NzcwPz2Blo4+FaA31bQ97G2u
oLy8FgsqAA71daOrfwx7KrjubG9ifs6GXRVnnc41bG7v6uC8veHA1NQ07OqEVJPQXV2mTsoElFQ2
YV2Zji1JUwV5420A94Aqv2WehO7Z8R4EPQnA6KzrxB5sbsHAwBhayuswvWDDyEA32joHsKRq8Lu7
cvdABe39HVQUF2FodAKN9c3K4CxiW6W3vGTDmnNTfao8qcR3nQ4UZqfAzzcQmek5CA2NRVNHDwoy
M5CenIza5jaVdiecu67XEwW52GgAqJMQDQDxFBoABQ2AecHirqMGoL6sDBFx8Zhf28HiZC/yytv0
9ISQYFw+9x1u+4WiKD0Jn37yOR6p7z5eF/AgLF0F5G0Eez+Cv38Ibly8DC+fcAyPjiLiiT8CgiIR
GfAEl65eRFhEDEICAhAaEom7Xg/x+JE/6loHUJ2Xjrv3HsP7vrfeTmBiob4LsfsSAyC01GTjjv9j
DE+4Ou7pKC9H/9AU0gMC4R0QieDwIAQGBiE6JQ4VJfm4efkGouNiVN6foGdULRcbgajYcETGxyI1
LQ5Boep3TBAqO0ewaB1BXFwsHvs8QVltLaJV3kODg3HDK1BdSLPIzS1GcXEORudcvSgKNADUSYkG
gHgKDYCCBsC8YHHXUwPgcPUE2N3ZhJiIRPSPzGFnYxHZyWlIT0hDVlYRksKeICgqHtE+QfjhwjXE
xCbC/74X4rIrVW1/BxEBQaht7UFafKSuzceEx+De/UD0DA4jyvcR7qtAWlSajyAfP4QnJcDvSQQa
pBbd1o2JsSGkJqfA96Ev7t+6ifSSRn0H4VUGwGYZRtDDe8gvqVWBdxOzE/3IzctAWFgIfB4HIyI6
BhFhYUhIS0RcYBSuXbyJx8oQhISGYtQyi/zUeBXwIxAZE4vIsEDcvvcQUdGhqGobgcM+gWi1fl3r
kNrSJhobW5GVHIugkGgUZCYjIDAGufk5mF5cV/NdjxJoAKiTEg0A8RQaAAUNgHnB4i7DAEgDPGF9
dQmLS2vY3XI9j99Zd8AybdW18b2dTaysO7G5voYltbx03rOxsQaH01VASVq7e67b/htqGdu8Desb
WypYHwTHlWW4HtW7bt/vbO+o5eVWv+tZvKwvjwc21lexvuUafkgKQbM2AO7P7lcWF1Ve5HVClylY
Xl6Ebc6CxuZ2V2+D+8o0LC1jf28XC4vL2N5yYn5+Xi8rrCwtqP3dVMYnGKXdI1hR6+sn/mq9oeGh
g4GRVK6fdpS0j/lZK5bUcqOjowfTXMhFRwNAnYRoAIin0AAoaADMC5ajkkAuAXFubg42FVylhm2z
2TCvf7tattts8/r7woJdj8In0yQQy7LSSE7Wld+ynqRhLCPL21TaMt2VjpqvTkL5fLq8Slu2b/xe
WJC0XWlKR0By8hoBVT7FrMh0mT+n1pN2B7K8ax/Ub8mTSkOWk+myPb1PKn0j3/Ipyxvbk8/l5RWs
LktrfvVb0lIGZnHp4LtK15VXl4x9c6Wj8iF5OTgGR48vRXkiGgDiKTQAChoA84LlqCSoGmPrnyXJ
SStdAR+tTctvqWXLfLP13qXc80lRbyIaAOIpNAAKGgDzguVFksB6FvW+55WiPBENAPEUGgAFDYB5
wUJR1NkXDQDxFBoABQ2AecFCUdTZFw0A8RQaAAUNgHnBQlHU2RcNAPEUGgAFDYB5wUJR1NkXDQDx
FBoABQ2AecFCUdTZFw0A8RQaAAUNgHnBQlHU2RcNAPEUGgAFDYB5wUJR1NkXDQDxFBoABQ2AecFC
UdTZFw0A8RQaAAUNgHnBQlHU2RcNAPEUGgAFDYB5wUJR1NkXDQDxFMMASOA3RANAA0BR1HsiGgDi
KWIAZAA0GZxMJHcBaABoACiKek9EA0A8RcYlkTgQFxeH+Ph4WCwWyKioNAAmif9cRANAUT8f0QAQ
T3E6nXo49NLSUpSXl2N9bQ2zvANAA0BR1PshwwDs7Ozq65mQ4yLDu68qA+BwuIZMX19fw9z8PA2A
WeI/F9EAUNTPR3t7exifmFQFtx3LK6sUdWzZ7AuwWmcxOzevNac0OjahziWbjg00AD9DHTUAR8eq
pyjq/dHOzg5WVx268dbcnI2ijq15Feiltj+vzKMhmS6PBvb392kAfo4yDMDs7Kw2AIQQQshREhIS
8Ktf/co0jpxF0QAcQx999JE2AMHBwYiNjUV0dDRFURRFaUnNPzExEVeuXMHvf/970zhyFkUD8Br6
zW9+o2/v/PrXv6YoiqKop5LYILFQKotm8eMsigaAoiiKoj5A0QBQFEVR1AcoGgCKoiiK+gBFA0BR
FEVRH6BoACiKoijqAxQNAEVRFEV9gKIBoCiKoqgPUDQAFEVRFPUB6kQMwO9+9zudEEVRFEVR74f+
8Ic/4KOP/uS5Afj66691Qp988gk+/vhjiqIoiqLeA/3973/HX/7yZ3T3D72+AWgfnsX58+cRExOD
9PR0pKamUhRFURT1HigzMxNP/P3Q2TOAsYXXNABtQ1ZcuXJVJ5KXl4fc3FyKoiiKot4DFRQUIDYm
Gl29g54ZgMuXryAtLQ05OTnIzs6mKIqiKOo9kFTcoyIj3twASGJZWVkURVEURb0HkrsAnhuAQSvO
nTuHpKRE5OQoR5GVSVEURVHUe6A8ZQBCgwPR1dP/egZgbgPoGV9Eh1pxdMKCyelZTFisFEVRFEW9
B5K4PTg8BsvcEgZnncczAMFhUfoOgKwwvriHEdsOhm3bFEVRFEW9L5rfxqh9F0Nzm/r78Mzqqw3A
o8f+2fNrO9otUBRFURT1fkuC/+Ck7dUGgBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCFnm//23/7/
4WCVm8yDZMoAAAAASUVORK5CYII=</Preview>
  <Form>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
hIcQnDPcbmG1Gn5JXsH/df78/93UzYGO2AIA</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	[string]$downloadpath
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		else
		{
			if (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
			{
				[void][System.Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
			}
		
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	$config_tabcontrol2.Dock = 'Fill'
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Enabled = $true
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_intunewin_tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {

	$wgid = $winget_WingetID_textbox1.text

	
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	[string]$c_downloadfolder = $config_download_folder_textbox3.Text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
			downloadpath    = $c_downloadfolder;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
			{
				Unblock-File -Path $exe_org_path -Confirm:$false 
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_intunewin_tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
	$exe_parsUnInstall_textbox1.Enabled = $true
	$exe_parsUnInstall_textbox1.Visible = $true
	$exe_labelVoorbeeldUninstall.Visible = $true
	$exe_labelVoorbeeldUninstall.Enabled = $true
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true


	
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
	$exe_parsUnInstall_textbox1.Enabled = $true
	$exe_parsUnInstall_textbox1.Visible = $true
	$exe_labelVoorbeeldUninstall.Visible = $true
	$exe_labelVoorbeeldUninstall.Enabled = $true
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true

}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	$exe_UnlInstallParameters.Visible = $true
	$exe_UnlInstallParameters.Enabled = $true
	$exe_radiobuttonUninstallEXEPath.Visible = $true
	$exe_radiobuttonUninstallEXEPath.Enabled = $true
	$exe_install_test_button1.Enabled = $true
	$exe_install_test_button1.Visible = $true
	$exe_radiobuttonGebruikZelfdeEXEAlsB.Enabled = $true
	$exe_radiobuttonGebruikZelfdeEXEAlsB.Visible = $true

	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	
	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Unblock-File -Path $msi_org_path -Confirm:$false
				$MSINewname = $msi_openfiledialog1.FileName
				
				$MSINewname = $MSINewname.Split("\")[$MSINewname.Split("\").Count - 1]
				$MSINewname = $MSINewname.Replace(" ", "")
				$MSIbestand = "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname"
				#Write-Host $MSIbestand
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			 #$msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v $logfileMSI /i $MSIbestand"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### This function handles the detection method in the registry.
	### It will create a key in the registry with the name of the application. 
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
#Start; Write Log file
Start-Transcript -Path $logfile
Set-Location $PSScriptRoot
try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Can't read MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Script started i.cmd" -ForegroundColor Green
		write-host "Possible uninstall command is:" -ForegroundColor Green
		write-host ""
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
		write-host ""
		Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
		write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green

	}
	
	if ($msiuninstallcode -eq $null) { $excode = 1 ; write-error "Can't find uninstall code in MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
    Else
    {
        write-host "Script started i.cmd" -ForegroundColor Green
        write-host "Possible uninstall command is:" -ForegroundColor Green
        write-host ""
        write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
        write-host ""
        Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
        write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
        $excode = 0
    }
   
	
	
}
catch
{
    Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "MSIEXEC Log start:.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
    $MSILOGS = get-content $logfileMSI 
    $MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue


    $excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}

write-host "Possible uninstall command is:" -ForegroundColor Green
write-host ""
write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
write-host ""

### Place extra actions here:







<#----Enf of extra actions--#>
#Stop; Write Log file
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1.Text + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$config_tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already available in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be available in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	}
	catch
	{
		#Error handling here
	}
	
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			$config_download_folder_textbox3.Text = $cis.downloadpath
			
			if ($cis.downloadpath -like 'Enter UNC or local path for the download Package folder. (Evergreen / Winget)')
			{
				#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
				[void][System.Windows.Forms.MessageBox]::Show('Download folder was added to config. Please use this tool or edit "C:\Program Files\IntunePrepTool\config_customerinfo.csv" ', 'Please add Download folder') # Casting the method to [void] suppresses the output. 
			}
			
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
			try
			{
				New-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
	$config_download_folder_textbox3.Text = "Enter UNC or local path for the download Package folder. (Evergreen / Winget)"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkPackageName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkPackageName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkPackageName.intunewin"
			DisplayName   = $weblinkPackageName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create extra folder in startmenu (when needed)"
  if (!(Test-Path -Path $location))
{
	
	New-Item -ItemType Directory -Path $location
}

	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!packagename!!", $weblinkPackageName)
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!packagename", $weblinkPackageName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_packagename.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force }

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget not installed" $excode = 1 }
else { $excode = 0 }

try
{
	
	$install = "!!WingetCommand!!"
if ($install -like "!!doe*")
{
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		<#
		try
		{
			#install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
			
		}
		catch
		{
			
		}
		#>
	}
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale

		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
		}
		catch
		{
			
			
		}
		#>
	}
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
	{

		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
			
		}
		catch
		{
			
		}
		#>
	}
	
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
		}
		catch
		{
			
		}
		#>
	}
}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	#$excode = 0;
	
}
catch
{
	#$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error';  }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_Empty_Scheduled_Task_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}

$winget_remediations_createscripts_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile| Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Upload not yet available for Remediations.. For now use the Intune Admin Portal")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Please reopen IntunePrepTool to create more Remediations scripts")
				
				
			}
		}
		
		
	}
	
	
	
	
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
	
	
	
}

$configToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $true
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_winget_tabcontrol2.Enabled = $true
	$package_winget_tabcontrol2.Visible = $true
	$package_winget_tabcontrol2.Dock = 'Fill'
}
$scheduledTaskToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	$package_ScheduledTask_tabcontrol2.Dock = 'Fill'
	$package_ScheduledTask_tabcontrol2.Enabled = $true
	$package_ScheduledTask_tabcontrol2.Visible = $true
}


$mSIToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $true
	$package_msi_tabcontrol2.Visible = $true
	$package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $true
	$package_exe_tabcontrol2.Visible = $true
	$package_exe_tabcontrol2.Dock = 'Fill'
}

$main_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$wingetUpdateToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false

	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Dock = 'Fill'
	$Remediations_winget_tabcontrol2.Enabled = $true
	$Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Dock = 'Fill'
	$package_weblink_tabcontrol2.Visible = $true
	$package_weblink_tabcontrol2.Enabled = $true
}



$intunewinToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	
	
	$upload_intunewin_tabcontrol2.Dock = 'Fill'
	$upload_intunewin_tabcontrol2.Enabled = $true
	$upload_intunewin_tabcontrol2.Visible = $true
	
}

$wingetSearchShowVersionToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Enabled = $true
	$tools_winget_searchtabcontrol1.Visible = $true
	
}

$findUninstallStringsToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'Fill'
	$tools_uninstallstring_tabcontrol1.Enabled = $true
	$tools_uninstallstring_tabcontrol1.Visible = $true
	
}

$sourceFromWingetToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $true
	$download_tabcontrol1.Visible = $true
	$download_tabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	
}


$Weblink_intunewin_tabpage6_Click={
	#TODO: Place custom script here
	
}

$weblink_packagename_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	
}

$remediations_winget_maxversion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_remediations_maxversion_checkbox_CheckedChanged={
	#TODO: Place custom script here
	
}

$remediate_winget_version_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_wingetid_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$remadiations_winget_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$remediations_winget_upload_button1_Click={
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				
				
			
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				
			
				
				$encoding = [System.Text.Encoding]::UTF8
				$bytes = $encoding.GetBytes($remediate_detectFile)
				$Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
				$Bytes2 = $encoding.GetBytes($remediate_remediateFile)
				$Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
				$UploadRemediationsFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/5/2023 3:38 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	upload.ps1
	===========================================================================
	.DESCRIPTION
		Part of IntunePrepTool
		https://github.com/rink-turksma/IntunePrepTool
		Upload Remediations to Intune
#>
	Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
	if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
	else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
	$displayName = "!!displayName!!"
	$publisher = "!!publisher!!"
	$detectionScriptContent = '!!detectionScriptContent!!'
	$remediationScriptContent = '!!remediationScriptContent!!'
	$tenantID = "!!tenantid!!"
	$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"; $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	$MsalToken = Get-MsalToken -TenantId $tenantID -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
	$uri = "https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts"
	$createdPolicy = Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{ Authorization = $MsalToken.CreateAuthorizationHeader() } -ContentType 'application/json'
	Write-Host "Remediationa policy created successfully with ID: $($createdPolicy.id)" -ForegroundColor Green
	Write-Host "Please assign and schedule with MS Intune Admin console" -ForegroundColor Green
	
'@
				$displayName = $winget_remediations_name_textbox1.Text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!publisher!!", $config_customername)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!displayName!!", $displayName)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!detectionScriptContent!!", $Encoded_remediate_detectFile)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!remediationScriptContent!!", $Encoded_remediate_remediateFile )
				$tenatURL = $upload_tenantURL_textbox.text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!tenantid!!", $tenatURL)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"
				}
				$UploadRemediationsFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1" -Force
				$remadiations_winget_textbox2.AppendText("Created Upload.ps1")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule")
				
				if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					
					
					
					powershell_ise -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
				}
			}
		}
	}
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
}

$remediations_winget_open_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
	$remediate_winget_version = $remediate_winget_version_textbox1.Text
	Invoke-Item "$config_packagefolder\$winget_remediations_name\$remediate_winget_version"
}

$powershell_scheduledtask_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	if ($powershell_scheduledtask_radiobutton.Checked -eq $true)
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $true
		$package_scheduled_task_WingetID_textbox.Visible = $true
		$package_scheduled_task_WingetID_label3.Enabled = $true
		$package_scheduled_task_WingetID_label3.Visible = $true
		$package_ScheduledTask_create_scripts_button1.Enabled = $true
		$package_ScheduledTask_create_scripts_button1.Visible = $true
		
		
	}
	else
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $false
		$package_scheduled_task_WingetID_textbox.Visible = $false
		$package_scheduled_task_WingetID_label3.Enabled = $false
		$package_scheduled_task_WingetID_label3.Visible = $false
	
	}
}

$powershell_Empty_Scheduled_Task_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	$package_ScheduledTask_create_scripts_button1.Enabled = $true
	$package_ScheduledTask_create_scripts_button1.Visible = $true
}



$package_scheduledtasK_option_weekly_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
	{
		$package_scheduledtask_combobox1.Enabled = $true
		$package_scheduledtask_combobox1.Visible = $true
		$package_scheduledtask_time_combobox1.Enabled = $true
		$package_scheduledtask_time_combobox1.Visible = $true
		$package_scheduledtask_am_radiobutton1.Enabled = $true
		$package_scheduledtask_am_radiobutton1.Visible = $true
		$package_scheduledtask_pm_radiobutton.Enabled = $true
		$package_scheduledtask_pm_radiobutton.Visible = $true
		
	}
	else
	{
		$package_scheduledtask_combobox1.Enabled = $false
		$package_scheduledtask_combobox1.Visible = $false
		$package_scheduledtask_time_combobox1.Enabled = $false
		$package_scheduledtask_time_combobox1.Visible = $false
		$package_scheduledtask_am_radiobutton1.Enabled = $false
		$package_scheduledtask_am_radiobutton1.Visible = $false
		$package_scheduledtask_pm_radiobutton.Enabled = $false
		$package_scheduledtask_pm_radiobutton.Visible = $false
	
	}
}

$package_scheduledtask_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$datetimepicker1_ValueChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_time_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_am_radiobutton1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_pm_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_winget_max_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_label3_Click={
	#TODO: Place custom script here
	
}

$package_scheduled_Task_maxVersion_label4_Click={
	#TODO: Place custom script here
	
}

$powershell_create_package_dir_button1_Click={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	else
	{
		if ($powershell_package_name_textbox1.Text -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package name textbox', 'Select Package Name')
		}
		else
		{
			if ($powershell_package_version_textbox1.Text -like $null)
			{
				[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package version textbox', 'Select Package Version')
			}
			else
			{
				$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
				$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
				$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
				$package_scheduledTask_name = $powershell_package_name_textbox1.Text
				$package_scheduledTask_version = $powershell_package_version_textbox1.text
			
			
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"
				}
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"
				}
				$package_ScheduledTask_output_textbox1.Text = "`nNew package direcotory created: `r`n"
				$package_ScheduledTask_output_textbox1.AppendText("$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$powershell_open_package_directory_button1.Enabled = $true
				$powershell_open_package_directory_button1.Visible = $true
				$powershell_Empty_Scheduled_Task_radiobutton.Enabled = $true
				$powershell_Empty_Scheduled_Task_radiobutton.Visible = $true
				$powershell_scheduledtask_radiobutton.Enabled = $true
				$powershell_scheduledtask_radiobutton.Visible = $true
				
				
				
			}
		}
	}
}

$powershell_package_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_open_package_directory_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version.text
	
	Invoke-Item "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\"
}

$package_ScheduledTask_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_ScheduledTask_create_scripts_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script;
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script; $RegisterDetectionroot = "Intune_" + $config_customername
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version.text
	
	if (($powershell_scheduledtask_radiobutton.Checked -eq $true) -and ($package_scheduled_task_WingetID_textbox.text -like $null))
	{
		[void][System.Windows.Forms.MessageBox]::Show('You need to fill the WingetID textbox', 'Please select WingetID')
		
	}
	else {
		if ($powershell_Empty_Scheduled_Task_radiobutton.Checked -eq $true)
		{
				
				
				$ScheduledTaskFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/12/2023 6:20 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	"!!ps1name!!"
	===========================================================================
	.DESCRIPTION
		A description of the file.
#>

#App Params
$package_scheduledTask_name  = "!!package_scheduledTask_name!!"
$package_scheduledTask_version = "!!package_scheduledTask_version!!"
#Customer vars
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$package_scheduledTask_name_$package_scheduledTask_version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$package_scheduledTask_name"
$excode = $null;
#create log directory in programdata when needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Create registry key when needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application key in registry when needed
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  This is saved in $logdir. Also used in EventViewer
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	######### PLEASE Place action here!!!
	######### Please try to end your action with -ErrorAction Stop
	######### Begin here
	
	
	
	
	
	
	
	
	
	
	###### End here

	
	#-ErrorAction Stop
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}


### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs")
{
	if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) { remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false }
	copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}






		
'@
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!ps1name!!", "scheduledTask_$package_scheduledTask_name.ps1")
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_name!!", $package_scheduledTask_name)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_version!!", $package_scheduledTask_version)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!logdir!!", $config_logfoldertarget)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
				
				
				
				$ScheduledTaskFile | Out-File  "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\scheduledTask_$package_scheduledTask_name.ps1" -Force -Confirm:$false -ErrorAction SilentlyContinue
				$package_ScheduledTask_output_textbox1.AppendText("Template script to be scheduled created")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Please search in script for: 'Begin here'")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Place Powershell command's to be run there.")
				
			}
			else
			{
				##### Here Script to create script to create Winget Update task
			}
		}
		$package_scheduledTask_Edit_script_button1.Enabled = $true
		$package_scheduledTask_Edit_script_button1.Visible = $true
		$package_scheduledtasK_option_startup_checkbox1.Enabled = $true
		$package_scheduledtasK_option_startup_checkbox1.Visible = $true
		$package_scheduledtasK_option_weekly_checkbox1.Enabled = $true
		$package_scheduledtasK_option_weekly_checkbox1.Visible = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Enabled = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Visible = $true
	}
	


$package_scheduledTask_Edit_script_button1_Click={
	#TODO: Place custom script here
	
}

$package_scheduledtasK_option_startup_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_createIntunewin_scripts_button1_Click={
	#TODO: Place custom script here
	
}

$windowsFirewallToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$config_InstallRequriedPSmodules_Click={
	#TODO: Place custom script here
	$config_install_required_ps_modules = @'
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

Write-Host "Script will install Evergreen powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Evergreen) { Import-Module -Name Evergreen -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Evergreen -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Evergreen -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -PathType Leaf))
		{
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		else
		{
			Remove-Item -Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -Confirm:$false -Force
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
	}
}

$downloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$wingetToolStripMenuItem1_Click={
	#TODO: Place custom script here
	
}

$config_download_folder_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$config_downloadFolderBrowse_Click={
	#TODO: Place custom script here
	if ($config_download_folderbrowsermoderndialog2.ShowDialog() -eq 'OK')
	{
		$config_download_folder_textbox3.Text = $config_download_folderbrowsermoderndialog2.SelectedPath
	}
}

$download_winget_tab_Click={
	#TODO: Place custom script here
	
}

$download_winget_search_button1_Click={
	
	$downloadWingetSearchText = $download_winget_search_textbox5.Text
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$download_winget_output_textbox3.Text = $null
	
	$download_winget_listbox1.Items.Clear()
	$download_winget_version_listbox1.Items.Clear()
	
	
	$table_download_winget = New-Object System.Data.DataTable;
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "ID";
	$table_download_winget.Columns.Add($column_download_winget);
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "Name";
	$table_download_winget.Columns.Add($column_download_winget);
	
	

	foreach ($wsearch_l in $downloadwingetsearch)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row_download_winget = $table_download_winget.NewRow();
			$download_winget_extraStrip = $wsearch_l.substring(0, $wsearch_IdStart)
			$download_winget_extraStrip = $download_winget_extraStrip.TrimEnd()
			$row_download_winget["Name"] = $download_winget_extraStrip
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row_download_winget["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			if ($row_download_winget["ID"] -notlike $null)
			{
				$table_download_winget.Rows.Add($row_download_winget);
				$download_winget_listboxInput = $row_download_winget| Select Name,ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
				$download_winget_listbox1.Items.Add($download_winget_listboxInput)
			}
			## - Save changes to the table:
			$table_download_winget.AcceptChanges();
			
			#$download_datagridview1.DataSource = $table_download_winget
			
			#$download_winget_listboxInput = $table_download_winget | Select Name, ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
			#$download_winget_listbox1.DataSource = $download_winget_listboxInput
			
			
			
		}
		
	}
	
	
	
}

$download_winget_search_textbox5_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 

}

$download_winget_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_version_listbox1.Items.Clear()
	
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	
	
	foreach ($wsearch_55 in $downloadwingetsearchversionselected)
	{
		
		
		if (($wsearch_55 -notlike "Found*") -and ($wsearch_55 -notlike "*-*") -and ($wsearch_55 -notlike "*Version*") -and ($wsearch_55 -notlike $null) -and ($wsearch_55 -notlike "* *"))
		{
			
			$download_winget_version_listbox1.Items.Add($wsearch_55)
			
			
		}
		
	}
	
	
	
	
}

$download_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	#Write-Host $download_datagridview1.SelectedRows.Item.ToString()
}

$download_winget_version_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_download_and_add_button1.Visible = $true
	$download_winget_download_and_add_button1.Enabled = $true
}

$download_winget_download_and_add_button1_Click={
	#TODO: Place custom script here
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	$download_winget_explorer_button1.Enabled = $true
	$download_winget_explorer_button1.Visible = $true
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	if (!(Test-Path -Path $download_winget_path))
	{
		
		New-Item -ItemType Directory -Path $download_winget_path
	}
	#$downloadWingetToLib = winget download --download-directory $download_winget_path --id $winget_download_selected_id --accept-package-agreements --accept-source-agreements
	
	#$download_winget_output_textbox3.Text = $downloadWingetToLib
	#$config_downloadpath
	#Write-Host $download_winget_version_listbox1.SelectedItem
	$download_winget_selectedversion = $download_winget_version_listbox1.SelectedItem
	$download_winget_package = @'
winget download --download-directory !!@download_winget_path@!! --id !!@winget_download_selected_id@!! --accept-package-agreements --accept-source-agreements --version !!@download_winget_selectedversion@!!
'@
	$download_winget_package = $download_winget_package.Replace("!!@winget_download_selected_id@!!", $winget_download_selected_id)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_selectedversion@!!", $download_winget_selectedversion)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_path@!!", $download_winget_path)
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -PathType Leaf))
		{
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		else
		{
			Remove-Item -Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -Confirm:$false -Force
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		
		powershell_ise 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1'
	}
	
}


$download_winget_explorer_button1_Click={
	#TODO: Place custom script here
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	explorer $download_winget_path
}

$config_help_button1_Click={
	#TODO: Place custom script here
	
}

$config_exit_help_button1_Click={
	#TODO: Place custom script here
	
}

$exe_maak_uninstall_script_button1_Click={
	#TODO: Place custom script here
	$exe_maak_intuneWIN_button1.Enabled = $true
	$exe_maak_intuneWIN_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	
	$exe_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:04
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">548</Line>
    <Line Disabled="True">1256</Line>
    <Line Disabled="True">1258</Line>
    <Line Disabled="False">1716</Line>
    <Line Disabled="False">3133</Line>
    <Line Disabled="False">4712</Line>
    <Line Disabled="True">5464</Line>
    <Line Disabled="True">5466</Line>
    <Line Disabled="True">5572</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>