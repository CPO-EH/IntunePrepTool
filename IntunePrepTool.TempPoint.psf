<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAH6gSURBVHhe7b1nd9xInvX5fJY9+yn2zZ6z+2L3
1Y7peWbmme6eqe7q6erqruryVVLJe0sZeu+99957iqL33mcmk9573o1/JEGlqFSKSklMUro/nSuA
MIEAEsD/RiAQ+B+EEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCPkI+fv/8//8v/EBwZHxfoFh8b4BIRRFURRF
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
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEELI6eZ//I//Hx8hiRiQa7H6AAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	[string]$downloadpath
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		else
		{
			if (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
			{
				[void][System.Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
			}
		
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	$config_tabcontrol2.Dock = 'Fill'
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Enabled = $true
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_intunewin_tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {

	$wgid = $winget_WingetID_textbox1.text

	
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	[string]$c_downloadfolder = $config_download_folder_textbox3.Text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
			downloadpath    = $c_downloadfolder;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
			{
				Unblock-File -Path $exe_org_path -Confirm:$false 
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_intunewin_tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	
	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	
	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:04
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Unblock-File -Path $msi_org_path -Confirm:$false
				$MSINewname = $msi_openfiledialog1.FileName
				
				$MSINewname = $MSINewname.Split("\")[$MSINewname.Split("\").Count - 1]
				$MSINewname = $MSINewname.Replace(" ", "")
				$MSIbestand = "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname"
				Write-Host $MSIbestand
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			 #$msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v $logfileMSI /i $MSIbestand"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### This function handles the detection method in the registry.
	### It will create a key in the registry with the name of the application. 
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
#Start; Write Log file
Start-Transcript -Path $logfile
Set-Location $PSScriptRoot
try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Can't read MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Script started i.cmd" -ForegroundColor Green
		write-host "Possible uninstall command is:" -ForegroundColor Green
		write-host ""
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
		write-host ""
		Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
		write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green

	}
	
	
	$excode = 0
	
}
catch
{
    Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "MSIEXEC Log start:.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
    $MSILOGS = get-content $logfileMSI 
    $MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue


    $excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}

write-host "Possible uninstall command is:" -ForegroundColor Green
write-host ""
write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
write-host ""

### Place extra actions here:







<#----Enf of extra actions--#>
#Stop; Write Log file
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1.Text + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$config_tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already available in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be available in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	}
	catch
	{
		#Error handling here
	}
	
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			$config_download_folder_textbox3.Text = $cis.downloadpath
			
			if ($cis.downloadpath -like 'Enter UNC or local path for the download Package folder. (Evergreen / Winget)')
			{
				#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
				[void][System.Windows.Forms.MessageBox]::Show('Download folder was added to config. Please use this tool or edit "C:\Program Files\IntunePrepTool\config_customerinfo.csv" ', 'Please add Download folder') # Casting the method to [void] suppresses the output. 
			}
			
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
			try
			{
				New-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
	$config_download_folder_textbox3.Text = "Enter UNC or local path for the download Package folder. (Evergreen / Winget)"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkPackageName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkPackageName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkPackageName.intunewin"
			DisplayName   = $weblinkPackageName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create extra folder in startmenu (when needed)"
  if (!(Test-Path -Path $location))
{
	
	New-Item -ItemType Directory -Path $location
}

	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!packagename!!", $weblinkPackageName)
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!packagename", $weblinkPackageName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_packagename.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force }

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget not installed" }

try
{
	
	$install = "!!WingetCommand!!"
if ($install -like "!!doe*")
{
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
			
		}
		catch
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
	}
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
		}
		catch
		{
			
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
	}
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
			
		}
		catch
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
	}
	
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
		}
		catch
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_Empty_Scheduled_Task_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}

$winget_remediations_createscripts_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile| Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Upload not yet available for Remediations.. For now use the Intune Admin Portal")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Please reopen IntunePrepTool to create more Remediations scripts")
				
				
			}
		}
		
		
	}
	
	
	
	
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
	
	
	
}

$configToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $true
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_winget_tabcontrol2.Enabled = $true
	$package_winget_tabcontrol2.Visible = $true
	$package_winget_tabcontrol2.Dock = 'Fill'
}
$scheduledTaskToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	$package_ScheduledTask_tabcontrol2.Dock = 'Fill'
	$package_ScheduledTask_tabcontrol2.Enabled = $true
	$package_ScheduledTask_tabcontrol2.Visible = $true
}


$mSIToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $true
	$package_msi_tabcontrol2.Visible = $true
	$package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $true
	$package_exe_tabcontrol2.Visible = $true
	$package_exe_tabcontrol2.Dock = 'Fill'
}

$main_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$wingetUpdateToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false

	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Dock = 'Fill'
	$Remediations_winget_tabcontrol2.Enabled = $true
	$Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Dock = 'Fill'
	$package_weblink_tabcontrol2.Visible = $true
	$package_weblink_tabcontrol2.Enabled = $true
}



$intunewinToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	
	
	$upload_intunewin_tabcontrol2.Dock = 'Fill'
	$upload_intunewin_tabcontrol2.Enabled = $true
	$upload_intunewin_tabcontrol2.Visible = $true
	
}

$wingetSearchShowVersionToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Enabled = $true
	$tools_winget_searchtabcontrol1.Visible = $true
	
}

$findUninstallStringsToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'Fill'
	$tools_uninstallstring_tabcontrol1.Enabled = $true
	$tools_uninstallstring_tabcontrol1.Visible = $true
	
}

$sourceFromWingetToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $true
	$download_tabcontrol1.Visible = $true
	$download_tabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	
}


$Weblink_intunewin_tabpage6_Click={
	#TODO: Place custom script here
	
}

$weblink_packagename_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	
}

$remediations_winget_maxversion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_remediations_maxversion_checkbox_CheckedChanged={
	#TODO: Place custom script here
	
}

$remediate_winget_version_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_wingetid_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$remadiations_winget_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$remediations_winget_upload_button1_Click={
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				
				
			
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				
			
				
				$encoding = [System.Text.Encoding]::UTF8
				$bytes = $encoding.GetBytes($remediate_detectFile)
				$Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
				$Bytes2 = $encoding.GetBytes($remediate_remediateFile)
				$Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
				$UploadRemediationsFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/5/2023 3:38 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	upload.ps1
	===========================================================================
	.DESCRIPTION
		Part of IntunePrepTool
		https://github.com/rink-turksma/IntunePrepTool
		Upload Remediations to Intune
#>
	Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
	if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
	else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
	$displayName = "!!displayName!!"
	$publisher = "!!publisher!!"
	$detectionScriptContent = '!!detectionScriptContent!!'
	$remediationScriptContent = '!!remediationScriptContent!!'
	$tenantID = "!!tenantid!!"
	$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"; $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	$MsalToken = Get-MsalToken -TenantId $tenantID -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
	$uri = "https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts"
	$createdPolicy = Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{ Authorization = $MsalToken.CreateAuthorizationHeader() } -ContentType 'application/json'
	Write-Host "Remediationa policy created successfully with ID: $($createdPolicy.id)" -ForegroundColor Green
	Write-Host "Please assign and schedule with MS Intune Admin console" -ForegroundColor Green
	
'@
				$displayName = $winget_remediations_name_textbox1.Text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!publisher!!", $config_customername)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!displayName!!", $displayName)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!detectionScriptContent!!", $Encoded_remediate_detectFile)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!remediationScriptContent!!", $Encoded_remediate_remediateFile )
				$tenatURL = $upload_tenantURL_textbox.text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!tenantid!!", $tenatURL)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"
				}
				$UploadRemediationsFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1" -Force
				$remadiations_winget_textbox2.AppendText("Created Upload.ps1")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule")
				
				if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					
					
					
					powershell_ise -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
				}
			}
		}
	}
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
}

$remediations_winget_open_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
	$remediate_winget_version = $remediate_winget_version_textbox1.Text
	Invoke-Item "$config_packagefolder\$winget_remediations_name\$remediate_winget_version"
}

$powershell_scheduledtask_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	if ($powershell_scheduledtask_radiobutton.Checked -eq $true)
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $true
		$package_scheduled_task_WingetID_textbox.Visible = $true
		$package_scheduled_task_WingetID_label3.Enabled = $true
		$package_scheduled_task_WingetID_label3.Visible = $true
		$package_ScheduledTask_create_scripts_button1.Enabled = $true
		$package_ScheduledTask_create_scripts_button1.Visible = $true
		
		
	}
	else
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $false
		$package_scheduled_task_WingetID_textbox.Visible = $false
		$package_scheduled_task_WingetID_label3.Enabled = $false
		$package_scheduled_task_WingetID_label3.Visible = $false
	
	}
}

$powershell_Empty_Scheduled_Task_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	$package_ScheduledTask_create_scripts_button1.Enabled = $true
	$package_ScheduledTask_create_scripts_button1.Visible = $true
}



$package_scheduledtasK_option_weekly_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
	{
		$package_scheduledtask_combobox1.Enabled = $true
		$package_scheduledtask_combobox1.Visible = $true
		$package_scheduledtask_time_combobox1.Enabled = $true
		$package_scheduledtask_time_combobox1.Visible = $true
		$package_scheduledtask_am_radiobutton1.Enabled = $true
		$package_scheduledtask_am_radiobutton1.Visible = $true
		$package_scheduledtask_pm_radiobutton.Enabled = $true
		$package_scheduledtask_pm_radiobutton.Visible = $true
		
	}
	else
	{
		$package_scheduledtask_combobox1.Enabled = $false
		$package_scheduledtask_combobox1.Visible = $false
		$package_scheduledtask_time_combobox1.Enabled = $false
		$package_scheduledtask_time_combobox1.Visible = $false
		$package_scheduledtask_am_radiobutton1.Enabled = $false
		$package_scheduledtask_am_radiobutton1.Visible = $false
		$package_scheduledtask_pm_radiobutton.Enabled = $false
		$package_scheduledtask_pm_radiobutton.Visible = $false
	
	}
}

$package_scheduledtask_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$datetimepicker1_ValueChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_time_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_am_radiobutton1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_pm_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_winget_max_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_label3_Click={
	#TODO: Place custom script here
	
}

$package_scheduled_Task_maxVersion_label4_Click={
	#TODO: Place custom script here
	
}

$powershell_create_package_dir_button1_Click={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	else
	{
		if ($powershell_package_name_textbox1.Text -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package name textbox', 'Select Package Name')
		}
		else
		{
			if ($powershell_package_version_textbox1.Text -like $null)
			{
				[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package version textbox', 'Select Package Version')
			}
			else
			{
				$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
				$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
				$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
				$package_scheduledTask_name = $powershell_package_name_textbox1.Text
				$package_scheduledTask_version = $powershell_package_version_textbox1.text
			
			
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"
				}
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"
				}
				$package_ScheduledTask_output_textbox1.Text = "`nNew package direcotory created: `r`n"
				$package_ScheduledTask_output_textbox1.AppendText("$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$powershell_open_package_directory_button1.Enabled = $true
				$powershell_open_package_directory_button1.Visible = $true
				$powershell_Empty_Scheduled_Task_radiobutton.Enabled = $true
				$powershell_Empty_Scheduled_Task_radiobutton.Visible = $true
				$powershell_scheduledtask_radiobutton.Enabled = $true
				$powershell_scheduledtask_radiobutton.Visible = $true
				
				
				
			}
		}
	}
}

$powershell_package_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_open_package_directory_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version.text
	
	Invoke-Item "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\"
}

$package_ScheduledTask_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_ScheduledTask_create_scripts_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script;
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script; $RegisterDetectionroot = "Intune_" + $config_customername
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version.text
	
	if (($powershell_scheduledtask_radiobutton.Checked -eq $true) -and ($package_scheduled_task_WingetID_textbox.text -like $null))
	{
		[void][System.Windows.Forms.MessageBox]::Show('You need to fill the WingetID textbox', 'Please select WingetID')
		
	}
	else {
		if ($powershell_Empty_Scheduled_Task_radiobutton.Checked -eq $true)
		{
				
				
				$ScheduledTaskFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/12/2023 6:20 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	"!!ps1name!!"
	===========================================================================
	.DESCRIPTION
		A description of the file.
#>

#App Params
$package_scheduledTask_name  = "!!package_scheduledTask_name!!"
$package_scheduledTask_version = "!!package_scheduledTask_version!!"
#Customer vars
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$package_scheduledTask_name_$package_scheduledTask_version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$package_scheduledTask_name"
$excode = $null;
#create log directory in programdata when needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Create registry key when needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application key in registry when needed
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  This is saved in $logdir. Also used in EventViewer
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	######### PLEASE Place action here!!!
	######### Please try to end your action with -ErrorAction Stop
	######### Begin here
	
	
	
	
	
	
	
	
	
	
	###### End here

	
	#-ErrorAction Stop
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}


### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs")
{
	if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) { remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false }
	copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}






		
'@
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!ps1name!!", "scheduledTask_$package_scheduledTask_name.ps1")
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_name!!", $package_scheduledTask_name)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_version!!", $package_scheduledTask_version)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!logdir!!", $config_logfoldertarget)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
				
				
				
				$ScheduledTaskFile | Out-File  "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\scheduledTask_$package_scheduledTask_name.ps1" -Force -Confirm:$false -ErrorAction SilentlyContinue
				$package_ScheduledTask_output_textbox1.AppendText("Template script to be scheduled created")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Please search in script for: 'Begin here'")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Place Powershell command's to be run there.")
				
			}
			else
			{
				##### Here Script to create script to create Winget Update task
			}
		}
		$package_scheduledTask_Edit_script_button1.Enabled = $true
		$package_scheduledTask_Edit_script_button1.Visible = $true
		$package_scheduledtasK_option_startup_checkbox1.Enabled = $true
		$package_scheduledtasK_option_startup_checkbox1.Visible = $true
		$package_scheduledtasK_option_weekly_checkbox1.Enabled = $true
		$package_scheduledtasK_option_weekly_checkbox1.Visible = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Enabled = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Visible = $true
	}
	


$package_scheduledTask_Edit_script_button1_Click={
	#TODO: Place custom script here
	
}

$package_scheduledtasK_option_startup_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_createIntunewin_scripts_button1_Click={
	#TODO: Place custom script here
	
}

$windowsFirewallToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$config_InstallRequriedPSmodules_Click={
	#TODO: Place custom script here
	$config_install_required_ps_modules = @'
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

Write-Host "Script will install Evergreen powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Evergreen) { Import-Module -Name Evergreen -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Evergreen -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Evergreen -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -PathType Leaf))
		{
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		else
		{
			Remove-Item -Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -Confirm:$false -Force
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
	}
}

$downloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$wingetToolStripMenuItem1_Click={
	#TODO: Place custom script here
	
}

$config_download_folder_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$config_downloadFolderBrowse_Click={
	#TODO: Place custom script here
	if ($config_download_folderbrowsermoderndialog2.ShowDialog() -eq 'OK')
	{
		$config_download_folder_textbox3.Text = $config_download_folderbrowsermoderndialog2.SelectedPath
	}
}

$download_winget_tab_Click={
	#TODO: Place custom script here
	
}

$download_winget_search_button1_Click={
	
	$downloadWingetSearchText = $download_winget_search_textbox5.Text
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$download_winget_output_textbox3.Text = $null
	
	$download_winget_listbox1.Items.Clear()
	$download_winget_version_listbox1.Items.Clear()
	
	
	$table_download_winget = New-Object System.Data.DataTable;
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "ID";
	$table_download_winget.Columns.Add($column_download_winget);
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "Name";
	$table_download_winget.Columns.Add($column_download_winget);
	
	

	foreach ($wsearch_l in $downloadwingetsearch)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row_download_winget = $table_download_winget.NewRow();
			$download_winget_extraStrip = $wsearch_l.substring(0, $wsearch_IdStart)
			$download_winget_extraStrip = $download_winget_extraStrip.TrimEnd()
			$row_download_winget["Name"] = $download_winget_extraStrip
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row_download_winget["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			if ($row_download_winget["ID"] -notlike $null)
			{
				$table_download_winget.Rows.Add($row_download_winget);
				$download_winget_listboxInput = $row_download_winget| Select Name,ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
				$download_winget_listbox1.Items.Add($download_winget_listboxInput)
			}
			## - Save changes to the table:
			$table_download_winget.AcceptChanges();
			
			#$download_datagridview1.DataSource = $table_download_winget
			
			#$download_winget_listboxInput = $table_download_winget | Select Name, ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
			#$download_winget_listbox1.DataSource = $download_winget_listboxInput
			
			
			
		}
		
	}
	
	
	
}

$download_winget_search_textbox5_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 

}

$download_winget_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_version_listbox1.Items.Clear()
	
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	
	
	foreach ($wsearch_55 in $downloadwingetsearchversionselected)
	{
		
		
		if (($wsearch_55 -notlike "Found*") -and ($wsearch_55 -notlike "*-*") -and ($wsearch_55 -notlike "*Version*") -and ($wsearch_55 -notlike $null) -and ($wsearch_55 -notlike "* *"))
		{
			
			$download_winget_version_listbox1.Items.Add($wsearch_55)
			
			
		}
		
	}
	
	
	
	
}

$download_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	#Write-Host $download_datagridview1.SelectedRows.Item.ToString()
}

$download_winget_version_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_download_and_add_button1.Visible = $true
	$download_winget_download_and_add_button1.Enabled = $true
}

$download_winget_download_and_add_button1_Click={
	#TODO: Place custom script here
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	$download_winget_explorer_button1.Enabled = $true
	$download_winget_explorer_button1.Visible = $true
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	if (!(Test-Path -Path $download_winget_path))
	{
		
		New-Item -ItemType Directory -Path $download_winget_path
	}
	#$downloadWingetToLib = winget download --download-directory $download_winget_path --id $winget_download_selected_id --accept-package-agreements --accept-source-agreements
	
	#$download_winget_output_textbox3.Text = $downloadWingetToLib
	#$config_downloadpath
	#Write-Host $download_winget_version_listbox1.SelectedItem
	$download_winget_selectedversion = $download_winget_version_listbox1.SelectedItem
	$download_winget_package = @'
winget download --download-directory !!@download_winget_path@!! --id !!@winget_download_selected_id@!! --accept-package-agreements --accept-source-agreements --version !!@download_winget_selectedversion@!!
'@
	$download_winget_package = $download_winget_package.Replace("!!@winget_download_selected_id@!!", $winget_download_selected_id)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_selectedversion@!!", $download_winget_selectedversion)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_path@!!", $download_winget_path)
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -PathType Leaf))
		{
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		else
		{
			Remove-Item -Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -Confirm:$false -Force
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		
		powershell_ise 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1'
	}
	
}


$download_winget_explorer_button1_Click={
	#TODO: Place custom script here
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	explorer $download_winget_path
}

$config_help_button1_Click={
	#TODO: Place custom script here
	
}

$config_exit_help_button1_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">548</Line>
    <Line Disabled="True">1450</Line>
    <Line Disabled="True">1452</Line>
    <Line Disabled="False">1895</Line>
    <Line Disabled="False">3312</Line>
    <Line Disabled="False">4876</Line>
    <Line Disabled="True">5628</Line>
    <Line Disabled="True">5630</Line>
    <Line Disabled="True">5736</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>