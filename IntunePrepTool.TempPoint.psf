<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAHUuSURBVHhe7b1XdxvX2q157nt0/49zxjhX/Rf6
+nz52962JVu25b2dkyxLlmTlHJhzzjnnnHMOYM4kCIA5Z2r2eguABFGQSFEMIDUfjjlq1aqAqiJQ
76yV6n8QQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEkDdy8X//7/+d8OSZS4K7p3+Ci5sXRVEURVEn
UF4+QQmX/ryS8P/83/9XgiXGv5n/9T//Z058egHaRubQNjSL1sFpiqIoiqJOoNqGZ9E+MoNbdx/C
EubfzNNnbgm60XkUNw2guLFfTSmKoiiK2k0lzQN7lrb+u2wjMXkfn1Hc2Ify9jHUtPbvbgC8fAIS
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
eno6RVEURVEnQAnx8TQAFEVRFPWhiQaAoiiKoj5A0QBQFEVR1AcoGgCKoiiK+gBFA0BRFEVRH6Bo
ACiKoijqAxQNAEVRFEV9gKIBoCiKoqgPUDQAFEVRFPUBigaAoiiKoj5A0QBQFEVR1AcoGgCKoiiK
+gBFA0BRFEVRH6DeywAMTm/B1cMXd27fQlpaGhISEiiKoiiKOgGKCA9HbEw0JhY2390A9KgNUjNy
EBYSpLmIpMQEiqIoiqJOgGKio1BeWgzTwjuWABiVAdCNzmNkahWTS9swzm9oxQgURVEURZ0AqSd/
mfYaFtUD/dreDICXb0DC1AbQa1rTNhLnQFEURVHUCZNhVSvNH5x5js6hyd0NwMPHz7JHJxc0t0BR
FEVR1MmWBP/Gtt7dDQAhhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEELIB8n/+B//PwnpaDI8zMKjAAAA
AElFTkSuQmCC</Preview>
  <Form>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
AA==</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	#Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		else
		{
			if (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
			{
				[void][System.Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
			}
		
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	$config_tabcontrol2.Dock = 'Fill'
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Enabled = $true
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_intunewin_tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {

	$wgid = $winget_WingetID_textbox1.text

	
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
		{
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_intunewin_tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	
	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	
	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:04
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			$MSIbestand = $msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Product installation success" -ForegroundColor yellow -BackgroundColor black
		write-host "Possible uninstall command is:" -ForegroundColor yellow -BackgroundColor black
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
	}
	
	
	$excode = 0
	
}
catch
{
	Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
	$startPMSI
	write-host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
	write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "See what this meens: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:



<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor yellow -BackgroundColor black
	
	
	
	$excode = 0
}
catch
{
	Write-Host "Uninstall failed" -ForegroundColor Red -BackgroundColor Blue
	$startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}



'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$config_tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already available in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be available in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkPackageName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkPackageName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkPackageName.intunewin"
			DisplayName   = $weblinkPackageName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create extra folder in startmenu (when needed)"
  if (!(Test-Path -Path $location))
{
	
	New-Item -ItemType Directory -Path $location
}

	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!packagename!!", $weblinkPackageName)
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!packagename", $weblinkPackageName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_packagename.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget not installed" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_basic_template_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}

$winget_remediations_createscripts_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile| Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Upload not yet available for Remediations.. For now use the Intune Admin Portal")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Please reopen IntunePrepTool to create more Remediations scripts")
				
				
			}
		}
		
		
	}
	
	
	
	
	
	
	
	
}

$configToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $true
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_winget_tabcontrol2.Enabled = $true
	$package_winget_tabcontrol2.Visible = $true
	$package_winget_tabcontrol2.Dock = 'Fill'
}


$mSIToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $true
	$package_msi_tabcontrol2.Visible = $true
	$package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $true
	$package_exe_tabcontrol2.Visible = $true
	$package_exe_tabcontrol2.Dock = 'Fill'
}

$main_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$wingetUpdateToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false

	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Dock = 'Fill'
	$Remediations_winget_tabcontrol2.Enabled = $true
	$Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Dock = 'Fill'
	$package_weblink_tabcontrol2.Visible = $true
	$package_weblink_tabcontrol2.Enabled = $true
}

$powershellToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	$package_powershell_tabcontrol2.Dock = 'Fill'
	$package_powershell_tabcontrol2.Enabled = $true
	$package_powershell_tabcontrol2.Visible = $true
	
}

$intunewinToolStripMenuItem_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	
	
	$upload_intunewin_tabcontrol2.Dock = 'Fill'
	$upload_intunewin_tabcontrol2.Enabled = $true
	$upload_intunewin_tabcontrol2.Visible = $true
	
}

$wingetSearchShowVersionToolStripMenuItem_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Enabled = $true
	$tools_winget_searchtabcontrol1.Visible = $true
	
}

$findUninstallStringsToolStripMenuItem_Click = {
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'Fill'
	$tools_uninstallstring_tabcontrol1.Enabled = $true
	$tools_uninstallstring_tabcontrol1.Visible = $true
	
}

$Weblink_intunewin_tabpage6_Click={
	#TODO: Place custom script here
	
}

$weblink_packagename_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	
}

$remediations_winget_maxversion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_remediations_maxversion_checkbox_CheckedChanged={
	#TODO: Place custom script here
	
}

$remediate_winget_version_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_wingetid_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$remadiations_winget_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$remediations_winget_upload_button1_Click={
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				
				
			
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				
			
				
				$encoding = [System.Text.Encoding]::UTF8
				$bytes = $encoding.GetBytes($remediate_detectFile)
				$Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
				$Bytes2 = $encoding.GetBytes($remediate_remediateFile)
				$Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
				$UploadRemediationsFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/5/2023 3:38 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	upload.ps1
	===========================================================================
	.DESCRIPTION
		Part of IntunePrepTool
		https://github.com/rink-turksma/IntunePrepTool
		Upload Remediations to Intune
#>
	Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
	if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
	else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
	$displayName = "!!displayName!!"
	$publisher = "!!publisher!!"
	$detectionScriptContent = '!!detectionScriptContent!!'
	$remediationScriptContent = '!!remediationScriptContent!!'
	$tenantID = "!!tenantid!!"
	$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"; $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	$MsalToken = Get-MsalToken -TenantId "rinktest.onmicrosoft.com" -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
	$uri = "https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts"
	$createdPolicy = Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{ Authorization = $MsalToken.CreateAuthorizationHeader() } -ContentType 'application/json'
	Write-Host "Remediationa policy created successfully with ID: $($createdPolicy.id)" -ForegroundColor Green
	Write-Host "Please assign and schedule with MS Intune Admin console" -ForegroundColor Green
	
'@
				$displayName = $winget_remediations_name_textbox1.Text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!publisher!!", $config_customername)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!displayName!!", $displayName)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!detectionScriptContent!!", $Encoded_remediate_detectFile)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!remediationScriptContent!!", $Encoded_remediate_remediateFile )
				$tenatURL = $upload_tenantURL_textbox.text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!tenantid!!", $tenatURL)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"
				}
				$UploadRemediationsFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1" -Force
				$remadiations_winget_textbox2.AppendText("Created Upload.ps1")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule")
				
				if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					
					
					
					powershell_ise -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
				}
			}
		}
	}
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">547</Line>
    <Line Disabled="False">1881</Line>
    <Line Disabled="False">3196</Line>
    <Line Disabled="False">4725</Line>
    <Line Disabled="True">5406</Line>
    <Line Disabled="True">5408</Line>
    <Line Disabled="True">5514</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>