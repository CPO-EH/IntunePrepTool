<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAFy4SURBVHhe7b1nWxtZ3u67P8G59hfZ58Xz5nyK
/czMMz2dptudp3Pudnc7tXPCNgYDJuecc8455yxASICQEDnn+6x/CdkyFg4N2Aju33X9qFVBpZKQ
tO5aq8L/IoQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIOeac/q//
+q+ke/e9kh74+Cd5PHhIKaWUUhfUxy8o6cKFS0n/+3//P0k7dfze/L//5//kpeaWo9M4i/bhabTr
pyillFLqgnYYZtA1MoubdzywU83vzX0Pr6SukXmUtgwpBymllFL6gpa36V9QWx1b3jrkZJ5zZfmy
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
0x3nOZvubJ5j2T6+V/lll3MsO1vOWflZ83aX7eOOZWfLOZZfdjnH8vOWczbdcZ6z6c7mOZadzXM2
3XGes+nO5jmW7eN7lV92Oceys+WclZ81b3fZPu5YdracY/lll3MsO1tur/LLLrdX2dk8Z9Md5zmb
7myeY9k+vld5r3lff/01fB/6YHJh4+UDwKB1De6e3rh39w7y8/ORlZVFKaWUUhcwOTkZURHhGJ9Z
+esB4KFKEAwAlFJKqeuYkZGBhLhYmKaX/3oA8Pb2Ql5eHjIzMymllFLqAqalpSE+NoYBgFJKKT1J
7isADE2u4/bd+3B3v4fs7GykpqZSSiml1AVMSkpCdGTEXwsA/eYVRETFIDoqAvW1NaiuqqCUUkrp
kbcSJcVFyMnKgGV2Bb3jLxEAzItA18gcjNZFWObWtKMIzZRSSil1GS2zqxiyLKJP7dC/UAB46B+U
NLkG6Cwr6Lesak0HfeNyGgGllFJKj7y76mz99BZ6DZPPDwC33e7ljk4uammBUkoppa6tVP6t3UPP
DwCEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCEuy//6X/8/yOqP
w64nlfkAAAAASUVORK5CYII=</Preview>
  <Form>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
FT4PPFkCAA==</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		else
		{
			if (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
			{
				[void][System.Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
			}
		
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	$config_tabcontrol2.Dock = 'Fill'
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Enabled = $true
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_intunewin_tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {

	$wgid = $winget_WingetID_textbox1.text

	
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
		{
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_intunewin_tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	
	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	
	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:04
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			$MSIbestand = $msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Product installation success" -ForegroundColor yellow -BackgroundColor black
		write-host "Possible uninstall command is:" -ForegroundColor yellow -BackgroundColor black
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
	}
	
	
	$excode = 0
	
}
catch
{
	Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
	$startPMSI
	write-host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
	write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "See what this meens: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:



<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor yellow -BackgroundColor black
	
	
	
	$excode = 0
}
catch
{
	Write-Host "Uninstall failed" -ForegroundColor Red -BackgroundColor Blue
	$startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}



'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$config_tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already available in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be available in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkPackageName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkPackageName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkPackageName.intunewin"
			DisplayName   = $weblinkPackageName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create extra folder in startmenu (when needed)"
  if (!(Test-Path -Path $location))
{
	
	New-Item -ItemType Directory -Path $location
}

	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!packagename!!", $weblinkPackageName)
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!packagename", $weblinkPackageName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_packagename.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget not installed" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_basic_template_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}

$winget_remediations_createscripts_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile| Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Upload not yet available for Remediations.. For now use the Intune Admin Portal")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Please reopen IntunePrepTool to create more Remediations scripts")
				
				
			}
		}
		
		
	}
	
	
	
	
	
	
	
	
}

$configToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $true
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_winget_tabcontrol2.Enabled = $true
	$package_winget_tabcontrol2.Visible = $true
	$package_winget_tabcontrol2.Dock = 'Fill'
}


$mSIToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $true
	$package_msi_tabcontrol2.Visible = $true
	$package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $true
	$package_exe_tabcontrol2.Visible = $true
	$package_exe_tabcontrol2.Dock = 'Fill'
}

$main_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$wingetUpdateToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false

	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Dock = 'Fill'
	$Remediations_winget_tabcontrol2.Enabled = $true
	$Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Dock = 'Fill'
	$package_weblink_tabcontrol2.Visible = $true
	$package_weblink_tabcontrol2.Enabled = $true
}

$powershellToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	$package_powershell_tabcontrol2.Dock = 'Fill'
	$package_powershell_tabcontrol2.Enabled = $true
	$package_powershell_tabcontrol2.Visible = $true
	
}

$intunewinToolStripMenuItem_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	
	
	$upload_intunewin_tabcontrol2.Dock = 'Fill'
	$upload_intunewin_tabcontrol2.Enabled = $true
	$upload_intunewin_tabcontrol2.Visible = $true
	
}

$wingetSearchShowVersionToolStripMenuItem_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Enabled = $true
	$tools_winget_searchtabcontrol1.Visible = $true
	
}

$findUninstallStringsToolStripMenuItem_Click = {
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'Fill'
	$tools_uninstallstring_tabcontrol1.Enabled = $true
	$tools_uninstallstring_tabcontrol1.Visible = $true
	
}

$Weblink_intunewin_tabpage6_Click={
	#TODO: Place custom script here
	
}

$weblink_packagename_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	
}

$remediations_winget_maxversion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_remediations_maxversion_checkbox_CheckedChanged={
	#TODO: Place custom script here
	
}

$remediate_winget_version_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_wingetid_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$remadiations_winget_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$remediations_winget_upload_button1_Click={
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				
				
			
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				
			
				
				$encoding = [System.Text.Encoding]::UTF8
				$bytes = $encoding.GetBytes($remediate_detectFile)
				$Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
				$Bytes2 = $encoding.GetBytes($remediate_remediateFile)
				$Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
				$UploadRemediationsFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/5/2023 3:38 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	upload.ps1
	===========================================================================
	.DESCRIPTION
		Part of IntunePrepTool
		https://github.com/rink-turksma/IntunePrepTool
		Upload Remediations to Intune
#>
	Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
	if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
	else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
	$displayName = "!!displayName!!"
	$publisher = "!!publisher!!"
	$detectionScriptContent = '!!detectionScriptContent!!'
	$remediationScriptContent = '!!remediationScriptContent!!'
	$tenantID = "!!tenantid!!"
	$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"; $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	$MsalToken = Get-MsalToken -TenantId "rinktest.onmicrosoft.com" -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
	$uri = "https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts"
	$createdPolicy = Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{ Authorization = $MsalToken.CreateAuthorizationHeader() } -ContentType 'application/json'
	Write-Host "Remediationa policy created successfully with ID: $($createdPolicy.id)" -ForegroundColor Green
	Write-Host "Please assign and schedule with MS Intune Admin console" -ForegroundColor Green
	
'@
				$displayName = $winget_remediations_name_textbox1.Text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!publisher!!", $config_customername)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!displayName!!", $displayName)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!detectionScriptContent!!", $Encoded_remediate_detectFile)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!remediationScriptContent!!", $Encoded_remediate_remediateFile )
				$tenatURL = $upload_tenantURL_textbox.text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!tenantid!!", $tenatURL)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"
				}
				$UploadRemediationsFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1" -Force
				$remadiations_winget_textbox2.AppendText("Created Upload.ps1")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule")
				
				if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					
					
					
					powershell_ise -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
				}
			}
		}
	}
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">547</Line>
    <Line Disabled="False">1881</Line>
    <Line Disabled="False">3196</Line>
    <Line Disabled="False">4725</Line>
    <Line Disabled="True">5406</Line>
    <Line Disabled="True">5408</Line>
    <Line Disabled="True">5514</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>