<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAFmkSURBVHhe7b1pdxXXuah7fssd51fcL3eMcz+c
+2Wfnd1mJ3GcxN6J7diO7cSJO4wxtun7TqgB9UIt6vsGCVCPACEa9X3fC0lICMR733cuFSyUBQiQ
QGQ9j8Yz1qpasxrVqqr5zllv1fofAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAADwD8if/vf//v8SQyNiEkPCIhNPhJ5CRETEN1Cryw8fC0n8n//z/0pcqeOf
zP/6X/9vTnndDbned1uudU9KYxciIiK+iVo9fmtwTqIT02Wlmn8yEZGxibcGZqX8SodUODsRERHx
udT682qnXLjWvSbPN3YFHB/I5ylr63C+sUeutg09OwAIOxWTeKv/tpvw4jVbSJ+cbxqSC9eH5OKN
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
rq3H8/o7Xf8//OEP7ra3101/f7/89re/XdP/8t///d/y9ttvy89//nP3Rb4Obdm//OUv3bqYgdbz
WXrT2f9iO+6vf/3rDdObv/9y8c139XngebV5vOj+EGh+L2Kgeds62f66nse4zcvOMez/aHXfH//4
gbR29kjn+P3nDwC2bt3qAgDboWxmr1NbB/unbMd+Hm3a9957TwYHB10l3HajQSrKSiQt7aycv1gr
IzN3ZXqkR85XXZGx4W4pKql098VPDPdJbf01uXvfchuWpbmxStJySmV67o4M9HTKzZYusXyDe/eW
ZHpqSpbuPxC7P/7ukuU4iCzf1XIDQzqvOZ1vnzR3dEpXT69bn7X8H7/5zW/k+++/l5SUFElKSvo7
ExMTn6qVsWlTUpIDfu7vk+Zn00dERLj1eZFt7+8XX3zh9icLKjdKm//XX3/tAr6XXd9/BK3i8VoM
m0H/4Gyt2v/wsucfr0J8Xm1d1+vcF2j+Nu8ff/zRHWfe8ZaS/Pjx6h2bq1+fpM3jb3/72wv/z/iP
o+13Lx4AdPh6AN5++9eSm5sr3d3d0trWLv0DA9Lf1yutra3Sotrr02xpaZXOzk5p0/cdK6/+n7e1
PT4cyK6uLikrK3MH5POeQGwjWAAwoOttDHdclxNHD0loWJjEx56RkCN7ZesPO2X/0TCJio+U3bsO
yLGjoRIZGiFbv/1Jzl25rrX5HSnIz5CwkHA5ejxc9mz/UbbvCdEN2y1n46N1XIQkxsTKjt0/SET0
GYmPjpa46AQ5cvCoHD18XAoLzknFxXJpbOmWd99ZWwBg0bzlDLwMd2ZnZHZev8yXwO5OsPW1E3Gg
9XyWFsj8+c9/dvPxJTM+nlBoWar+mcy+93ddMuFdfb/kEh9Xyi49KmtlLOHPniJoZSzB0xJGLRt9
27ZtrrIJtD7rpfVoWDdboIpuI7Rl2b78+9//PuD6rNa+r48++sg9Y2H79u2vXVsPO5/Y+q/1GLZt
vGXLFmlubnZ39HR0dkh7e7t7bWlpkY4OG25z771zxcPzjZ5X7Pxk563U1NTnDj5sW3/88cdy6dIl
txx37uvvl86Odt+ydRntuk62PN9yW6Rdy3W49fGtg4231/r6eheUrj6G7PKq5QF53F2Yk9k7L3e8
GgcPHnys5249te/PgotXue8H0pa/0cf4m+5jAcDECwQAdvDZQWg7seP+olytq5MrTe2+4TUyM3Pb
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
JoN6Hmy4dE26utrcU+rsdmvLpbKEx76um3L1RrNrBNr2suPFAlfLq7LfKxnSc2CfTj8+OS1jelzs
3vm97IjKkA8/eO/hvvS82nTWALDtaoz13pD4lGyprCiS5LPZkqF1TWVVrdQ2XHf7//LdBfd7KcZA
Z7NcbmrV8/2SHr8tMjFzR4+TZQ0877ofmTOs4eIFrSWFhe7YDbQeG+VLBQBX24ZdS+pvf/vCdWU3
NFyR8orzcuGiPZbUHj9Zoye+ajds2vvKqmr9zDd8sdLK6LC+Piyjw08rY+P95+PUz7zpLl1qUC9L
g55AzUsNl6VexzXoq/1YkL3asJWzyxL2Oj4+IWfPpusB1iSTU9MbrvV49PX164F9QZpbWmV4eERu
asvoypWr0nitSb7+Zots2WL3rds98U/287/+TQoLi90P/AwNj7qeklfp4OCIrr+26pquu/X95ptn
r3Mgv/rqa9mzZ6/ryiwpKZOrVxvlinr16jW3TS6r9uqGdbwNm1bOlX2sjG9a/2GvjKcN37qlJ0Xd
9s16YNotWS2tbT5X3tstXdaj1NHRqfvJZXeitozvX+gBakHA07SuVctF8XIAHqsY7Zq+f2VrvS3q
i+J6a8xlX4vceoRWBwB2Avv+++1y7PgJOXrs+EP37t3v9kGrxS2gsMtfpgXCXgBlw3ayHRr0BVVe
GV+5R2UCDT9vGVuu9SbZo6It56Ns5bHadXW1rhV87NgJORka9phHjh6XrOwclxNh01kFZxn93iU3
e+8Ne5fm7BLf6jJWgdqlLLsEZ609+5GxiIjTGhSc/Ltleh4/HiKxcfGucrbHqtq5xS4l2HnF9jPb
b2zYxrthDQB9w14Z37C92h1MYWEREhIS+tgy7P+rq7skV/XcdPlKo+6XHbrftjlt//R8OOz2YT/d
ft3uPm/Taevq6lxgutE9AIVamRmP7fsbwNMCV1fx6v9vx+TLBgAWSBmj3Tdk90+7ZNfOXZKUrg2I
rEwpKS2TXLucd+e2tDTfkIpzxdo47pPRnpuy66e9Eqn70TdffivJeReko+WaHD90VGJjkiU24oTs
2HdQ0lPSJCUxRX76/qC89eu1XfpaLx8LAJ73EsDllkE5ePCQHggn3M51U0+q1mKxW/rsV/Jei7Zs
t/yVdVg9bK8r427PWsLVoJ6E+vWEU+ZO+o/Na4McGRnVk92AnnC6XVeoXQbp6u6Rdq1sbB3s+QNh
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
iBiEEgAgIiIGoSQBIiIiBqEkASIiIgahJAEiIiIGoeQAICIiBqHkACAiIgah5AAgIiIGoeQAICIi
BqHkACAiIgahBACIiIhBKEmAiIiIQShJgIiIiEEoSYCIiIhBKDkAiIiIQSg5AIiIiEEoOQCIiIhB
KDkAiIiIQSg5AIiIiEEoAQAiImIQShIgIiJiEEoSICIiYhBKEiAiImIQSg4AIiJiELouOQC/eftt
NyNERER8M3xb6+73339P2rp6X+wSwJYt38pHH34on332mfPTTz996OpxTxp+FWUCjXvS8GYr4w0/
rUygcRtVxht+2TKBxr1IGW/4VZbxhl9FmUDjnjRMmaeX8YafVibQuH+EMt7wy5YJNO5FyqweflqZ
QONepIw3/CrKBBr3pOFXUSbQuE8++URfP5GWju7n7wG42j4sW7dulaSkJMnJyZGsrCxERER8A8zL
y5OI8DC5dqNFuiaWny8AuNI2JNu3/yCZmZluRrm5uYiIiPgGWFBQIPFxsdJ0s/XFAoDvv98u6enp
bmbWC4CIiIib3/z8fImNiX75AMBmlp2djYiIiG+A1nP/4gFA65Bs2bJFUlKSJTdXI4rsLERERHwD
zNcA4HREmDTdaH6+AGDkjsiN7klp1Ak7e/qld2BYevqHEBER8Q3Q6u3W9i7pH5mS1uGFtQUAEZGx
rgfAJuieXJaOsXvSPraEiIiIb4qjS+72v7aRRfe+ffD2swOAw8dCckbn7rloAREREd9srfJv7R17
dgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
m5v/8T/+f2K/oy+YAGPzAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	[string]$downloadpath
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		else
		{
			if (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
			{
				[void][System.Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
			}
		
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	$config_tabcontrol2.Dock = 'Fill'
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Enabled = $true
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_intunewin_tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {

	$wgid = $winget_WingetID_textbox1.text

	
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	[string]$c_downloadfolder = $config_download_folder_textbox3.Text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
			downloadpath    = $c_downloadfolder;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
			{
				Unblock-File -Path $exe_org_path -Confirm:$false 
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_intunewin_tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	
	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	
	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:04
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Unblock-File -Path $msi_org_path -Confirm:$false
				$MSINewname = $msi_openfiledialog1.FileName
				
				$MSINewname = $MSINewname.Split("\")[$MSINewname.Split("\").Count - 1]
				$MSINewname = $MSINewname.Replace(" ", "")
				$MSIbestand = "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname"
				Write-Host $MSIbestand
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			 #$msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Product installation success" -ForegroundColor Green
		write-host "Possible uninstall command is:" -ForegroundColor Green
		write-host ""
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
		write-host ""
		write-host "Please check MSIEXEC log when experiencing problems:" -ForegroundColor Green
		write-host $logfileMSI -ForegroundColor Green
	}
	
	
	$excode = 0
	
}
catch
{
	Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
	$startPMSI
	write-host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
	write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "See what this meens: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:



<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log when experiencing problems:" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	
	
	
	$excode = 0
}
catch
{
	Write-Host "Uninstall failed" -ForegroundColor Red -BackgroundColor Blue
	$startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}



'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1.Text + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$config_tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already available in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be available in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	}
	catch
	{
		#Error handling here
	}
	
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			$config_download_folder_textbox3.Text = $cis.downloadpath
			
			if ($cis.downloadpath -like 'Enter UNC or local path for the download Package folder. (Evergreen / Winget)')
			{
				#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
				[void][System.Windows.Forms.MessageBox]::Show('Download folder was added to config. Please use this tool or edit "C:\Program Files\IntunePrepTool\config_customerinfo.csv" ', 'Please add Download folder') # Casting the method to [void] suppresses the output. 
			}
			
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
			try
			{
				New-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
	$config_download_folder_textbox3.Text = "Enter UNC or local path for the download Package folder. (Evergreen / Winget)"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkPackageName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkPackageName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkPackageName.intunewin"
			DisplayName   = $weblinkPackageName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create extra folder in startmenu (when needed)"
  if (!(Test-Path -Path $location))
{
	
	New-Item -ItemType Directory -Path $location
}

	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!packagename!!", $weblinkPackageName)
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!packagename", $weblinkPackageName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_packagename.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force }

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget not installed" }

try
{
	
	$install = "!!WingetCommand!!"
if ($install -like "!!doe*")
{
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
			
		}
		catch
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
	}
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
		}
		catch
		{
			
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
	}
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
			
		}
		catch
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
	}
	
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
		}
		catch
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_Empty_Scheduled_Task_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}

$winget_remediations_createscripts_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile| Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Upload not yet available for Remediations.. For now use the Intune Admin Portal")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Please reopen IntunePrepTool to create more Remediations scripts")
				
				
			}
		}
		
		
	}
	
	
	
	
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
	
	
	
}

$configToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $true
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_winget_tabcontrol2.Enabled = $true
	$package_winget_tabcontrol2.Visible = $true
	$package_winget_tabcontrol2.Dock = 'Fill'
}
$scheduledTaskToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	$package_ScheduledTask_tabcontrol2.Dock = 'Fill'
	$package_ScheduledTask_tabcontrol2.Enabled = $true
	$package_ScheduledTask_tabcontrol2.Visible = $true
}


$mSIToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $true
	$package_msi_tabcontrol2.Visible = $true
	$package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $true
	$package_exe_tabcontrol2.Visible = $true
	$package_exe_tabcontrol2.Dock = 'Fill'
}

$main_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$wingetUpdateToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false

	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Dock = 'Fill'
	$Remediations_winget_tabcontrol2.Enabled = $true
	$Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Dock = 'Fill'
	$package_weblink_tabcontrol2.Visible = $true
	$package_weblink_tabcontrol2.Enabled = $true
}



$intunewinToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	
	
	$upload_intunewin_tabcontrol2.Dock = 'Fill'
	$upload_intunewin_tabcontrol2.Enabled = $true
	$upload_intunewin_tabcontrol2.Visible = $true
	
}

$wingetSearchShowVersionToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Enabled = $true
	$tools_winget_searchtabcontrol1.Visible = $true
	
}

$findUninstallStringsToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'Fill'
	$tools_uninstallstring_tabcontrol1.Enabled = $true
	$tools_uninstallstring_tabcontrol1.Visible = $true
	
}

$sourceFromWingetToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $true
	$download_tabcontrol1.Visible = $true
	$download_tabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	
}


$Weblink_intunewin_tabpage6_Click={
	#TODO: Place custom script here
	
}

$weblink_packagename_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	
}

$remediations_winget_maxversion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_remediations_maxversion_checkbox_CheckedChanged={
	#TODO: Place custom script here
	
}

$remediate_winget_version_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_wingetid_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$remadiations_winget_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$remediations_winget_upload_button1_Click={
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				
				
			
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				
			
				
				$encoding = [System.Text.Encoding]::UTF8
				$bytes = $encoding.GetBytes($remediate_detectFile)
				$Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
				$Bytes2 = $encoding.GetBytes($remediate_remediateFile)
				$Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
				$UploadRemediationsFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/5/2023 3:38 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	upload.ps1
	===========================================================================
	.DESCRIPTION
		Part of IntunePrepTool
		https://github.com/rink-turksma/IntunePrepTool
		Upload Remediations to Intune
#>
	Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
	if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
	else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
	$displayName = "!!displayName!!"
	$publisher = "!!publisher!!"
	$detectionScriptContent = '!!detectionScriptContent!!'
	$remediationScriptContent = '!!remediationScriptContent!!'
	$tenantID = "!!tenantid!!"
	$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"; $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	$MsalToken = Get-MsalToken -TenantId $tenantID -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
	$uri = "https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts"
	$createdPolicy = Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{ Authorization = $MsalToken.CreateAuthorizationHeader() } -ContentType 'application/json'
	Write-Host "Remediationa policy created successfully with ID: $($createdPolicy.id)" -ForegroundColor Green
	Write-Host "Please assign and schedule with MS Intune Admin console" -ForegroundColor Green
	
'@
				$displayName = $winget_remediations_name_textbox1.Text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!publisher!!", $config_customername)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!displayName!!", $displayName)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!detectionScriptContent!!", $Encoded_remediate_detectFile)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!remediationScriptContent!!", $Encoded_remediate_remediateFile )
				$tenatURL = $upload_tenantURL_textbox.text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!tenantid!!", $tenatURL)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"
				}
				$UploadRemediationsFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1" -Force
				$remadiations_winget_textbox2.AppendText("Created Upload.ps1")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule")
				
				if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					
					
					
					powershell_ise -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
				}
			}
		}
	}
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
}

$remediations_winget_open_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
	$remediate_winget_version = $remediate_winget_version_textbox1.Text
	Invoke-Item "$config_packagefolder\$winget_remediations_name\$remediate_winget_version"
}

$powershell_scheduledtask_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	if ($powershell_scheduledtask_radiobutton.Checked -eq $true)
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $true
		$package_scheduled_task_WingetID_textbox.Visible = $true
		$package_scheduled_task_WingetID_label3.Enabled = $true
		$package_scheduled_task_WingetID_label3.Visible = $true
		$package_ScheduledTask_create_scripts_button1.Enabled = $true
		$package_ScheduledTask_create_scripts_button1.Visible = $true
		
		
	}
	else
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $false
		$package_scheduled_task_WingetID_textbox.Visible = $false
		$package_scheduled_task_WingetID_label3.Enabled = $false
		$package_scheduled_task_WingetID_label3.Visible = $false
	
	}
}

$powershell_Empty_Scheduled_Task_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	$package_ScheduledTask_create_scripts_button1.Enabled = $true
	$package_ScheduledTask_create_scripts_button1.Visible = $true
}



$package_scheduledtasK_option_weekly_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
	{
		$package_scheduledtask_combobox1.Enabled = $true
		$package_scheduledtask_combobox1.Visible = $true
		$package_scheduledtask_time_combobox1.Enabled = $true
		$package_scheduledtask_time_combobox1.Visible = $true
		$package_scheduledtask_am_radiobutton1.Enabled = $true
		$package_scheduledtask_am_radiobutton1.Visible = $true
		$package_scheduledtask_pm_radiobutton.Enabled = $true
		$package_scheduledtask_pm_radiobutton.Visible = $true
		
	}
	else
	{
		$package_scheduledtask_combobox1.Enabled = $false
		$package_scheduledtask_combobox1.Visible = $false
		$package_scheduledtask_time_combobox1.Enabled = $false
		$package_scheduledtask_time_combobox1.Visible = $false
		$package_scheduledtask_am_radiobutton1.Enabled = $false
		$package_scheduledtask_am_radiobutton1.Visible = $false
		$package_scheduledtask_pm_radiobutton.Enabled = $false
		$package_scheduledtask_pm_radiobutton.Visible = $false
	
	}
}

$package_scheduledtask_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$datetimepicker1_ValueChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_time_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_am_radiobutton1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_pm_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_winget_max_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_label3_Click={
	#TODO: Place custom script here
	
}

$package_scheduled_Task_maxVersion_label4_Click={
	#TODO: Place custom script here
	
}

$powershell_create_package_dir_button1_Click={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	else
	{
		if ($powershell_package_name_textbox1.Text -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package name textbox', 'Select Package Name')
		}
		else
		{
			if ($powershell_package_version_textbox1.Text -like $null)
			{
				[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package version textbox', 'Select Package Version')
			}
			else
			{
				$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
				$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
				$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
				$package_scheduledTask_name = $powershell_package_name_textbox1.Text
				$package_scheduledTask_version = $powershell_package_version_textbox1.text
			
			
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"
				}
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"
				}
				$package_ScheduledTask_output_textbox1.Text = "`nNew package direcotory created: `r`n"
				$package_ScheduledTask_output_textbox1.AppendText("$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$powershell_open_package_directory_button1.Enabled = $true
				$powershell_open_package_directory_button1.Visible = $true
				$powershell_Empty_Scheduled_Task_radiobutton.Enabled = $true
				$powershell_Empty_Scheduled_Task_radiobutton.Visible = $true
				$powershell_scheduledtask_radiobutton.Enabled = $true
				$powershell_scheduledtask_radiobutton.Visible = $true
				
				
				
			}
		}
	}
}

$powershell_package_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_open_package_directory_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version.text
	
	Invoke-Item "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\"
}

$package_ScheduledTask_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_ScheduledTask_create_scripts_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script;
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script; $RegisterDetectionroot = "Intune_" + $config_customername
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version.text
	
	if (($powershell_scheduledtask_radiobutton.Checked -eq $true) -and ($package_scheduled_task_WingetID_textbox.text -like $null))
	{
		[void][System.Windows.Forms.MessageBox]::Show('You need to fill the WingetID textbox', 'Please select WingetID')
		
	}
	else {
		if ($powershell_Empty_Scheduled_Task_radiobutton.Checked -eq $true)
		{
				
				
				$ScheduledTaskFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/12/2023 6:20 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	"!!ps1name!!"
	===========================================================================
	.DESCRIPTION
		A description of the file.
#>

#App Params
$package_scheduledTask_name  = "!!package_scheduledTask_name!!"
$package_scheduledTask_version = "!!package_scheduledTask_version!!"
#Customer vars
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$package_scheduledTask_name_$package_scheduledTask_version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$package_scheduledTask_name"
$excode = $null;
#create log directory in programdata when needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Create registry key when needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application key in registry when needed
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  This is saved in $logdir. Also used in EventViewer
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	######### PLEASE Place action here!!!
	######### Please try to end your action with -ErrorAction Stop
	######### Begin here
	
	
	
	
	
	
	
	
	
	
	###### End here

	
	#-ErrorAction Stop
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}


### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs")
{
	if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) { remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false }
	copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}






		
'@
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!ps1name!!", "scheduledTask_$package_scheduledTask_name.ps1")
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_name!!", $package_scheduledTask_name)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_version!!", $package_scheduledTask_version)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!logdir!!", $config_logfoldertarget)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
				
				
				
				$ScheduledTaskFile | Out-File  "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\scheduledTask_$package_scheduledTask_name.ps1" -Force -Confirm:$false -ErrorAction SilentlyContinue
				$package_ScheduledTask_output_textbox1.AppendText("Template script to be scheduled created")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Please search in script for: 'Begin here'")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Place Powershell command's to be run there.")
				
			}
			else
			{
				##### Here Script to create script to create Winget Update task
			}
		}
		$package_scheduledTask_Edit_script_button1.Enabled = $true
		$package_scheduledTask_Edit_script_button1.Visible = $true
		$package_scheduledtasK_option_startup_checkbox1.Enabled = $true
		$package_scheduledtasK_option_startup_checkbox1.Visible = $true
		$package_scheduledtasK_option_weekly_checkbox1.Enabled = $true
		$package_scheduledtasK_option_weekly_checkbox1.Visible = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Enabled = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Visible = $true
	}
	


$package_scheduledTask_Edit_script_button1_Click={
	#TODO: Place custom script here
	
}

$package_scheduledtasK_option_startup_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_createIntunewin_scripts_button1_Click={
	#TODO: Place custom script here
	
}

$windowsFirewallToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$config_InstallRequriedPSmodules_Click={
	#TODO: Place custom script here
	$config_install_required_ps_modules = @'
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

Write-Host "Script will install Evergreen powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Evergreen) { Import-Module -Name Evergreen -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Evergreen -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Evergreen -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -PathType Leaf))
		{
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		else
		{
			Remove-Item -Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -Confirm:$false -Force
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
	}
}

$downloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$wingetToolStripMenuItem1_Click={
	#TODO: Place custom script here
	
}

$config_download_folder_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$config_downloadFolderBrowse_Click={
	#TODO: Place custom script here
	if ($config_download_folderbrowsermoderndialog2.ShowDialog() -eq 'OK')
	{
		$config_download_folder_textbox3.Text = $config_download_folderbrowsermoderndialog2.SelectedPath
	}
}

$download_winget_tab_Click={
	#TODO: Place custom script here
	
}

$download_winget_search_button1_Click={
	
	$downloadWingetSearchText = $download_winget_search_textbox5.Text
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$download_winget_output_textbox3.Text = $null
	
	$download_winget_listbox1.Items.Clear()
	$download_winget_version_listbox1.Items.Clear()
	
	
	$table_download_winget = New-Object System.Data.DataTable;
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "ID";
	$table_download_winget.Columns.Add($column_download_winget);
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "Name";
	$table_download_winget.Columns.Add($column_download_winget);
	
	

	foreach ($wsearch_l in $downloadwingetsearch)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row_download_winget = $table_download_winget.NewRow();
			$download_winget_extraStrip = $wsearch_l.substring(0, $wsearch_IdStart)
			$download_winget_extraStrip = $download_winget_extraStrip.TrimEnd()
			$row_download_winget["Name"] = $download_winget_extraStrip
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row_download_winget["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			if ($row_download_winget["ID"] -notlike $null)
			{
				$table_download_winget.Rows.Add($row_download_winget);
				$download_winget_listboxInput = $row_download_winget| Select Name,ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
				$download_winget_listbox1.Items.Add($download_winget_listboxInput)
			}
			## - Save changes to the table:
			$table_download_winget.AcceptChanges();
			
			#$download_datagridview1.DataSource = $table_download_winget
			
			#$download_winget_listboxInput = $table_download_winget | Select Name, ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
			#$download_winget_listbox1.DataSource = $download_winget_listboxInput
			
			
			
		}
		
	}
	
	
	
}

$download_winget_search_textbox5_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 

}

$download_winget_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_version_listbox1.Items.Clear()
	
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	
	
	foreach ($wsearch_55 in $downloadwingetsearchversionselected)
	{
		
		
		if (($wsearch_55 -notlike "Found*") -and ($wsearch_55 -notlike "*-*") -and ($wsearch_55 -notlike "*Version*") -and ($wsearch_55 -notlike $null) -and ($wsearch_55 -notlike "* *"))
		{
			
			$download_winget_version_listbox1.Items.Add($wsearch_55)
			
			
		}
		
	}
	
	
	
	
}

$download_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	#Write-Host $download_datagridview1.SelectedRows.Item.ToString()
}

$download_winget_version_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_download_and_add_button1.Visible = $true
	$download_winget_download_and_add_button1.Enabled = $true
}

$download_winget_download_and_add_button1_Click={
	#TODO: Place custom script here
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	$download_winget_explorer_button1.Enabled = $true
	$download_winget_explorer_button1.Visible = $true
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	if (!(Test-Path -Path $download_winget_path))
	{
		
		New-Item -ItemType Directory -Path $download_winget_path
	}
	#$downloadWingetToLib = winget download --download-directory $download_winget_path --id $winget_download_selected_id --accept-package-agreements --accept-source-agreements
	
	#$download_winget_output_textbox3.Text = $downloadWingetToLib
	#$config_downloadpath
	#Write-Host $download_winget_version_listbox1.SelectedItem
	$download_winget_selectedversion = $download_winget_version_listbox1.SelectedItem
	$download_winget_package = @'
winget download --download-directory !!@download_winget_path@!! --id !!@winget_download_selected_id@!! --accept-package-agreements --accept-source-agreements --version !!@download_winget_selectedversion@!!
'@
	$download_winget_package = $download_winget_package.Replace("!!@winget_download_selected_id@!!", $winget_download_selected_id)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_selectedversion@!!", $download_winget_selectedversion)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_path@!!", $download_winget_path)
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -PathType Leaf))
		{
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		else
		{
			Remove-Item -Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -Confirm:$false -Force
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		
		powershell_ise 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1'
	}
	
}


$download_winget_explorer_button1_Click={
	#TODO: Place custom script here
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	explorer $download_winget_path
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">548</Line>
    <Line Disabled="True">1450</Line>
    <Line Disabled="True">1452</Line>
    <Line Disabled="False">1896</Line>
    <Line Disabled="False">3330</Line>
    <Line Disabled="False">4894</Line>
    <Line Disabled="True">5646</Line>
    <Line Disabled="True">5648</Line>
    <Line Disabled="True">5754</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>