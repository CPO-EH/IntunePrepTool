<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAGdYAABnWARjRyu0AAG2oSURBVHhe7f3XcxzJuu0Jnrf7t0xbP4zZmM1D
z8O1bptr165Nt80592xRe+/Suqg1qEFCa621JDQIAiC01lprrbVKIBMaWO1fJJIEyUwWiaoii8D6
mS0ghIeHu0dmfCsiPD3+jRBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIeQM
8V/+y3/59s79xxFPUrIiImJTKIqiKIr6VBWXEpGQmh3x1dffRhyFectcuX47uWd6HZ0TOrSPrVAU
RVEU9Qmra2oDDT3jOArzlklKz47omd5AZfsoRVEURVHHVNU5juoTqKpjzOzyd9Fv2VbKXKG27xhb
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
RVEURf15RQNAURRFUWdQNAAURVEUdQZFA0BRFEVRZ1A0ABRFURR1BkUDQFEURVFnUDQAFEVRFHUG
RQNAURRFUWdQv8kALK2sYWPdmAlFURRFUZ+O9Cp+T5/UAIzP6zC9qNMcBEVRFEVRn44kfo/M6tD7
rgYgKT0rYmEb6JvRo2daSW1IURRFUdSnp14Vx/tnNzGxsvfrBiD2SUqyvB9M3AJFURRFUZ+2Jpb3
sGjArxsAQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYSQT5Z/+7f/
G5wNlQl29ckxAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	<#
	$regkeyRootCSN = "HKLM:\Software\CSN_Package"
	try
	{
		[string]$klnm = $klantnaam_textbox1.text
		[string]$ldir = $logfoldertarget_textbox2.text
		[string]$sdir = $packacgedir_textbox3.text
		
		$vvcld = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigLogDir -ErrorAction Stop
		$vvck = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigKlant -ErrorAction Stop
		$vvcsd = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigSourceDir -ErrorAction Stop
		$klantnaam_textbox1.text = $vvck.ConfigKlant
		$logfoldertarget_textbox2.text = $vvcld.ConfigLogDir
		$packacgedir_textbox3.text = $vvcsd.ConfigSourceDir
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Je hebt nog geen Klantnaam, Log en/of Source Dir opgegeven.. Ga naar Config', 'Configureren') # Casting the method to [void] suppresses the output. 
	}
	#>
	Set-Location $PSScriptRoot
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername  -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	
}


$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }

	
	$WinGetID = $wid
			$regApp1 = $WinGetID.Split(".")[1]
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
	
		$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	08/03/2023 12:15
	 Created by:   	Rink Turksma
	 Organization: 	CSN Groep B.V.
	 Filename:     	Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
$WinGetID = "!!WinGetID!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"

#Dyn vars
$regApp1 = $WinGetID.Split(".")[1]
$logfile = $(Join-Path $logdir  "$WinGetID$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget Is niet geinstalleerd" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
		$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
		$installfile = $installfile.Replace('!!logdir!!', $logdir)
		$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
		$installfile = $installfile.Replace('!!versie!!', $versie)
		if ($wlo -ne $null)
		{
		$installfile = $installfile.Replace('!!locale!!', $wlo)
		$installfile = $installfile.Replace("!!localeSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
		if ($wve -ne $null)
		{
		$installfile = $installfile.Replace('!!versionWinget!!', $wve)
		$installfile = $installfile.Replace("!!versionSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
	
	
	if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
		}
	
		
		$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
		$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
	
	
		Set-Location $PSScriptRoot
		
		
		& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
		
		Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
		$winget_output_textbox3.Text = "`nNiew package aangemaakt: `r`n"
	
		$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
		$winget_output_textbox3.AppendText("`r`n")
		$winget_output_textbox3.AppendText("Versie is: $Versie `r`n")
		$winget_output_textbox3.AppendText("Install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
		$winget_output_textbox3.AppendText("un-install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
		$winget_output_textbox3.AppendText("Detection registry is: `r`n")
		$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
		$regkeyApp = "$regkeyRoot$regApp1\"
		$regkeyApp
		$winget_output_textbox3.AppendText("$regkeyApp `r`n")
		$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
		$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName = $wingetID
			Publisher = $config_customername_textbox.Text
			AppVersion = $versie;
			reglocation = $regkeyApp
			regValue = 'Versie'
			installCMD = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD = "powershell -executionpolicy bypass -file uninstall.ps1"			
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$winget_output_textbox3.AppendText("Config.csv weggeschreven naar: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
	}
	
	

$winget_WingetID_textbox1_TextChanged={
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null) { #Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage2_Click={
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click={
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click={
	#TODO: Place custom script here
	
	#$showurl = winget show $wgid
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Expecting Winget in: C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}

		$wgid = $winget_WingetID_textbox1.text
		try
		{
			$showurl = & $winget_exe show $wgid
			foreach ($l in $showurl)
			{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
			}
		}
	catch
	{
		$showurl = winget show $wgid
		foreach ($l in $showurl)
		{
			if ($l -like "*Download Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
		
	}
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_save_button_Click={
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text

	
	$config_customerinfo += @([config_customerinfo]@{
			customername =  $c_customername
			logfoldertarget   = $c_logfoldertarget
			packagefolder	  = $c_packagefolder
			tenanturl   = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_import_csv = Import-Csv config_customerinfo.csv -ErrorAction Stop
	$config_listbox = $null;
	foreach ($cis in $config_import_csv)
	{
		Update-ListBox $config_listbox $cis.customername -Append
	}
	
	
	
}

$tabcontrol1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click={
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click={
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder;  $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
	}
	$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
	
	[string]$exe_org_path = $exe_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
		$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
		$exe_panel1.Enabled = $true
		$exe_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
	}
	$exe_open_sourcedir_button1.Enabled = $true
	$exe_open_sourcedir_button1.Visible = $true
}

$exe_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage5_Click={
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click={
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file  "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" 
	}
	

}

$exe_radiobuttonUninstallEXEPath_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click={
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click={
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click={
	#TODO: Place custom script here


	
	$exe_installFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	

	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information';  remove-item $regkeyApp  }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$exe_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	
}

$msi_buttonOpenMSIFile_Click={
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click={
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
	}
	$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
	[string]$msi_org_path = $msi_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nMSI file copy failed `r`n")
		$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
		$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
		$msi_panel1.Enabled = $true
		$msi_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
	}
	$appNaam = $msipnaam
	$versie = $msiversie
	$MSIbestand = $msi_openfiledialog1.SafeFileName
	#klant variabelen
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	#Dyn vars
	$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
	$filenaamMSILog = $appNaam + $versie + "MSI"
	$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
	$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
	$msi_OpenSourceDir_button1.Enabled = $true
	$msi_OpenSourceDir_button1.Visible = $true
}

$labelInstallParametersadj_Click={
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click={
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'

	$msi_installFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
    write-host $startPMSI
	$msilog = get-content $logfileMSI
    if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
    Else {
    foreach ($ml in $msilog) {
    if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*"){ 
    $msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
    }
    }
    write-host "Product succesvol geinstalleerd" -ForegroundColor yellow -BackgroundColor black
    write-host "Mogelijke uninstall commando is:" -ForegroundColor yellow -BackgroundColor black
    write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
    }

	
	$excode = 0
}
catch
{
	Write-Host "Installatie mislukt" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
    write-host "Zie log file v.d. MSI waarom dit niet werkt:" -ForegroundColor Red -BackgroundColor Blue
    write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "Zie wat dit betekent: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$msi_install_par_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	
}

$msi_OpenSourceDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click={
	#TODO: Place custom script here
	$msi_uninstallFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
    write-host $startPMSI
	write-host "Unistall uitevoerd" -ForegroundColor yellow -BackgroundColor black
   

	
	$excode = 0
}
catch
{
	Write-Host "Deinstallatie mislukt" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
	
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	
}

$msi_button4TestUninstallPowers_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click={
	#TODO: Place custom script here
	Clear-Host
}

$tabpage1_Click={
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click={
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Lentis"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click={
	#TODO: Place custom script here
	$config_csv_openfiledialog1.ShowDialog()
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	#Write-Host $ConfigCSVImport
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$itwnffilepath = $filepath + $itwnf
	$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
	$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
	$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
	$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
	$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
	$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
	$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
	$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD

}

$upload_IntuneWinFile_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click={
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IntuneWin32App -Force }

Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "20H2"
	write-host "We will first check if there are any apps already availeble in Intune with the same DisplayName" -ForegroundColor Green ; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green ; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be availeble in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
	
	if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		
		foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
		{
			write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
			$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
			$evtvversie = $vorigeversie.DisplayVersion
			
			if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
			else
			{
				write-host ""; Write-host "`r`n"; Write-host "`r`n"
				$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
					try
					{
						Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
					}
					catch
					{
						Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
					}
				}
			}
		}
		
		foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
		{
			$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
			$niksdoen = $response -eq "q"
			if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
			else
			{
				write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
				Write-host "We will fix superseedence for:" -ForegroundColor Green
				$vorigeversie.displayVersion
				
				$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
				$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
				if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
				Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
			}
		}
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE? ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}

$upload_dep_textbox1_TextChanged={
	#TODO: Place custom script here
	
}





$config_panel_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged={
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged={
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername 
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget ; 
			$config_packagefolder_textbox.text = $cis.packagefolder ; 
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click={
	#TODO: Place custom script here
	$config_customername_textbox.text = "'Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click={
	#TODO: Place custom script here
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_search_string = $tools_search_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe search $tools_winget_search_string
	
	}
	catch
	{
		$tools_winget_id = winget search $tools_winget_search_string
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_button_Click={
	#TODO: Place custom script here
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_show_winget.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string
		
	}
	catch
	{
		$tools_winget_id = winget show $tools_winget_show_string
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged={
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click={
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string --versions
		
	}
	catch
	{
		$tools_winget_id = winget show $tools_winget_show_string --versions
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="False">1688</Line>
    <Line Disabled="False">2568</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>