<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>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
p+oBG/ZfAAAAAElFTkSuQmCC</Preview>
  <Form>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
DGyBQQhfJLod9iCE1+WPzof/Ajxec3w6lQEA</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	Set-Location $PSScriptRoot
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {
	#TODO: Place custom script here
	
	#$showurl = winget show $wgid
	
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Expecting Winget in: C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$wgid = $winget_WingetID_textbox1.text
	try
	{
		$showurl = & $winget_exe show $wgid
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
	}
	catch
	{
		
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	}
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
		{
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	
	
	$exe_installFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}
try {
#Searches for startmenu items created the last 10 minutes
$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where {$_.LastWriteTime -ge (get-date).AddMinutes(-10)}).VersionInfo.FileName
foreach ($startmenuI in $startMenuItems) {
write-host "`r`n"
write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
write-host "`r`n"

}
}
catch {
write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow

}
try {
#Searches for Desktop items created the last 10 minutes
$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where {$_.LastWriteTime -ge (get-date).AddMinutes(-10)}).VersionInfo.FileName
foreach ($startmenuI in $startMenuItems) {
write-host "`r`n"
write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
write-host "`r`n"

}
}
catch {
write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	
	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information';  remove-item $regkeyApp  }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			$MSIbestand = $msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
    write-host $startPMSI
	$msilog = get-content $logfileMSI
    if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
    Else {
    foreach ($ml in $msilog) {
    if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*"){ 
    $msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
    }
    }
    write-host "Product installation success" -ForegroundColor yellow -BackgroundColor black
    write-host "Possible uninstall command is:" -ForegroundColor yellow -BackgroundColor black
    write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
    }

	
	$excode = 0
	
}
catch
{
	Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
    write-host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "See what this meens: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}
try {
#Searches for startmenu items created the last 10 minutes
$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where {$_.LastWriteTime -ge (get-date).AddMinutes(-10)}).VersionInfo.FileName
foreach ($startmenuI in $startMenuItems) {
write-host "`r`n"
write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
write-host "`r`n"

}
}
catch {
write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow

}
try {
#Searches for Desktop items created the last 10 minutes
$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where {$_.LastWriteTime -ge (get-date).AddMinutes(-10)}).VersionInfo.FileName
foreach ($startmenuI in $startMenuItems) {
write-host "`r`n"
write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
write-host "`r`n"

}
}
catch {
write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:



<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
    write-host $startPMSI
	write-host "Unistall done!" -ForegroundColor yellow -BackgroundColor black
   

	
	$excode = 0
}
catch
{
	Write-Host "Uninstall failed" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IntuneWin32App -Force }

Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "20H2"
	write-host "We will first check if there are any apps already availeble in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be availeble in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkName\$weblinkVersion\Output\$weblinkName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkName.intunewin"
			DisplayName   = $weblinkName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>


$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile ="!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$Name$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$Name"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{

	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun



	
	
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>


$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile ="!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$Name$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$Name"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{

	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun



	
	
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1" -force
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Displayname textbox', 'Please choose DisplayName first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget Is niet geinstalleerd" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun




'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">560</Line>
    <Line Disabled="False">1644</Line>
    <Line Disabled="False">2871</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>