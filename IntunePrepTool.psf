<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>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
f9o+u7TZa3/ZtbcEItf1YVpV+5hLFq6k3FBPT6/q6xq199C5hWsOOhfW63Db0+ydvrjj4qHtx932
R8ouuBN7AtD+YMoF0z4X2PtUbncEXLqi8v/7P+nqX/2/unT4X5Xx9X9U6s5/r/OH/qiy5kGVtz1U
QVm1C7x3dDX9hq5m5urq9XylZNxQSk65Mm7luaN6lxllFyrNeTHllnstS9eLq3U15ZpOXUhVak6h
C9i3vLY3SqvdTmYqs+iuLqek6tvz7vXsAi/gp7m+ruVWuaymW2k3C5WRW6yUm0W6djNP1937p2Tm
Kd2tm5ZfqmvXC5Rf5/aheX5fEBERY9GCaKELunkueNuV9Kl5NTpw6FtVlN/VnTuVqqio0pmzl72S
fEnjfReEu7yKwK3SJu/8/dWsShf4O73nC90RvlUAvj17RTdvZmvztoM6cuyssrNzvYSi1G9f3e0C
eIvX3q4hsAqEHd3nV3d6p7yPuwTgyNEzqqutc23ztG3vce+o3yr2lgTYurkVrbp4vVwVrQPeflR3
DSu7sDz2BKDz4WPdabmvcmela5zrgvaxv/1rffOLf9aBG236+Oq4vrjQrJLyapU1dKmy45GK7lQp
M9cF3ZsFbkM7lX4z3wXiovmxBHLzdeN2ja5lZnsJgF2lWFBa7q174Uq6Mm/XK7ekTBevuCP2u66/
ti6lZuSpuLZVFy6mKKO4Trlu/ZQbt5Xv3ic1u0KV7feUdiNXqTdc4C9tUU6Re2+XHFgVoqiiTum5
hS7JyFdBw4AqW+f3BRERMRYvugSgqMaCrwvgdT3e1fnbdx9WSkq6Ll2+ppTUDO39+hudTi3wEgA7
QrfTAlnuCD41p1opLogXetfS2SmFHheoW/XFjoM6f+GKzp27pEuXUrV77yGduprnArW1t2vm7nkV
Bb+9VSDsNLydCrfXPt+6TydOnNGnW/fr0DentW37Vzp+Mctt7wP3HvfmT9lXtnunD+52PPT2o/be
qIuPz5EAdD2aUUXbAxeIH7hOHun23QYVN7SptLpa6w/d0V9/3Klfb8rXncpylTfeU1XnkMrq2lRQ
2aS8O/UqbepxywbvvH5GfqVKqpu8I/f0vHJvnYKqDt12zxVUd6igrNIlBaXKK69Xvst2qrtHVdXW
6xKCWt2xykJphXu9THluvcsuWUjNLlFx/X1Vd/TNX5RY36FMd/SfWVirivb7yi64rdRbpbrd6Lah
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</Preview>
  <Form>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
1XfzmynCMOEiMi7w05k+QcORTpr0hmWDrNLpxFDMU7SWh7zCDYvbtumLhMiGvHl7ooki5DN6RFgg
IxSS7hFBJajZ0w4iiCCvbeAhVSDrlV2h14XQV3V0+gSGraqWmkEFCr3CILH4p/Yz4YiwfWPMXeaa
YhU7+W1WaaEWYMIIXV+spJBUZpG1F/1F4ChGHeb44FoyE3cnSBUsZp7s5Y3JNFkEGx9wiH89tJ+t
2PLb0cWXWHpj3Xnirrz4uisJXyaZPHHGUqfZV8wb09s3LN15/WDc9S8/P1c+nUzsHv7vYng7Pbqd
4J/65Nfe9aD3lXx/7Bx0p+SH/sm4f3N71OudnVwNDl6m/Wvyqvk8PDZ/vvsF/3j5A385dJ775sPL
65D8tT+tfL6bVm5r3dn443g6mt32RifH8wfrevEwu6ucHl4vzoeN6j9H46/+kz/N//p8dHz77pfL
o+63364ODq4qt1+vv/f6v7Xm3tFvle8XPzq9xo/u9cF57Td95h7c9e3L897r8/fuz+/G9+u/jtv6
4aenUbX36ds/J1894+NH4+zdLxf61/6X/t/GizE5uby4cVvul9mg3zmZmucf673epPnTrX2+vnm+
rF0fuoOnifHJ/N47uUOjT9/G9a/d495d0/27XRkffZ1g2j6/np/2jipPV8bx3YN7dz4c9Hvm4OTu
S602ff12dDHpnXysmZWbyfXHdu/lun179Tw2L4xJxcJCbvQ7B391+r1Pf1UvLgb6u19aD5WfvryP
zOObp+HiejYY/HEQTpHgBAfKn64sUgeHFR3EkUuq2ISCDTR+WI9DMTK7r1PpWoMrWeoQQcFWK1Vq
9TFjZ4yflHwrxSulkpT0SHd/OhjKjjsf9DFbmZAzuiGlzAidqOxTcjlH/vb30NBNe6LsSqNH/Mix
/8gqazIIVcGEUAZl1AuKuT4fnsK5pgwqF9ejYD+L99Rw5tljyyWDoL7szJ7YcBmwx7JlsPzR/fBf
NCN45KMzAQA=</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	<#
	$regkeyRootCSN = "HKLM:\Software\CSN_Package"
	try
	{
		[string]$klnm = $klantnaam_textbox1.text
		[string]$ldir = $logfoldertarget_textbox2.text
		[string]$sdir = $packacgedir_textbox3.text
		
		$vvcld = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigLogDir -ErrorAction Stop
		$vvck = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigKlant -ErrorAction Stop
		$vvcsd = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigSourceDir -ErrorAction Stop
		$klantnaam_textbox1.text = $vvck.ConfigKlant
		$logfoldertarget_textbox2.text = $vvcld.ConfigLogDir
		$packacgedir_textbox3.text = $vvcsd.ConfigSourceDir
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Je hebt nog geen Klantnaam, Log en/of Source Dir opgegeven.. Ga naar Config', 'Configureren') # Casting the method to [void] suppresses the output. 
	}
	#>
	Set-Location $PSScriptRoot
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername  -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	
}


$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }

	
	$WinGetID = $wid
			$regApp1 = $WinGetID.Split(".")[1]
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
	
		$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	08/03/2023 12:15
	 Created by:   	Rink Turksma
	 Organization: 	CSN Groep B.V.
	 Filename:     	Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
$WinGetID = "!!WinGetID!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"

#Dyn vars
$regApp1 = $WinGetID.Split(".")[1]
$logfile = $(Join-Path $logdir  "$WinGetID$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget Is niet geinstalleerd" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
		$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
		$installfile = $installfile.Replace('!!logdir!!', $logdir)
		$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
		$installfile = $installfile.Replace('!!versie!!', $versie)
		if ($wlo -ne $null)
		{
		$installfile = $installfile.Replace('!!locale!!', $wlo)
		$installfile = $installfile.Replace("!!localeSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
		if ($wve -ne $null)
		{
		$installfile = $installfile.Replace('!!versionWinget!!', $wve)
		$installfile = $installfile.Replace("!!versionSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
	
	
	if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
		}
	
		
		$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
		$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
	
	
		Set-Location $PSScriptRoot
		
		
		& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
		
		Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
		$winget_output_textbox3.Text = "`nNew intunewin package created: `r`n"
	
		$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
		$winget_output_textbox3.AppendText("`r`n")
		$winget_output_textbox3.AppendText("Version: $Versie `r`n")
		$winget_output_textbox3.AppendText("Install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
		$winget_output_textbox3.AppendText("un-install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
		$winget_output_textbox3.AppendText("Detection registry is: `r`n")
		$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
		$regkeyApp = "$regkeyRoot$regApp1\"
		$regkeyApp
		$winget_output_textbox3.AppendText("$regkeyApp `r`n")
		$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
		$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName = $wingetID
			Publisher = $config_customername_textbox.Text
			AppVersion = $versie;
			reglocation = $regkeyApp
			regValue = 'Versie'
			installCMD = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD = "powershell -executionpolicy bypass -file uninstall.ps1"			
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
	}
	
	

$winget_WingetID_textbox1_TextChanged={
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null) { #Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage2_Click={
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click={
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click={
	#TODO: Place custom script here
	
	#$showurl = winget show $wgid
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Expecting Winget in: C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}

		$wgid = $winget_WingetID_textbox1.text
		try
		{
			$showurl = & $winget_exe show $wgid
			foreach ($l in $showurl)
			{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
			}
		}
	catch
	{
		$showurl = winget show $wgid
		foreach ($l in $showurl)
		{
			if ($l -like "*Download Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
		
	}
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_save_button_Click={
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text

	
	$config_customerinfo += @([config_customerinfo]@{
			customername =  $c_customername
			logfoldertarget   = $c_logfoldertarget
			packagefolder	  = $c_packagefolder
			tenanturl   = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_import_csv = Import-Csv config_customerinfo.csv -ErrorAction Stop
	$config_listbox = $null;
	foreach ($cis in $config_import_csv)
	{
		Update-ListBox $config_listbox $cis.customername -Append
	}
	
	
	
}

$tabcontrol1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click={
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click={
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder;  $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
	}
	$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
	
	[string]$exe_org_path = $exe_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
		$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
		$exe_panel1.Enabled = $true
		$exe_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
	}
	$exe_open_sourcedir_button1.Enabled = $true
	$exe_open_sourcedir_button1.Visible = $true
}

$exe_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage5_Click={
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click={
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file  "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" 
	}
	

}

$exe_radiobuttonUninstallEXEPath_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click={
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click={
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click={
	#TODO: Place custom script here


	
	$exe_installFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	

	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information';  remove-item $regkeyApp  }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$exe_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	
}

$msi_buttonOpenMSIFile_Click={
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click={
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
	}
	$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
	[string]$msi_org_path = $msi_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nMSI file copy failed `r`n")
		$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
		$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
		$msi_panel1.Enabled = $true
		$msi_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
	}
	$appNaam = $msipnaam
	$versie = $msiversie
	$MSIbestand = $msi_openfiledialog1.SafeFileName
	#klant variabelen
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	#Dyn vars
	$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
	$filenaamMSILog = $appNaam + $versie + "MSI"
	$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
	$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
	$msi_OpenSourceDir_button1.Enabled = $true
	$msi_OpenSourceDir_button1.Visible = $true
}

$labelInstallParametersadj_Click={
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click={
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'

	$msi_installFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
    write-host $startPMSI
	$msilog = get-content $logfileMSI
    if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
    Else {
    foreach ($ml in $msilog) {
    if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*"){ 
    $msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
    }
    }
    write-host "Product succesvol geinstalleerd" -ForegroundColor yellow -BackgroundColor black
    write-host "Mogelijke uninstall commando is:" -ForegroundColor yellow -BackgroundColor black
    write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
    }

	
	$excode = 0
}
catch
{
	Write-Host "Installatie mislukt" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
    write-host "Zie log file v.d. MSI waarom dit niet werkt:" -ForegroundColor Red -BackgroundColor Blue
    write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "Zie wat dit betekent: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$msi_install_par_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	
}

$msi_OpenSourceDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click={
	#TODO: Place custom script here
	$msi_uninstallFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
    write-host $startPMSI
	write-host "Unistall uitevoerd" -ForegroundColor yellow -BackgroundColor black
   

	
	$excode = 0
}
catch
{
	Write-Host "Deinstallatie mislukt" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
	
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	
}

$msi_button4TestUninstallPowers_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click={
	#TODO: Place custom script here
	Clear-Host
}

$tabpage1_Click={
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click={
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Lentis"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click={
	#TODO: Place custom script here
	$config_csv_openfiledialog1.ShowDialog()
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	#Write-Host $ConfigCSVImport
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$itwnffilepath = $filepath + $itwnf
	$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
	$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
	$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
	$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
	$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
	$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
	$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
	$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD

}

$upload_IntuneWinFile_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click={
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IntuneWin32App -Force }

Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "20H2"
	write-host "We will first check if there are any apps already availeble in Intune with the same DisplayName" -ForegroundColor Green ; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green ; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be availeble in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
	
	if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		
		foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
		{
			write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
			$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
			$evtvversie = $vorigeversie.DisplayVersion
			
			if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
			else
			{
				write-host ""; Write-host "`r`n"; Write-host "`r`n"
				$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
					try
					{
						Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
					}
					catch
					{
						Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
					}
				}
			}
		}
		
		foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
		{
			$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
			$niksdoen = $response -eq "q"
			if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
			else
			{
				write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
				Write-host "We will fix superseedence for:" -ForegroundColor Green
				$vorigeversie.displayVersion
				
				$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
				$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
				if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
				Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
			}
		}
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE? ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}

$upload_dep_textbox1_TextChanged={
	#TODO: Place custom script here
	
}





$config_panel_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged={
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged={
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername 
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget ; 
			$config_packagefolder_textbox.text = $cis.packagefolder ; 
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click={
	#TODO: Place custom script here
	$config_customername_textbox.text = "'Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click={
	#TODO: Place custom script here
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_search_string = $tools_search_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe search $tools_winget_search_string
	
	}
	catch
	{
		$tools_winget_id = winget search $tools_winget_search_string
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_button_Click={
	#TODO: Place custom script here
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_show_winget.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string
		
	}
	catch
	{
		$tools_winget_id = winget show $tools_winget_show_string
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged={
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click={
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string --versions
		
	}
	catch
	{
		$tools_winget_id = winget show $tools_winget_show_string --versions
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="False">1688</Line>
    <Line Disabled="False">2568</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>