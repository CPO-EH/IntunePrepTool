<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGmQSURBVHhe7b1nWxxJvvb5vNu99mM8u8932N0v
MC/2uHFnzpyxbaZ997RTe7W81PIOOSSEAAFCOOG99yC8996DQHgJSffGHUWiEioJIQEC1f3j+l0V
lRlpKqvI+EdEZuT/EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEC/Jd//rf/1f0QcPHYk+6+Mbfer0eSmllFJuQ89f
9Iv+7LPPo/+P//1/i14q45/N//k//2dacHgcarvuoLZ7AjWd41JKKaXchtb1sBwfxTff/YilYv7Z
sObPBXKqOpBV0YbsinYppZRSerLyJXyZ5V5yGZbjhQ39KKhoWj0AOH/BN7qpf8oEAJ3Iq5ZSSinl
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
bTdBWA1yM1MRnZCFuzOmcF1R8DvOm4K3paYWbS3NiAq6htzyVgx318P/ciDq27rRUl2NnIxkxCTn
Ymp23q7n6QLZFBAz44gLM8FCZgmaS1Kx46MdNhjsaG61xy42NAi5ZU1oqC7CjZsx6OxoQ3xUiB1P
e2Rixl4fsHK9z9JTwegteiqYN8uVBfJm66lg9BY9FcybpadCeTP1VDB6i54Kf7pBAcAkJiYmTWF5
D48eLNqLu/gF8Arwh+Y987IJeOG+Sc9O2WsGnIsDuezs/D3A1OYXzMl83l7x/8B18pifs9cCsO+e
J7FFU/g2V+TiwpmLqGhlADH7VOHvWqcJSMyPf9Zsk2n2Gz8yy3Id7M+/d8/8Y/BHYrb1YOly9pGe
Rly7chHJ+ZW2aZrMz7ouHGQhzEKPB265UJ7mxWj8B1uw+8qL13iA+U9H7NX9nGc+Ay+Mu2+28+ih
+fzmGNntm/zzZh73gxfnzc8vGF2f53HB7+60yXvPfgYuy6vnH5nt2e3zRMd1mO1QwgvpFk0es1Gb
h/vH66EXF507AFx3HzywWbivvLPAnCzN/thjYr4DXry4suB35D7ZZYxk0XxHc/weDfec9ZgfG9ft
rMe9MHZpppkgwKGvqQqlt1ttmp+Vx4bw7hB+h4Sf3WFu6SLIp9frWacw9EbdC+TN1r0wfh26F4je
plMYvw5XFsibraeC0VtcWfA7rksAwPsMiaeD/iI6O+Npx1eTZZqDp/kvIg+C+wGxr27rdea5z3+R
9FryuruW5daS11335VfeJuU+bbX0WvK6y2nPg3kc3NNCCCHWDwaGL30bYFh0AoKvByEtLQ3JycnW
pKSkJ15XS6ekpCy/f1ba07TV0mvN+7y0+7TU1FS739HR0bh165bVSfP1WemVed3Tr5LXPe3kjYqK
QkJCgt3XZ30OvnK+8+qedvJ5Sq/M655emdc9vTLvyrSnaaul15LXXU7jb5by/cq0k89TemVe9/Sr
5HVPr8zrnl6Z1z39KnmflV5LXnefNz89Pf25ab4+K/0qeWlGRsbyNCfNVyePk3afvzK9Mq+T9pTX
Sa/My/Sz8jrz1rqcp7xO2j2v8/qsNF9fNq972j1vZmbm8vvV0mvJ655+kfkvkuare3rlfPf0yrzu
6VfJ655emdc9vTKve9rJm5WVtTzPSfOV/5dtbW3oHb+39gCAIwFGxafi3bffwh//+Ef86U9/8gr5
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
lNtL9wBAXQBSSimll7jcBfCq4wBoJEAppZRy+7guLQDqApBSSim3l+oCkFJKKb3QdesCUAuAlFJK
uX1cty4AXQMgpZRSbh/VBSCllFJ6oeoCkFJKKb1QtQBIKaWUXqh7AKChgKWUUkovcbkLQE8DlFJK
Kb3H5RYAPQ1QSiml9B7XpQVAAYCUUkq5vVyXawDUBSCllFJuL90DAHUBSCmllF7icheAngYopZRS
eo/r0gKgLgAppZRye7luXQAfqgtASiml3DYyAPjzn/+soYCllFJKb3LdugB0DYCUUkq5fVy3LgDd
BSCllFJuH50AQEMBSymllF7kcguAhgKWUkopvcd1aQFQACCllFJuL9UFIKWUUnqh6gKQUkopvVB1
AUgppZRe6HILQLaeBiillFJ6je4BgLoApJRSSi9xuQtAQwFLKaWU3uO6tAAoAJBSSim3l+oCkFJK
Kb1QdQFIKaWUXqhaAKSUUkov1D0A0DgAUkoppZe43AWgoYCllFJK73G5BUBDAUsppZTe47q1ADAA
+Pvf/26DACmllFJubd966y386U9/erVrAJwugA8++AAffvghPvroI+tq6bXkdXcty60lr7sbuZyn
aRu13FryuruW5daS1921LLeWvO6uZbm15HVPr3U5T9NWS68lr7trWW4ted1dy3JryevuZiy3lrzu
rmW5teR1dy3LrSWvu2tZbi153d2M5daS1921LLeWvO6uZbm15HV3LcvxlUHAK90FEBadgK+//AKR
kZGIiIhAeHj4U69rTW9UXvf0WpfzNG219FryuruW5daS1921LLeWvO7ptS7nadpq6bXkdXcty60l
r7trWW4ted1dy3JryeueXutynqatll5LXnfXstxa8rq7luXWktc9vVF53dNrXc7TtNXSa8nr7lqW
W0ted9ey3FryuqfXupynaaul15LX3ZXzo6KicPbsWaSmpLx8C0BIRCz27t6FjIwMJCUlSSmllHKL
m2IK/tDQUFN2p2No6uHLBwC7f96J1NRUxMfHSymllHKLm5iYiOvXrysAkFJKKb3JdQsA9uz6WQGA
lFJKuU1kABAcHPzyAUDn+EME3ojCV198blcYHR0tpZRSyi1ubGwsfH19kZSU+HIXATYPzSOvpALJ
iQloqK9HU2MjGhsbpJRSSrmFbW5uQlFRkX3tu3Nv7QFAQ+9ddI7OY9ik++7ctyuRUkop5da21zhw
94FJ30dT3xRah18wADh/wTd6/D7QZhbgQowcpJRSSrn9ZDneNfEI9R3DqwcABw8dSe0anLDRgpRS
Sim3t/UdQyipbFg9ABBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBP8T/+x/8Pb+Ek5WqkMu8AAAAASUVORK5CYII=</Preview>
  <Form>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
7Pz1/wEQPB/ra6YCAA==</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		else
		{
			if (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
			{
				[void][System.Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
			}
		
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	$config_tabcontrol2.Dock = 'Fill'
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Enabled = $true
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_intunewin_tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {

	$wgid = $winget_WingetID_textbox1.text

	
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
			{
				Unblock-File -Path $exe_org_path -Confirm:$false 
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_intunewin_tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	
	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	
	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:04
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Unblock-File -Path $msi_org_path -Confirm:$false
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			$MSIbestand = $msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Product installation success" -ForegroundColor Green
		write-host "Possible uninstall command is:" -ForegroundColor Green
		write-host ""
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
		write-host ""
		write-host "Please check MSIEXEC log when experiencing problems:" -ForegroundColor Green
		write-host $logfileMSI -ForegroundColor Green
	}
	
	
	$excode = 0
	
}
catch
{
	Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
	$startPMSI
	write-host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
	write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "See what this meens: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:



<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log when experiencing problems:" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	
	
	
	$excode = 0
}
catch
{
	Write-Host "Uninstall failed" -ForegroundColor Red -BackgroundColor Blue
	$startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}



'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1.Text + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$config_tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already available in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be available in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkPackageName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkPackageName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkPackageName.intunewin"
			DisplayName   = $weblinkPackageName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create extra folder in startmenu (when needed)"
  if (!(Test-Path -Path $location))
{
	
	New-Item -ItemType Directory -Path $location
}

	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!packagename!!", $weblinkPackageName)
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!packagename", $weblinkPackageName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_packagename.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force }

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget not installed" }

try
{
	
	$install = "!!WingetCommand!!"
if ($install -like "!!doe*")
{
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
			
		}
		catch
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
	}
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
		}
		catch
		{
			
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
	}
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
			
		}
		catch
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
	}
	
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
		}
		catch
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_Empty_Scheduled_Task_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}

$winget_remediations_createscripts_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile| Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Upload not yet available for Remediations.. For now use the Intune Admin Portal")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Please reopen IntunePrepTool to create more Remediations scripts")
				
				
			}
		}
		
		
	}
	
	
	
	
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
	
	
	
}

$configToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $true
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_winget_tabcontrol2.Enabled = $true
	$package_winget_tabcontrol2.Visible = $true
	$package_winget_tabcontrol2.Dock = 'Fill'
}
$scheduledTaskToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	$package_ScheduledTask_tabcontrol2.Dock = 'Fill'
	$package_ScheduledTask_tabcontrol2.Enabled = $true
	$package_ScheduledTask_tabcontrol2.Visible = $true
}


$mSIToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $true
	$package_msi_tabcontrol2.Visible = $true
	$package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $true
	$package_exe_tabcontrol2.Visible = $true
	$package_exe_tabcontrol2.Dock = 'Fill'
}

$main_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$wingetUpdateToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false

	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Dock = 'Fill'
	$Remediations_winget_tabcontrol2.Enabled = $true
	$Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Dock = 'Fill'
	$package_weblink_tabcontrol2.Visible = $true
	$package_weblink_tabcontrol2.Enabled = $true
}



$intunewinToolStripMenuItem_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	
	
	$upload_intunewin_tabcontrol2.Dock = 'Fill'
	$upload_intunewin_tabcontrol2.Enabled = $true
	$upload_intunewin_tabcontrol2.Visible = $true
	
}

$wingetSearchShowVersionToolStripMenuItem_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Enabled = $true
	$tools_winget_searchtabcontrol1.Visible = $true
	
}

$findUninstallStringsToolStripMenuItem_Click = {
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'Fill'
	$tools_uninstallstring_tabcontrol1.Enabled = $true
	$tools_uninstallstring_tabcontrol1.Visible = $true
	
}

$Weblink_intunewin_tabpage6_Click={
	#TODO: Place custom script here
	
}

$weblink_packagename_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	
}

$remediations_winget_maxversion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_remediations_maxversion_checkbox_CheckedChanged={
	#TODO: Place custom script here
	
}

$remediate_winget_version_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_wingetid_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$remadiations_winget_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$remediations_winget_upload_button1_Click={
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				
				
			
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				
			
				
				$encoding = [System.Text.Encoding]::UTF8
				$bytes = $encoding.GetBytes($remediate_detectFile)
				$Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
				$Bytes2 = $encoding.GetBytes($remediate_remediateFile)
				$Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
				$UploadRemediationsFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/5/2023 3:38 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	upload.ps1
	===========================================================================
	.DESCRIPTION
		Part of IntunePrepTool
		https://github.com/rink-turksma/IntunePrepTool
		Upload Remediations to Intune
#>
	Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
	if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
	else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
	$displayName = "!!displayName!!"
	$publisher = "!!publisher!!"
	$detectionScriptContent = '!!detectionScriptContent!!'
	$remediationScriptContent = '!!remediationScriptContent!!'
	$tenantID = "!!tenantid!!"
	$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"; $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	$MsalToken = Get-MsalToken -TenantId $tenantID -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
	$uri = "https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts"
	$createdPolicy = Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{ Authorization = $MsalToken.CreateAuthorizationHeader() } -ContentType 'application/json'
	Write-Host "Remediationa policy created successfully with ID: $($createdPolicy.id)" -ForegroundColor Green
	Write-Host "Please assign and schedule with MS Intune Admin console" -ForegroundColor Green
	
'@
				$displayName = $winget_remediations_name_textbox1.Text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!publisher!!", $config_customername)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!displayName!!", $displayName)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!detectionScriptContent!!", $Encoded_remediate_detectFile)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!remediationScriptContent!!", $Encoded_remediate_remediateFile )
				$tenatURL = $upload_tenantURL_textbox.text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!tenantid!!", $tenatURL)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"
				}
				$UploadRemediationsFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1" -Force
				$remadiations_winget_textbox2.AppendText("Created Upload.ps1")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule")
				
				if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					
					
					
					powershell_ise -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
				}
			}
		}
	}
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
}

$remediations_winget_open_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
	$remediate_winget_version = $remediate_winget_version_textbox1.Text
	Invoke-Item "$config_packagefolder\$winget_remediations_name\$remediate_winget_version"
}

$powershell_scheduledtask_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	if ($powershell_scheduledtask_radiobutton.Checked -eq $true)
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $true
		$package_scheduled_task_WingetID_textbox.Visible = $true
		$package_scheduled_task_WingetID_label3.Enabled = $true
		$package_scheduled_task_WingetID_label3.Visible = $true
		$package_ScheduledTask_create_scripts_button1.Enabled = $true
		$package_ScheduledTask_create_scripts_button1.Visible = $true
		
		
	}
	else
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $false
		$package_scheduled_task_WingetID_textbox.Visible = $false
		$package_scheduled_task_WingetID_label3.Enabled = $false
		$package_scheduled_task_WingetID_label3.Visible = $false
	
	}
}

$powershell_Empty_Scheduled_Task_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	$package_ScheduledTask_create_scripts_button1.Enabled = $true
	$package_ScheduledTask_create_scripts_button1.Visible = $true
}



$package_scheduledtasK_option_weekly_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
	{
		$package_scheduledtask_combobox1.Enabled = $true
		$package_scheduledtask_combobox1.Visible = $true
		$package_scheduledtask_time_combobox1.Enabled = $true
		$package_scheduledtask_time_combobox1.Visible = $true
		$package_scheduledtask_am_radiobutton1.Enabled = $true
		$package_scheduledtask_am_radiobutton1.Visible = $true
		$package_scheduledtask_pm_radiobutton.Enabled = $true
		$package_scheduledtask_pm_radiobutton.Visible = $true
		
	}
	else
	{
		$package_scheduledtask_combobox1.Enabled = $false
		$package_scheduledtask_combobox1.Visible = $false
		$package_scheduledtask_time_combobox1.Enabled = $false
		$package_scheduledtask_time_combobox1.Visible = $false
		$package_scheduledtask_am_radiobutton1.Enabled = $false
		$package_scheduledtask_am_radiobutton1.Visible = $false
		$package_scheduledtask_pm_radiobutton.Enabled = $false
		$package_scheduledtask_pm_radiobutton.Visible = $false
	
	}
}

$package_scheduledtask_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$datetimepicker1_ValueChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_time_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_am_radiobutton1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_pm_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_winget_max_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_label3_Click={
	#TODO: Place custom script here
	
}

$package_scheduled_Task_maxVersion_label4_Click={
	#TODO: Place custom script here
	
}

$powershell_create_package_dir_button1_Click={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	else
	{
		if ($powershell_package_name_textbox1.Text -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package name textbox', 'Select Package Name')
		}
		else
		{
			if ($powershell_package_version_textbox1.Text -like $null)
			{
				[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package version textbox', 'Select Package Version')
			}
			else
			{
				$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
				$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
				$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
				$package_scheduledTask_name = $powershell_package_name_textbox1.Text
				$package_scheduledTask_version = $powershell_package_version_textbox1.text
			
			
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"
				}
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"
				}
				$package_ScheduledTask_output_textbox1.Text = "`nNew package direcotory created: `r`n"
				$package_ScheduledTask_output_textbox1.AppendText("$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$powershell_open_package_directory_button1.Enabled = $true
				$powershell_open_package_directory_button1.Visible = $true
				$powershell_Empty_Scheduled_Task_radiobutton.Enabled = $true
				$powershell_Empty_Scheduled_Task_radiobutton.Visible = $true
				$powershell_scheduledtask_radiobutton.Enabled = $true
				$powershell_scheduledtask_radiobutton.Visible = $true
				
				
				
			}
		}
	}
}

$powershell_package_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_open_package_directory_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version.text
	
	Invoke-Item "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\"
}

$package_ScheduledTask_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_ScheduledTask_create_scripts_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script;
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script; $RegisterDetectionroot = "Intune_" + $config_customername
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version.text
	
	if (($powershell_scheduledtask_radiobutton.Checked -eq $true) -and ($package_scheduled_task_WingetID_textbox.text -like $null))
	{
		[void][System.Windows.Forms.MessageBox]::Show('You need to fill the WingetID textbox', 'Please select WingetID')
		
	}
	else {
		if ($powershell_Empty_Scheduled_Task_radiobutton.Checked -eq $true)
		{
				
				
				$ScheduledTaskFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/12/2023 6:20 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	"!!ps1name!!"
	===========================================================================
	.DESCRIPTION
		A description of the file.
#>

#App Params
$package_scheduledTask_name  = "!!package_scheduledTask_name!!"
$package_scheduledTask_version = "!!package_scheduledTask_version!!"
#Customer vars
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$package_scheduledTask_name_$package_scheduledTask_version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$package_scheduledTask_name"
$excode = $null;
#create log directory in programdata when needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Create registry key when needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application key in registry when needed
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  This is saved in $logdir. Also used in EventViewer
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	######### PLEASE Place action here!!!
	######### Please try to end your action with -ErrorAction Stop
	######### Begin here
	
	
	
	
	
	
	
	
	
	
	###### End here

	
	#-ErrorAction Stop
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}


### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs")
{
	if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) { remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false }
	copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}






		
'@
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!ps1name!!", "scheduledTask_$package_scheduledTask_name.ps1")
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_name!!", $package_scheduledTask_name)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_version!!", $package_scheduledTask_version)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!logdir!!", $config_logfoldertarget)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
				
				
				
				$ScheduledTaskFile | Out-File  "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\scheduledTask_$package_scheduledTask_name.ps1" -Force -Confirm:$false -ErrorAction SilentlyContinue
				$package_ScheduledTask_output_textbox1.AppendText("Template script to be scheduled created")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Please search in script for: 'Begin here'")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Place Powershell command's to be run there.")
				
			}
			else
			{
				##### Here Script to create script to create Winget Update task
			}
		}
		$package_scheduledTask_Edit_script_button1.Enabled = $true
		$package_scheduledTask_Edit_script_button1.Visible = $true
		$package_scheduledtasK_option_startup_checkbox1.Enabled = $true
		$package_scheduledtasK_option_startup_checkbox1.Visible = $true
		$package_scheduledtasK_option_weekly_checkbox1.Enabled = $true
		$package_scheduledtasK_option_weekly_checkbox1.Visible = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Enabled = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Visible = $true
	}
	


$package_scheduledTask_Edit_script_button1_Click={
	#TODO: Place custom script here
	
}

$package_scheduledtasK_option_startup_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_createIntunewin_scripts_button1_Click={
	#TODO: Place custom script here
	
}

$windowsFirewallToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$config_InstallRequriedPSmodules_Click={
	#TODO: Place custom script here
	$config_install_required_ps_modules = @'
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

Write-Host "Script will install Evergreen powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Evergreen) { Import-Module -Name Evergreen -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Evergreen -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Evergreen -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -PathType Leaf))
		{
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		else
		{
			Remove-Item -Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -Confirm:$false -Force
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
	}
}

$downloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$wingetToolStripMenuItem1_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">547</Line>
    <Line Disabled="False">1887</Line>
    <Line Disabled="False">3296</Line>
    <Line Disabled="False">4860</Line>
    <Line Disabled="True">5543</Line>
    <Line Disabled="True">5545</Line>
    <Line Disabled="True">5651</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>