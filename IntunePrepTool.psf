<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>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
lACAiIjogxIAEBERfVACACIiog9KAEBERPRBPRoA5udmNTMzg4iIiG9YjwSA+ucj6uwd0tjoiLNB
REREfHMODw+7LfS/5G8KAF19wxoeGtTgICIiIr5p3RX6X/I3BwC7AncrRkRERO+VAICIiOiDEgAQ
ERF9UAIAIiKiD0oAQERE9EEJAIiIiD4oAQAREdEHJQAgIiL6oAQAREREH/Q3BYDu/mGNjSyuBBER
Ed8ebf1ufZ0A0NA2oqedI3reM+ysABEREd8ebf1+3DGiBx0rDABxCSmRPVPSQ7PAA5MabHJARETE
t09bxx91Tailf+blASA6Nv7qyIKctICIiIhvt7b4d4/q5QEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP70pz/9
6f8HXDeOnvchHKUAAAAASUVORK5CYII=</Preview>
  <Form>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
pUbk4hZXSwiT3Kwv/up9+H+f9fGBfYYBAA==</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	Set-Location $PSScriptRoot
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	
	$WinGetID = $wid
	$regApp1 = $WinGetID.Split(".")[1]
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	
	$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	08/03/2023 12:15
	 Created by:   	Rink Turksma
	 Organization: 	CSN Groep B.V.
	 Filename:     	Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
$WinGetID = "!!WinGetID!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"

#Dyn vars
$regApp1 = $WinGetID.Split(".")[1]
$logfile = $(Join-Path $logdir  "$WinGetID$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget Is niet geinstalleerd" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
	$installfile = $installfile.Replace('!!logdir!!', $logdir)
	$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$installfile = $installfile.Replace('!!versie!!', $versie)
	if ($wlo -ne $null)
	{
		$installfile = $installfile.Replace('!!locale!!', $wlo)
		$installfile = $installfile.Replace("!!localeSelected!!", $true)
	}
	else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
	if ($wve -ne $null)
	{
		$installfile = $installfile.Replace('!!versionWinget!!', $wve)
		$installfile = $installfile.Replace("!!versionSelected!!", $true)
	}
	else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
	
	
	if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
	}
	
	
	$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
	$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
	$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
	$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
	
	
	Set-Location $PSScriptRoot
	
	
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	$winget_output_textbox3.Text = "`nNew intunewin package created: `r`n"
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $wingetID
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {
	#TODO: Place custom script here
	
	#$showurl = winget show $wgid
	
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Expecting Winget in: C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$wgid = $winget_WingetID_textbox1.text
	try
	{
		$showurl = & $winget_exe show $wgid
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
	}
	catch
	{
		
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	}
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
	}
	$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
	
	[string]$exe_org_path = $exe_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
		$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
		$exe_panel1.Enabled = $true
		$exe_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
	}
	$exe_open_sourcedir_button1.Enabled = $true
	$exe_open_sourcedir_button1.Visible = $true
}

$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	
	
	$exe_installFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	
	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information';  remove-item $regkeyApp  }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
	}
	$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
	[string]$msi_org_path = $msi_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
		$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
		$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
		$msi_panel1.Enabled = $true
		$msi_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
	}
	$appNaam = $msipnaam
	$versie = $msiversie
	$MSIbestand = $msi_openfiledialog1.SafeFileName
	#klant variabelen
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	#Dyn vars
	$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
	$filenaamMSILog = $appNaam + $versie + "MSI"
	$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
	$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
	$msi_OpenSourceDir_button1.Enabled = $true
	$msi_OpenSourceDir_button1.Visible = $true
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
    write-host $startPMSI
	$msilog = get-content $logfileMSI
    if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
    Else {
    foreach ($ml in $msilog) {
    if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*"){ 
    $msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
    }
    }
    write-host "Product installation success" -ForegroundColor yellow -BackgroundColor black
    write-host "Possible uninstall command is:" -ForegroundColor yellow -BackgroundColor black
    write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
    }

	
	$excode = 0
}
catch
{
	Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
    write-host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "See what this meens: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
    write-host $startPMSI
	write-host "Unistall done!" -ForegroundColor yellow -BackgroundColor black
   

	
	$excode = 0
}
catch
{
	Write-Host "Uninstall failed" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	$config_csv_openfiledialog1.ShowDialog()
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	#Write-Host $ConfigCSVImport
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$itwnffilepath = $filepath + $itwnf
	$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
	$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
	$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
	$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
	$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
	$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
	$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
	$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
	
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IntuneWin32App -Force }

Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "20H2"
	write-host "We will first check if there are any apps already availeble in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be availeble in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE? ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}

$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "'Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_search_string = $tools_search_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe search $tools_winget_search_string
	
	}
	catch
	{
		$tools_winget_id = winget search $tools_winget_search_string
		
		
	}
	#>
	$tools_winget_search_string = $tools_search_winget_textbox.text
	$tools_winget_id = winget search $tools_winget_search_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string --versions
		
	}
	catch
	{
	#>
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkName\$weblinkVersion\Output\$weblinkName.intunewin"
	
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkName.intunewin"
			DisplayName   = $weblinkName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>


$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile ="!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$Name$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$Name"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{

	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun



	
	
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>


$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile ="!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$Name$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$Name"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{

	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun



	
	
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1" -force
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">755</Line>
    <Line Disabled="False">1722</Line>
    <Line Disabled="False">2659</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>