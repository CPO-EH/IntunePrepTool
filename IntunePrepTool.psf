<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAGdYAABnWARjRyu0AAFhuSURBVHhe7d3XcxtZoy3283Ie/eBX/wW2n11l
17XLvi676pTL5XPuueeLEz9pNJoZaZSzSFEkRYo555xzzjnnnHPOOQeAJMjlvRuERFEQSYVhz5Dr
V7WGCI3uRhODvQC2uv+JiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiM++d//uerT56/CI5OyAgOjkxgGIZh
GOYPmhCRmMTM4K+//T74cJj/sDv3H8V3TayhY3wNbaPLDMMwDMP8gdM1uYHajhEcDvMfFpeSHdw9
tYGKthGGYRiGYQ5T2TGGqk9IZfuoEmP3nZbKjs957Jiy3uUi7aNLpxeAiJjk4O7J9TcrXNmun4kS
edlw/c39DMMwDHPxU1Tfh7zqbuTX9Jw9YvqSxgEUi3zsY+X0xQ39KGka/Pjl1nSjsK5Pv+5izG4d
mv/YAiAG+rZhVLYOip+iRbROiCYxjYr2aVQd2SgMwzAMc1EjP02XNg8hs7RNDKq9yK8VA+wZU1jX
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
YRjmjx05+M9t4vQCQERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERER0Kf3TP/3/OkClS3r5h+QAAAAASUVORK5C
YII=</Preview>
  <Form>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
2AGDEL2PfDfsQQSvy2/d9/8DdVqkbSGvAQA=</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	Set-Location $PSScriptRoot
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {
	#TODO: Place custom script here
	
	#$showurl = winget show $wgid
	
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Expecting Winget in: C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$wgid = $winget_WingetID_textbox1.text
	try
	{
		$showurl = & $winget_exe show $wgid
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
	}
	catch
	{
		
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	}
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
		{
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	
	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	
	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:04
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			$MSIbestand = $msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Product installation success" -ForegroundColor yellow -BackgroundColor black
		write-host "Possible uninstall command is:" -ForegroundColor yellow -BackgroundColor black
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
	}
	
	
	$excode = 0
	
}
catch
{
	Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
	$startPMSI
	write-host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
	write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "See what this meens: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:



<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor yellow -BackgroundColor black
	
	
	
	$excode = 0
}
catch
{
	Write-Host "Uninstall failed" -ForegroundColor Red -BackgroundColor Blue
	$startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}



'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IntuneWin32App -Force }

Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already availeble in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be availeble in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkName\$weblinkVersion\Output\$weblinkName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkName.intunewin"
			DisplayName   = $weblinkName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>


$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$Name$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$Name"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>


$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$Name$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$Name"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Displayname textbox', 'Please choose DisplayName first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget Is niet geinstalleerd" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">560</Line>
    <Line Disabled="False">1894</Line>
    <Line Disabled="False">3203</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>