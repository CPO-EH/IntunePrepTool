<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAIeNSURBVHhe7f1Vex1Ll6aN9m/Z1/cr9sm+rm8f
fPu0u6qrq6u6Xqp6GRaD11qGZWaQQRZZzMzMzMzMzEx+9hgxldKU1rQl2ZI8pfnc9qOZkRkZyREj
IkZG/jdCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhFxA/vH//D//vzAP74Awd0/fsFcePhRFURRFnUNpWf7s
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
ZcsmHUdaWpzHmGTYK2trZl2VpmNJwyu78/a2o9uwtqXp269jSePqDTy/uCTHo/FW7NZZMeut6LRu
w4Rl+c6vlYaGNf5eeC/uxtYW1tdlmaxv9nNnvm0btl+jpUXMzc2Zba3Kciut/ZJzJOd1anoaq3Iu
rHRsadr20do3TWdtbVVugjlzHVZX1/BW/i3J+ouSztrO+tavLrfSs5fOm5ObaHJKHvTZOQfr6XZ0
ev86lnQ/rTiWVmW/9Hd93bZs71fvKeu875cey4w87Muyn7ruxuamzJdrumzblzVJw0p/fWMDG5KW
laa1/Vl5YJZlWpeZbWlca3p33rrc8xtmma533mSdg08h61x+Kul1c1VtyvPwKbUl+dyn0vb2tsvq
7VvJ1d+n7S1MzS2ifXT1+AZASmqqPNirpmBSaSZblpUM76BI5Gfnoamt12SqWrgNdDYjKyMfs8tr
mBjqRFZBGRbnxhEfHoCw2GRMzMyZ2qEWEOOTUxjtbcKLZy9Q3dQtBcuMFPATUrgtYH5+fp82NtdR
nBKDe7fvIimrTArKeYyOTUg6tgJRC8YZsYBnxZgoyUhHQ2ufqY2osaIF5frmFroaypCckIcVeVDs
jZmlpRXMjvXC8+FDvAmJw9jUHBbUgBCjZaC7GekJWRifWZCa5ySWpBCdmZKazrQU0rLtWSkM1TjR
An5O5g+NTJgHcWVpCrnJORieEOt0fga1JUVo6hiQQl0NnCVMS01lcmZWCrplMTz03KkRsorF2Sm0
tXZgWvZ5QuarQWC/r6qNzTXkxIbh5vUHqGrpx7oYY0uyD6ZmLMc8My8G2vKiGF9qzMwgJSIKJeVN
ch5m5dxOoTSvAPWNbVKYz0iNWgwqKTC01qjHPKM1KDkmPZ/2xpcWKgOdNbh77QZS8itl/2bkONfk
PMygu6kGudnlsj25P2Tbui/GYNsxWLa2N+SaZKC+vgnZyVmYmte0Z5CTmIr+UbFM5T7Q6zgr13n7
7TZqCrOQX1CHze3N3TRUaxtbGGyrxeMbtxGRmIf17beYHe3B65ce6B7Rc7Uk50eMUDmOieEuJEUm
YXx+xRQKC1PDyC+txuRwD17euYvAqDQsb2xjfrwfGXKdZmW9GbGQ1chcXF7F9pac44QENLYOS8a2
Z3CeFzkyns5KB42Rs5Yjo8RVdNAYOmsdNEjOUo4MEleRI4Non6RSfmIGgD7kzdXFiE2Ixu0fLiM8
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
cTTvXWHGeX8cK/y+OI7mXYQ4Vvhj4zia9yFxDobfF8fRvA+JY4XPIo6jee8Kn0UcR/M+++wz+f0M
7d19x28BqOsaw5UrVxAeHo6kpCQkJCRQFEVRFHUOlJKSAm8vTzQ0t6N3evt4BkBt5yiuX7+B+Ph4
k1BycjJFURRFUedAaWlpCA4KRGNLx4cZAD//fB2xsbEmMW0FoCiKoijK+ZWamorAAP+PNwA0scTE
RIqiKIqizoG05f7DDYCOUfz000+IjIxAcrJYFIkJFEVRFEWdA6WKAfDG2xONzW3HMwDGV4DmvhnU
y4o9/UMYGB5D/9AoRVEURVHnQFpud3T1Ymh8Fh1jq0czALx9A00LgK7QN7ON7slNdE1uUBRFURR1
XjSxYV7/6xxfM9NdIwuHGwDPXrgnTSxtGmuBoiiKoqjzLS38OwYmDzcACCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEOLc/Lf/9v8HhpiIO20r9q0AAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	[string]$downloadpath
	
}



$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		else
		{
			if (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
			{
				[void][System.Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
			}
		
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	$config_tabcontrol2.Dock = 'Fill'
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Enabled = $true
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_intunewin_tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {

	$wgid = $winget_WingetID_textbox1.text

	
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	[string]$c_downloadfolder = $config_download_folder_textbox3.Text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
			downloadpath    = $c_downloadfolder;
		})



$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
			{
				Unblock-File -Path $exe_org_path -Confirm:$false 
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_intunewin_tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$argList2 = $exe_parsUnInstall_textbox1.text
		if ($exe_openfiledialog1.SafeFileName -like "*.exe")
		{
			
			$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
		}
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	
	$exe_parsUnInstall_textbox1.Enabled = $true
	$exe_parsUnInstall_textbox1.Visible = $true
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true


	
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $true
		$exe_parsUnInstall_textbox1.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $true
		$exe_parsUnInstall_textbox1.Visible = $true
		$argList2 = $exe_parsUnInstall_textbox1.text
		if ($exe_openfiledialog1.SafeFileName -like "*.exe")
		{
			
			$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
		}
		
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	

}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		
	}
	$exe_labelVoorbeeldUninstall.Visible = $true
	$exe_labelVoorbeeldUninstall.Enabled = $true
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	$exe_UnlInstallParameters.Visible = $true
	$exe_UnlInstallParameters.Enabled = $true
	$exe_radiobuttonUninstallEXEPath.Visible = $true
	$exe_radiobuttonUninstallEXEPath.Enabled = $true
	$exe_install_test_button1.Enabled = $true
	$exe_install_test_button1.Visible = $true
	$exe_radiobuttonGebruikZelfdeEXEAlsB.Enabled = $true
	$exe_radiobuttonGebruikZelfdeEXEAlsB.Visible = $true
	$exe_radiobutton3.Enabled = $true
	$exe_radiobutton3.Visible = $true

	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$exeFile = "!!ExeFile!!"
$exeParameters = "!!ExeParams!!" ## Check EXE Params.. 
# Customer variables
$logDir = "!!LogDir!!"
$registerDetectionRoot = "!!RegisterDetectionRoot!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
try
{
	Start-Process -FilePath $exeFile -ArgumentList $exeParameters -ErrorAction Stop -wait
	write-host "Installation completed of $exeFile" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
	write-host "Error executing $exeFile" -ForegroundColor Yellow
	Write-Host "installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:









Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	$exe_installFile = $exe_installFile.Replace('"!!AppName!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!LogDir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionRoot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!Version!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!ExeFile!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!ExeParams!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Unblock-File -Path $msi_org_path -Confirm:$false
				$MSINewname = $msi_openfiledialog1.FileName
				
				$MSINewname = $MSINewname.Split("\")[$MSINewname.Split("\").Count - 1]
				$MSINewname = $MSINewname.Replace(" ", "")
				$MSIbestand = "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname"
				#Write-Host $MSIbestand
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			 #$msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v $logfileMSI /i $MSINewname"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### This function handles the detection method in the registry.
	### It will create a key in the registry with the name of the application. 
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
#Start; Write Log file
Start-Transcript -Path $logfile
Set-Location $PSScriptRoot
try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Can't read MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Script started i.cmd" -ForegroundColor Green
		write-host "Possible uninstall command is:" -ForegroundColor Green
		write-host ""
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
		write-host ""
		Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
		write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green

	}
	
	if ($msiuninstallcode -eq $null) { $excode = 1 ; write-error "Can't find uninstall code in MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
    Else
    {
        write-host "Script started i.cmd" -ForegroundColor Green
        write-host "Possible uninstall command is:" -ForegroundColor Green
        write-host ""
        write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
        write-host ""
        Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
        write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
        $excode = 0
    }
   
	
	
}
catch
{
    Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "MSIEXEC Log start:.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
    $MSILOGS = get-content $logfileMSI 
    $MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue


    $excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}

write-host "Possible uninstall command is:" -ForegroundColor Green
write-host ""
write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
write-host ""

### Place extra actions here:







<#----Enf of extra actions--#>
#Stop; Write Log file
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { fDetectionInRegistry -succes $true 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1.Text + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$config_tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already available in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be available in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
<#
	.SYNOPSIS
		Sets the emulation of the WebBrowser control for the application.
	
	.DESCRIPTION
		Sets the emulation of the WebBrowser control for the application using the installed version of IE.
		This improves the WebBrowser control compatibility with newer html features.
	
	.PARAMETER ExecutableName
		The name of the executable E.g. PowerShellStudio.exe.
		Default Value: The running executable name.
	
	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation

	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation PowerShell.exe
#>
function Set-WebBrowserEmulation
{
	param
	(
		[ValidateNotNullOrEmpty()]
		[string]
		$ExecutableName = [System.IO.Path]::GetFileName([System.Diagnostics.Process]::GetCurrentProcess().MainModule.FileName)
	)
	
	#region Get IE Version
	$valueNames = 'svcVersion', 'svcUpdateVersion', 'Version', 'W2kVersion'
	
	$version = 0;
	for ($i = 0; $i -lt $valueNames.Length; $i++)
	{
		$objVal = [Microsoft.Win32.Registry]::GetValue('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer', $valueNames[$i], '0')
		$strVal = [System.Convert]::ToString($objVal)
		if ($strVal)
		{
			$iPos = $strVal.IndexOf('.')
			if ($iPos -gt 0)
			{
				$strVal = $strVal.Substring(0, $iPos)
			}
			
			$res = 0;
			if ([int]::TryParse($strVal, [ref]$res))
			{
				$version = [Math]::Max($version, $res)
			}
		}
	}
	
	if ($version -lt 7)
	{
		$version = 7000
	}
	else
	{
		$version = $version * 1000
	}
	#endregion
	
	[Microsoft.Win32.Registry]::SetValue('HKEY_CURRENT_USER\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION', $ExecutableName, $version)
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	}
	catch
	{
		#Error handling here
	}
	
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			$config_download_folder_textbox3.Text = $cis.downloadpath
			
			if ($cis.downloadpath -like 'Enter UNC or local path for the download Package folder. (Evergreen / Winget)')
			{
				#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
				[void][System.Windows.Forms.MessageBox]::Show('Download folder was added to config. Please use this tool or edit "C:\Program Files\IntunePrepTool\config_customerinfo.csv" ', 'Please add Download folder') # Casting the method to [void] suppresses the output. 
			}
			
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
			try
			{
				New-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
	$config_download_folder_textbox3.Text = "Enter UNC or local path for the download Package folder. (Evergreen / Winget)"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkPackageName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkPackageName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkPackageName.intunewin"
			DisplayName   = $weblinkPackageName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create extra folder in startmenu (when needed)"
  if (!(Test-Path -Path $location))
{
	
	New-Item -ItemType Directory -Path $location
}

	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!packagename!!", $weblinkPackageName)
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!packagename", $weblinkPackageName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_packagename.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force }

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget not installed" $excode = 1 }
else { $excode = 0 }

try
{
	
	$install = "!!WingetCommand!!"
if ($install -like "!!doe*")
{
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		<#
		try
		{
			#install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
			
		}
		catch
		{
			
		}
		#>
	}
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale

		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
		}
		catch
		{
			
			
		}
		#>
	}
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
	{

		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
			
		}
		catch
		{
			
		}
		#>
	}
	
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
		}
		catch
		{
			
		}
		#>
	}
}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	#$excode = 0;
	
}
catch
{
	#$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error';  }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_Empty_Scheduled_Task_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}

$winget_remediations_createscripts_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile| Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Upload not yet available for Remediations.. For now use the Intune Admin Portal")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Please reopen IntunePrepTool to create more Remediations scripts")
				
				
			}
		}
		
		
	}
	
	
	
	
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
	
	
	
}

$configToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $true
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_winget_tabcontrol2.Enabled = $true
	$package_winget_tabcontrol2.Visible = $true
	$package_winget_tabcontrol2.Dock = 'Fill'
}
$scheduledTaskToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	$package_ScheduledTask_tabcontrol2.Dock = 'Fill'
	$package_ScheduledTask_tabcontrol2.Enabled = $true
	$package_ScheduledTask_tabcontrol2.Visible = $true
}


$mSIToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $true
	$package_msi_tabcontrol2.Visible = $true
	$package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $true
	$package_exe_tabcontrol2.Visible = $true
	$package_exe_tabcontrol2.Dock = 'Fill'
}

$main_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$wingetUpdateToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false

	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Dock = 'Fill'
	$Remediations_winget_tabcontrol2.Enabled = $true
	$Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Dock = 'Fill'
	$package_weblink_tabcontrol2.Visible = $true
	$package_weblink_tabcontrol2.Enabled = $true
}



$intunewinToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	
	
	$upload_intunewin_tabcontrol2.Dock = 'Fill'
	$upload_intunewin_tabcontrol2.Enabled = $true
	$upload_intunewin_tabcontrol2.Visible = $true
	
}

$wingetSearchShowVersionToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Enabled = $true
	$tools_winget_searchtabcontrol1.Visible = $true
	
}

$findUninstallStringsToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'Fill'
	$tools_uninstallstring_tabcontrol1.Enabled = $true
	$tools_uninstallstring_tabcontrol1.Visible = $true
	
}

$sourceFromWingetToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $true
	$download_tabcontrol1.Visible = $true
	$download_tabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	
}


$Weblink_intunewin_tabpage6_Click={
	#TODO: Place custom script here
	
}

$weblink_packagename_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	
}

$remediations_winget_maxversion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_remediations_maxversion_checkbox_CheckedChanged={
	#TODO: Place custom script here
	
}

$remediate_winget_version_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_wingetid_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$remadiations_winget_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$remediations_winget_upload_button1_Click={
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				
				
			
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				
			
				
				$encoding = [System.Text.Encoding]::UTF8
				$bytes = $encoding.GetBytes($remediate_detectFile)
				$Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
				$Bytes2 = $encoding.GetBytes($remediate_remediateFile)
				$Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
				$UploadRemediationsFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/5/2023 3:38 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	upload.ps1
	===========================================================================
	.DESCRIPTION
		Part of IntunePrepTool
		https://github.com/rink-turksma/IntunePrepTool
		Upload Remediations to Intune
#>
	Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
	if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
	else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
	$displayName = "!!displayName!!"
	$publisher = "!!publisher!!"
	$detectionScriptContent = '!!detectionScriptContent!!'
	$remediationScriptContent = '!!remediationScriptContent!!'
	$tenantID = "!!tenantid!!"
	$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"; $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	$MsalToken = Get-MsalToken -TenantId $tenantID -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
	$uri = "https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts"
	$createdPolicy = Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{ Authorization = $MsalToken.CreateAuthorizationHeader() } -ContentType 'application/json'
	Write-Host "Remediationa policy created successfully with ID: $($createdPolicy.id)" -ForegroundColor Green
	Write-Host "Please assign and schedule with MS Intune Admin console" -ForegroundColor Green
	
'@
				$displayName = $winget_remediations_name_textbox1.Text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!publisher!!", $config_customername)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!displayName!!", $displayName)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!detectionScriptContent!!", $Encoded_remediate_detectFile)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!remediationScriptContent!!", $Encoded_remediate_remediateFile )
				$tenatURL = $upload_tenantURL_textbox.text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!tenantid!!", $tenatURL)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"
				}
				$UploadRemediationsFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1" -Force
				$remadiations_winget_textbox2.AppendText("Created Upload.ps1")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule")
				
				if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					
					
					
					powershell_ise -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
				}
			}
		}
	}
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
}

$remediations_winget_open_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
	$remediate_winget_version = $remediate_winget_version_textbox1.Text
	Invoke-Item "$config_packagefolder\$winget_remediations_name\$remediate_winget_version"
}

$powershell_scheduledtask_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	if ($powershell_scheduledtask_radiobutton.Checked -eq $true)
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $true
		$package_scheduled_task_WingetID_textbox.Visible = $true
		$package_scheduled_task_WingetID_label3.Enabled = $true
		$package_scheduled_task_WingetID_label3.Visible = $true
		$package_ScheduledTask_create_scripts_button1.Enabled = $true
		$package_ScheduledTask_create_scripts_button1.Visible = $true
		
		
	}
	else
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $false
		$package_scheduled_task_WingetID_textbox.Visible = $false
		$package_scheduled_task_WingetID_label3.Enabled = $false
		$package_scheduled_task_WingetID_label3.Visible = $false
	
	}
}

$powershell_Empty_Scheduled_Task_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	$package_ScheduledTask_create_scripts_button1.Enabled = $true
	$package_ScheduledTask_create_scripts_button1.Visible = $true
}



$package_scheduledtasK_option_weekly_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
	{
		$package_scheduledtask_combobox1.Enabled = $true
		$package_scheduledtask_combobox1.Visible = $true
		$package_scheduledtask_time_combobox1.Enabled = $true
		$package_scheduledtask_time_combobox1.Visible = $true
		$package_scheduledtask_am_radiobutton1.Enabled = $true
		$package_scheduledtask_am_radiobutton1.Visible = $true
		$package_scheduledtask_pm_radiobutton.Enabled = $true
		$package_scheduledtask_pm_radiobutton.Visible = $true
		
	}
	else
	{
		$package_scheduledtask_combobox1.Enabled = $false
		$package_scheduledtask_combobox1.Visible = $false
		$package_scheduledtask_time_combobox1.Enabled = $false
		$package_scheduledtask_time_combobox1.Visible = $false
		$package_scheduledtask_am_radiobutton1.Enabled = $false
		$package_scheduledtask_am_radiobutton1.Visible = $false
		$package_scheduledtask_pm_radiobutton.Enabled = $false
		$package_scheduledtask_pm_radiobutton.Visible = $false
	
	}
}

$package_scheduledtask_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$datetimepicker1_ValueChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_time_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_am_radiobutton1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_pm_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_winget_max_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_label3_Click={
	#TODO: Place custom script here
	
}

$package_scheduled_Task_maxVersion_label4_Click={
	#TODO: Place custom script here
	
}

$powershell_create_package_dir_button1_Click={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	else
	{
		if ($powershell_package_name_textbox1.Text -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package name textbox', 'Select Package Name')
		}
		else
		{
			if ($powershell_package_version_textbox1.Text -like $null)
			{
				[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package version textbox', 'Select Package Version')
			}
			else
			{
				$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
				$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
				$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
				$package_scheduledTask_name = $powershell_package_name_textbox1.Text
				$package_scheduledTask_version = $powershell_package_version_textbox1.text
			
			
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"
				}
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"
				}
				$package_ScheduledTask_output_textbox1.Text = "`nNew package direcotory created: `r`n"
				$package_ScheduledTask_output_textbox1.AppendText("$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$powershell_open_package_directory_button1.Enabled = $true
				$powershell_open_package_directory_button1.Visible = $true
				$package_ScheduledTask_create_scripts_button1.Enabled = $true
				$package_ScheduledTask_create_scripts_button1.Visible = $true
				
				
				
			}
		}
	}
}

$powershell_package_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_open_package_directory_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	
	Invoke-Item "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\"
}

$package_ScheduledTask_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_ScheduledTask_create_scripts_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	$package_scheduledtask_system_panel3.Visible = $true
	$package_scheduledtask_system_panel3.Enabled = $true
	

				
				$ScheduledTaskFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	"!!ps1name!!"
	===========================================================================
	.DESCRIPTION
		Please place your script between:
        "Place your Powershell code here" and "End of your Powershell script"
        When done. Save script and close Powershell_ISE
#>
#App Params
$package_scheduledTask_name  = "!!package_scheduledTask_name!!"
$package_scheduledTask_version = "!!package_scheduledTask_version!!"
#Customer vars
$logdir = "!!logdir!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$package_scheduledTask_name $package_scheduledTask_version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$package_scheduledTask_name"
$excode = $null;
#create log directory in programdata when needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates dll directory in logdir when needed.
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates scheduledTasks directory in logdir when needed.
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
#Create registry key when needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application key in registry when needed
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  This is saved in $logdir. Also used in EventViewer
Start-Transcript -Path $logfile
<# Place your Powershell code here#>






















<# End of your Powershell script#>
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
if ($excode -eq 1) { $warning = 'Error'; }
else { $warning = 'Information'; }

if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs")
{
	if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) { remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false }
	copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
			$logdir = "$config_logfoldertarget\scheduledTasks"
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!ps1name!!", "scheduledTask_$package_scheduledTask_name.ps1")
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_name!!", $package_scheduledTask_name)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_version!!", $package_scheduledTask_version)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!logdir!!", $logdir)
				$ScheduledTaskFile | Out-File  "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\scheduledTask_$package_scheduledTask_name.ps1" -Force -Confirm:$false -ErrorAction SilentlyContinue
				copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\IntunePrepTool_msgfile.dll" -Confirm:$false
				$package_ScheduledTask_output_textbox1.AppendText("Template script to be scheduled created")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Please add your Powershell code between 'Place your Powershell code here' and 'End of your Powershell script'")
			$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
			$package_ScheduledTask_output_textbox1.AppendText("Save when done")
				
				
	
		$package_scheduledTask_Edit_script_button1.Enabled = $true
		$package_scheduledTask_Edit_script_button1.Visible = $true
		$package_scheduledtasK_option_startup_checkbox1.Enabled = $true
		$package_scheduledtasK_option_startup_checkbox1.Visible = $true
		$package_scheduledtasK_option_weekly_checkbox1.Enabled = $true
		$package_scheduledtasK_option_weekly_checkbox1.Visible = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Enabled = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Visible = $true
	}
	


$package_scheduledTask_Edit_script_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('Powershell_ISE will open now. Please place powershell code between "Place your Powershell code here" and "End of your Powershell script"; Save when done', 'Powershell_ISE') # Casting the method to [void] suppresses the output. 
	
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\scheduledTask_$package_scheduledTask_name.ps1"
	
	
	
}

$package_scheduledtasK_option_startup_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_createIntunewin_scripts_button1_Click={
	#TODO: Place custom script here

	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	
	if (($package_scheduledtasK_option_startup_checkbox1.Checked -eq $false) -and ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $false))
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Weekly or at startup', 'Please select at least one option when to run') # Casting the method to [void] suppresses the output. 
	}
	else
	{
		$package_scheduledTask_Edit_script_test_install_button1.Enabled = $true
		$package_scheduledTask_Edit_script_test_install_button1.Visible = $true
		$package_scheduledTask_Edit_script_test_uninstall_button1.Enabled = $true
		$package_scheduledTask_Edit_script_test_uninstall_button1.Visible = $true
		$package_scheduledTask_Edit_script_createIntuneWin_button1.Visible = $true
		$package_scheduledTask_Edit_script_createIntuneWin_button1.Enabled = $true
		
		
		$ScheduledTaskInstall = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.232
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
		When needed you can edit the creation of the scheduled task below
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$psFile = "!!psFile!!"
$StartupTask = "!!StartupTask!!"
$WeeklyTask = "!!WeeklyTask!!"
$WeeklyTaskDay = "!!WeeklyTaskDay!!" 
$WeeklyTaskHour = "!!WeeklyTaskHour!!"
$WeeklyTaskAMPM = "!!WeeklyTaskAMPM!!"
$registerDetectionRoot = "!!registerDetectionRoot!!"

# Customer variables
$logDir = "!!LogDir!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $version) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $version }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
write-host "Script will copy the powershell script to be scheduled now" -ForegroundColor Green
if ( test-path "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -PathType Leaf ) { remove-item "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force  } 
write-host "Script will copy the powershell script to be scheduled now" -ForegroundColor Green
copy-item $psFile -Destination "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force

#Below the code to set the permissions on the scripts folder
write-host "Script will setup NTFS filepermissions for the directory $logdir\scheduledTasks" -ForegroundColor Green
# BEGIN: 3d5f4a6gch7
#Below the code to set the permissions on the scripts folder
write-host "Script will setup NTFS filepermissions for the directory $logdir\scheduledTasks" -ForegroundColor Green
$Acl = Get-Acl "$logdir\scheduledTasks"
$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrators","Modify","Allow")
$System = New-Object System.Security.Principal.NTAccount("SYSTEM")
$Ar2 = New-Object System.Security.AccessControl.FileSystemAccessRule($System,"Modify","Allow")
$Acl.SetAccessRule($Ar)
$Acl.SetAccessRule($Ar2)
Set-Acl "$logdir\scheduledTasks" $Acl
# END: 3d5f4a6gch7

try
{
	
	write-host "Scheduled Task created for $psFile" -ForegroundColor Green
	# Creates the scheduled task
	

$action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-NoProfile -WindowStyle Hidden -Command `"& '$logdir\scheduledTasks\scheduledTask_$appName.ps1'`""
if ($StartupTask -eq $true) {
	$trigger1 = New-ScheduledTaskTrigger -AtStartup -RandomDelay 00:00:30
}
else {
	$trigger1 = $null
}
if ($WeeklyTask -eq $true) {
	$trigger2 = New-ScheduledTaskTrigger -Weekly -DaysOfWeek $WeeklyTaskDay -At $WeeklyTaskHour$WeeklyTaskAMPM
}
else {
	$trigger2 = $null
}
if (($trigger1 -eq $null) -and ($trigger2 -ne $null)) {
    $triggers = @($trigger2)
}
if (($trigger1 -ne $null) -and ($trigger2 -eq $null)) {
    $triggers = @($trigger1)
}
if (($trigger1 -ne $null) -and ($trigger2 -ne $null)) {
    $triggers = @($trigger1, $trigger2)
}
$principal = New-ScheduledTaskPrincipal -UserID "SYSTEM" -LogonType ServiceAccount -RunLevel Highest
Register-ScheduledTask -Action $action -Trigger $triggers -Principal $principal -TaskName $appName -Description "Scheduled Task for $appName" -Force -ErrorAction Stop
write-host "Scheduled Task created for $psFile" -ForegroundColor Green

	$excode = 0;
	
}
catch
{
	write-host "Error creating scheduled task" -ForegroundColor Yellow
	Write-Host "installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}



Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
		
		$ScheduledTaskUnInstall = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.232
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
		When needed you can edit the deletion of the scheduled task below
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$psFile = "!!psFile!!"
$StartupTask = "!!StartupTask!!"
$WeeklyTask = "!!WeeklyTask!!"
$WeeklyTaskDay = "!!WeeklyTaskDay!!" 
$WeeklyTaskHour = "!!WeeklyTaskHour!!"
$WeeklyTaskAMPM = "!!WeeklyTaskAMPM!!"
$registerDetectionRoot = "!!registerDetectionRoot!!"

# Customer variables
$logDir = "!!LogDir!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
write-host "Script will delete the powershell script used by the task" -ForegroundColor Green
if ( test-path "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -PathType Leaf ) { remove-item "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force  } 


try
{
	# Script deletes the scheduled task here
	write-host "Script will delete the scheduled task" -ForegroundColor Green
	Unregister-ScheduledTask -TaskName $appName -Confirm:$false -ErrorAction Stop
	write-host "Scheduled Task deleted" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
	write-host "Error with deleting scheduled task" -ForegroundColor Yellow
	Write-Host "Uninstallation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}



Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { [System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)  }
else {
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
remove-item $regKeyApp -Confirm:$false -force }
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
		
		$RegisterDetectionroot = "Intune_" + $config_customername
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!registerDetectionRoot!!", $RegisterDetectionroot )
		
		$psfile = "scheduledTask_$package_scheduledTask_name.ps1"
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!AppName!!", $package_scheduledTask_name)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!Version!!", $package_scheduledTask_version)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!psFile!!", $psfile)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!LogDir!!", $config_logfoldertarget)
		

		if ($package_scheduledtasK_option_startup_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $true)
		}
		else
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $false)
		}
		if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTask!!", $true)
			$WeeklyTaskDay = $package_scheduledtask_combobox1.Text
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskDay!!", $WeeklyTaskDay)
			$weeklyTaskHour = $package_scheduledtask_time_combobox1.Text
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskHour!!", $weeklyTaskHour)
			if ($package_scheduledtask_am_radiobutton1.Checked -eq $true)
			{
				$WeeklyTaskAMPM = "AM"
			}
			else
			{
				$WeeklyTaskAMPM = "PM"
			}
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskAMPM!!", $WeeklyTaskAMPM )
			
		}
		else
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTask!!", $false)
		}
		$ScheduledTaskInstall | Out-File "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\install.ps1" -force
	
		$psfile = "scheduledTask_$package_scheduledTask_name.ps1"
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!AppName!!", $package_scheduledTask_name)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!Version!!", $package_scheduledTask_version)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!psFile!!", $psfile)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!LogDir!!", $config_logfoldertarget)
		$RegisterDetectionroot = "Intune_" + $config_customername
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!registerDetectionRoot!!", $RegisterDetectionroot)
		
		if ($package_scheduledtasK_option_startup_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $true)
		}
		else
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!StartupTask!!", $false)
		}
		if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTask!!", $true)
			$WeeklyTaskDay = $package_scheduledtask_combobox1.Text
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTaskDay!!", $WeeklyTaskDay)
			$weeklyTaskHour = $package_scheduledtask_time_combobox1.Text
			$ScheduledTaskUnInstall= $ScheduledTaskUnInstall.Replace("!!WeeklyTaskHour!!", $weeklyTaskHour)
			if ($package_scheduledtask_am_radiobutton1.Checked -eq $true)
			{
				$WeeklyTaskAMPM = "AM"
			}
			else
			{
				$WeeklyTaskAMPM = "PM"
			}
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTaskAMPM!!", $WeeklyTaskAMPM)
			
		}
		else
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTask!!", $false)
		}
		$ScheduledTaskUnInstall | Out-File "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\uninstall.ps1" -force
		
		$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
		$package_ScheduledTask_output_textbox1.AppendText("Install and uninstall.ps1 created'")
		$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
		$package_ScheduledTask_output_textbox1.AppendText("Please test. When ready click on create Intunewin file")
		
		

		
	}
	
	
	
	
}

$windowsFirewallToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$config_InstallRequriedPSmodules_Click={
	#TODO: Place custom script here
	$config_install_required_ps_modules = @'
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

Write-Host "Script will install Evergreen powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Evergreen) { Import-Module -Name Evergreen -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Evergreen -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Evergreen -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

'@
	if (!(Test-Path "C:\Program Files\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1" -PathType Leaf))
		{
			$config_install_required_ps_modules | Out-File "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		else
		{
			Remove-Item -Path "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1" -Confirm:$false -Force
			$config_install_required_ps_modules | Out-File "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		
		powershell_ise -file "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1"
	}
}

$downloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$wingetToolStripMenuItem1_Click={
	#TODO: Place custom script here
	
}

$config_download_folder_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$config_downloadFolderBrowse_Click={
	#TODO: Place custom script here
	if ($config_download_folderbrowsermoderndialog2.ShowDialog() -eq 'OK')
	{
		$config_download_folder_textbox3.Text = $config_download_folderbrowsermoderndialog2.SelectedPath
	}
}

$download_winget_tab_Click={
	#TODO: Place custom script here
	
}

$download_winget_search_button1_Click={
	
	$downloadWingetSearchText = $download_winget_search_textbox5.Text
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$download_winget_output_textbox3.Text = $null
	
	$download_winget_listbox1.Items.Clear()
	$download_winget_version_listbox1.Items.Clear()
	
	
	$table_download_winget = New-Object System.Data.DataTable;
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "ID";
	$table_download_winget.Columns.Add($column_download_winget);
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "Name";
	$table_download_winget.Columns.Add($column_download_winget);
	
	

	foreach ($wsearch_l in $downloadwingetsearch)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row_download_winget = $table_download_winget.NewRow();
			$download_winget_extraStrip = $wsearch_l.substring(0, $wsearch_IdStart)
			$download_winget_extraStrip = $download_winget_extraStrip.TrimEnd()
			$row_download_winget["Name"] = $download_winget_extraStrip
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row_download_winget["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			if ($row_download_winget["ID"] -notlike $null)
			{
				$table_download_winget.Rows.Add($row_download_winget);
				$download_winget_listboxInput = $row_download_winget| Select Name,ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
				$download_winget_listbox1.Items.Add($download_winget_listboxInput)
			}
			## - Save changes to the table:
			$table_download_winget.AcceptChanges();
			
			#$download_datagridview1.DataSource = $table_download_winget
			
			#$download_winget_listboxInput = $table_download_winget | Select Name, ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
			#$download_winget_listbox1.DataSource = $download_winget_listboxInput
			
			
			
		}
		
	}
	
	
	
}

$download_winget_search_textbox5_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 

}

$download_winget_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_version_listbox1.Items.Clear()
	
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	
	
	foreach ($wsearch_55 in $downloadwingetsearchversionselected)
	{
		
		
		if (($wsearch_55 -notlike "Found*") -and ($wsearch_55 -notlike "*-*") -and ($wsearch_55 -notlike "*Version*") -and ($wsearch_55 -notlike $null) -and ($wsearch_55 -notlike "* *"))
		{
			
			$download_winget_version_listbox1.Items.Add($wsearch_55)
			
			
		}
		
	}
	
	
	
	
}

$download_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	#Write-Host $download_datagridview1.SelectedRows.Item.ToString()
}

$download_winget_version_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_download_and_add_button1.Visible = $true
	$download_winget_download_and_add_button1.Enabled = $true
}

$download_winget_download_and_add_button1_Click={
	#TODO: Place custom script here
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	$download_winget_explorer_button1.Enabled = $true
	$download_winget_explorer_button1.Visible = $true
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	if (!(Test-Path -Path $download_winget_path))
	{
		
		New-Item -ItemType Directory -Path $download_winget_path
	}
	#$downloadWingetToLib = winget download --download-directory $download_winget_path --id $winget_download_selected_id --accept-package-agreements --accept-source-agreements
	
	#$download_winget_output_textbox3.Text = $downloadWingetToLib
	#$config_downloadpath
	#Write-Host $download_winget_version_listbox1.SelectedItem
	$download_winget_selectedversion = $download_winget_version_listbox1.SelectedItem
	$download_winget_package = @'
winget download --download-directory !!@download_winget_path@!! --id !!@winget_download_selected_id@!! --accept-package-agreements --accept-source-agreements --version !!@download_winget_selectedversion@!!
'@
	
	$download_winget_package = $download_winget_package.Replace("!!@winget_download_selected_id@!!", $winget_download_selected_id)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_selectedversion@!!", $download_winget_selectedversion)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_path@!!", $download_winget_path)
	if (!(Test-Path "C:\Program Files\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -PathType Leaf))
		{
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		else
		{
			Remove-Item -Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -Confirm:$false -Force
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		
		powershell_ise 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1'
	}
	
}


$download_winget_explorer_button1_Click={
	#TODO: Place custom script here
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	explorer $download_winget_path
}

$config_help_button1_Click={
	#TODO: Place custom script here
	
}

$config_exit_help_button1_Click={
	#TODO: Place custom script here
	
}

$exe_maak_uninstall_script_button1_Click={
	#TODO: Place custom script here
	$exe_maak_intuneWIN_button1.Enabled = $true
	$exe_maak_intuneWIN_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	
	$exe_uninstallFile = @'
<#	
    .NOTES
    ===========================================================================
     Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
     Created on:   	21-5-2023 18:04
     Created by:   	Rink Turksma
     Organization: 	
     Filename:     	uninstall.ps1
    ===========================================================================
    .DESCRIPTION
        Parameters will be filled by IntunePrepTool.
#>
#App Parameters
$appName = "!!AppName!!"
$version = "!!version!!"
$exeFile = "!!EXEFile!!"
$exeParameters = "!!EXEPARMS!!" ##Check EXE PARAMETERS.. 
#Customer variables
$logDir = "!!logdir!!"
$registerDetectionRoot = "!!RegisterDetectionroot!!"
#Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
#Create log directory in programdata if it does not exist.
if (!(Test-Path -Path $logDir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
    New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application Key in the Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
    New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Function ensures successful or unsuccessful execution..
	### Eventually you will have, for example:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  
#The code you provided is a comment in PowerShell. It indicates that the following code block is related to a transcript that will be saved in a text file under the $logdir directory and will also be available in the event viewer.
Start-Transcript -Path $logfile
#Start; Write Log file
try
{
	Start-Process -FilePath $EXEFile -ArgumentList $exeParameters -ErrorAction Stop -wait
	write-host "Uninstall completed" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
    write-host "Error executing $EXEbestand" -ForegroundColor Yellow
	Write-Host "Uinstallation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}
### Place extra actions here:





<#----Below is the end of the installation script---#>
#Now the Transcript logging is started
Stop-Transcript
#After this command, the log is automatically saved in the $logdir location
#Here is a way to split the log so that we only have the last run.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
    $lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try / catch block in the execution, we set $excode to 0 or 1
# Based on this, the Log in the Event viewer is set to Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful application message or an unsuccessful one.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		$versie = $exe_versie_textbox1.text
		$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
		$MSIPARSInput = '"' + $exe_msiexecuninstall.Text + '"'
		
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
		
		try
		{
			$exepnaam = $exe_packagenaam_textbox1.text
			$exeversie = $exe_versie_textbox1.text
			$outputDirectory = $config_packagefolder
			$jjmsii = $exe_msiexecuninstall.text
			
			$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
			$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
			$exe_output_textbox1.AppendText("`nu.cmd created `r`n")
			$exe_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
			
			
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
		}
		
		
	}
	else
	{
		
		if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
		{
			$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
			
		}
		else
		{
			$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
		}
	
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	#$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppName!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!version!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEFile!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nUbinstall.ps1 NIET created `r`n")
	}
	}
}

$exe_radiobutton3_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	
	
}

$exe_msiexecuninstall_TextChanged={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_search_button1_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Searching: `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	$wattezoeken = $tools_uninstallstring_search_textbox3.Text
	$InstallsUninstallString = $InstallsUninstallString | where-object { $_.DisplayName -contains $wattezoeken -or $_.DisplayName -match $wattezoeken } 
	
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_uninstallstring_search_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$buttonSearch32Bit_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Searching: `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	$wattezoeken = $tools_uninstallstring_search_textbox3.Text
	$InstallsUninstallString = $InstallsUninstallString | where-object { $_.DisplayName -contains $wattezoeken -or $_.DisplayName -match $wattezoeken }
	
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}




$package_scheduledTask_Edit_script_test_install_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\install.ps1"
}

$package_scheduledTask_Edit_script_test_uninstall_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\uninstall.ps1"
}

$package_scheduledTask_Edit_script_createIntuneWin_button1_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $powershell_package_name_textbox1.Text
	$msiversie = $powershell_package_version_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$package_ScheduledTask_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$package_ScheduledTask_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$package_ScheduledTask_output_textbox1.AppendText("`r`n")
	
	$package_ScheduledTask_output_textbox1.AppendText("Install command is: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("un-install command is: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$package_ScheduledTask_output_textbox1.AppendText("$regkeyApp `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Please reopen tool to make another Intunewin package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$package_ScheduledTask_output_textbox1.AppendText("Config.csv written to: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$package_ScheduledTask_output_textbox1.AppendText("  `r`n")
	$package_scheduledTask_Edit_script_UploadLogo_button1.Enabled = $true
	$package_scheduledTask_Edit_script_UploadLogo_button1.Visible = $true
	$package_ScheduledTask_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$package_scheduledTask_Edit_script_UploadLogo_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $powershell_package_name_textbox1.text
	$exeversie = $powershell_package_version_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	if([System.Windows.Forms.MessageBox]::Show("Click yes to open the upload screen. Then load the $outputDirectory\$exepnaam\$exeversie\output\config.csv file there", 'Upload Now?',[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$package_ScheduledTask_tabcontrol2.Enabled = $false
		$package_ScheduledTask_tabcontrol2.Visible = $false
	
		
		$upload_intunewin_tabcontrol2.Enabled = $true
		$upload_intunewin_tabcontrol2.Visible = $true
		$upload_intunewin_tabcontrol2.Dock = 'Fill'
	}
	
}

$reloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}


$reopenIntunePrepToolToolStripMenuItem_Click={
	#TODO: Place custom script here
$ReloadIntunePrepTool = @'
	Set-Location "C:\Program Files\IntunePrepTool\"
	taskkill.exe /F /IM "IntunePrepTool.exe"
	& "C:\Program Files\IntunePrepTool\IntunePrepTool.exe"
'@
	if (Test-Path "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1")
	{
		powershell.exe -file "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1"
	}
	else
	{
		$ReloadIntunePrepTool | Out-File "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1" -Confirm:$false -Force
		Start-Sleep 1
		powershell -file "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1"
	}
}

$button1_Click={
	#TODO: Place custom script here
	#$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547";
	#$RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	#$MsalToken = Get-MsalToken -TenantId 'CSNTestRink.onmicrosoft.com' -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	#$webbrowser1
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">551</Line>
    <Line Disabled="True">1341</Line>
    <Line Disabled="True">1343</Line>
    <Line Disabled="False">1801</Line>
    <Line Disabled="False">3286</Line>
    <Line Disabled="False">4865</Line>
    <Line Disabled="True">5617</Line>
    <Line Disabled="True">5619</Line>
    <Line Disabled="True">5725</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>Renci.SshNet, Version=2016.0.0.0, Culture=neutral, PublicKeyToken=1cee9f8bde3db106|..\..\..\..\..\Desktop\Renci.SshNet.dll</Assembly>
  </Assemblies>
</File>