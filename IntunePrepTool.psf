<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAI0kSURBVHhe7f1ldxxLuq6N7t9yxvsrzpczxns+
vOfLHmMv3L261+5evdZqhsmeZE8zg2wxMzMzMzOzVFKBVGIm3yeeKKVU0izbki3JJeu+NG5VZmRk
JMfzZFD+D0IIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEfIL8/f/5f/5/8QHBkfF+gWHxvgEhFEVRFEVdQokt
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
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEELcm//xP/7/A56T35QODgcAAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	[string]$downloadpath
	
}



$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		else
		{
			if (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
			{
				[void][System.Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
			}
		
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	$config_tabcontrol2.Dock = 'Fill'
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Enabled = $true
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_intunewin_tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {

	$wgid = $winget_WingetID_textbox1.text

	
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	[string]$c_downloadfolder = $config_download_folder_textbox3.Text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
			downloadpath    = $c_downloadfolder;
		})



$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
			{
				Unblock-File -Path $exe_org_path -Confirm:$false 
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_intunewin_tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$argList2 = $exe_parsUnInstall_textbox1.text
		if ($exe_openfiledialog1.SafeFileName -like "*.exe")
		{
			
			$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
		}
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	
	$exe_parsUnInstall_textbox1.Enabled = $true
	$exe_parsUnInstall_textbox1.Visible = $true
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true


	
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $true
		$exe_parsUnInstall_textbox1.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $true
		$exe_parsUnInstall_textbox1.Visible = $true
		$argList2 = $exe_parsUnInstall_textbox1.text
		if ($exe_openfiledialog1.SafeFileName -like "*.exe")
		{
			
			$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
		}
		
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	

}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		
	}
	$exe_labelVoorbeeldUninstall.Visible = $true
	$exe_labelVoorbeeldUninstall.Enabled = $true
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	$exe_UnlInstallParameters.Visible = $true
	$exe_UnlInstallParameters.Enabled = $true
	$exe_radiobuttonUninstallEXEPath.Visible = $true
	$exe_radiobuttonUninstallEXEPath.Enabled = $true
	$exe_install_test_button1.Enabled = $true
	$exe_install_test_button1.Visible = $true
	$exe_radiobuttonGebruikZelfdeEXEAlsB.Enabled = $true
	$exe_radiobuttonGebruikZelfdeEXEAlsB.Visible = $true
	$exe_radiobutton3.Enabled = $true
	$exe_radiobutton3.Visible = $true

	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$exeFile = "!!ExeFile!!"
$exeParameters = "!!ExeParams!!" ## Check EXE Params.. 
# Customer variables
$logDir = "!!LogDir!!"
$registerDetectionRoot = "!!RegisterDetectionRoot!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Version }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
try
{
	Start-Process -FilePath $exeFile -ArgumentList $exeParameters -ErrorAction Stop -wait
	write-host "Installation completed of $exeFile" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
	write-host "Error executing $exeFile" -ForegroundColor Yellow
	Write-Host "installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:









Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	$exe_installFile = $exe_installFile.Replace('"!!AppName!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!LogDir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionRoot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!Version!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!ExeFile!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!ExeParams!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Unblock-File -Path $msi_org_path -Confirm:$false
				$MSINewname = $msi_openfiledialog1.FileName
				
				$MSINewname = $MSINewname.Split("\")[$MSINewname.Split("\").Count - 1]
				$MSINewname = $MSINewname.Replace(" ", "")
				$MSIbestand = "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname"
				#Write-Host $MSIbestand
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			 #$msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v $logfileMSI /i $MSINewname"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### This function handles the detection method in the registry.
	### It will create a key in the registry with the name of the application. 
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
#Start; Write Log file
Start-Transcript -Path $logfile
Set-Location $PSScriptRoot
try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Can't read MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Script started i.cmd" -ForegroundColor Green
		write-host "Possible uninstall command is:" -ForegroundColor Green
		write-host ""
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
		write-host ""
		Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
		write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green

	}
	
	if ($msiuninstallcode -eq $null) { $excode = 1 ; write-error "Can't find uninstall code in MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
    Else
    {
        write-host "Script started i.cmd" -ForegroundColor Green
        write-host "Possible uninstall command is:" -ForegroundColor Green
        write-host ""
        write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
        write-host ""
        Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
        write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
        $excode = 0
    }
   
	
	
}
catch
{
    Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "MSIEXEC Log start:.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
    $MSILOGS = get-content $logfileMSI 
    $MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue


    $excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}

write-host "Possible uninstall command is:" -ForegroundColor Green
write-host ""
write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
write-host ""

### Place extra actions here:







<#----Enf of extra actions--#>
#Stop; Write Log file
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { fDetectionInRegistry -succes $true 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1.Text + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$config_tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already available in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be available in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
<#
	.SYNOPSIS
		Sets the emulation of the WebBrowser control for the application.
	
	.DESCRIPTION
		Sets the emulation of the WebBrowser control for the application using the installed version of IE.
		This improves the WebBrowser control compatibility with newer html features.
	
	.PARAMETER ExecutableName
		The name of the executable E.g. PowerShellStudio.exe.
		Default Value: The running executable name.
	
	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation

	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation PowerShell.exe
#>
function Set-WebBrowserEmulation
{
	param
	(
		[ValidateNotNullOrEmpty()]
		[string]
		$ExecutableName = [System.IO.Path]::GetFileName([System.Diagnostics.Process]::GetCurrentProcess().MainModule.FileName)
	)
	
	#region Get IE Version
	$valueNames = 'svcVersion', 'svcUpdateVersion', 'Version', 'W2kVersion'
	
	$version = 0;
	for ($i = 0; $i -lt $valueNames.Length; $i++)
	{
		$objVal = [Microsoft.Win32.Registry]::GetValue('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer', $valueNames[$i], '0')
		$strVal = [System.Convert]::ToString($objVal)
		if ($strVal)
		{
			$iPos = $strVal.IndexOf('.')
			if ($iPos -gt 0)
			{
				$strVal = $strVal.Substring(0, $iPos)
			}
			
			$res = 0;
			if ([int]::TryParse($strVal, [ref]$res))
			{
				$version = [Math]::Max($version, $res)
			}
		}
	}
	
	if ($version -lt 7)
	{
		$version = 7000
	}
	else
	{
		$version = $version * 1000
	}
	#endregion
	
	[Microsoft.Win32.Registry]::SetValue('HKEY_CURRENT_USER\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION', $ExecutableName, $version)
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	}
	catch
	{
		#Error handling here
	}
	
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			$config_download_folder_textbox3.Text = $cis.downloadpath
			
			if ($cis.downloadpath -like 'Enter UNC or local path for the download Package folder. (Evergreen / Winget)')
			{
				#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
				[void][System.Windows.Forms.MessageBox]::Show('Download folder was added to config. Please use this tool or edit "C:\Program Files\IntunePrepTool\config_customerinfo.csv" ', 'Please add Download folder') # Casting the method to [void] suppresses the output. 
			}
			
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
			try
			{
				New-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
	$config_download_folder_textbox3.Text = "Enter UNC or local path for the download Package folder. (Evergreen / Winget)"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkPackageName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkPackageName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkPackageName.intunewin"
			DisplayName   = $weblinkPackageName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create extra folder in startmenu (when needed)"
  if (!(Test-Path -Path $location))
{
	
	New-Item -ItemType Directory -Path $location
}

	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!packagename!!", $weblinkPackageName)
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!packagename", $weblinkPackageName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_packagename.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force }

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget not installed" $excode = 1 }
else { $excode = 0 }

try
{
	
	$install = "!!WingetCommand!!"
if ($install -like "!!doe*")
{
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		<#
		try
		{
			#install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
			
		}
		catch
		{
			
		}
		#>
	}
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale

		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
		}
		catch
		{
			
			
		}
		#>
	}
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
	{

		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
			
		}
		catch
		{
			
		}
		#>
	}
	
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
		}
		catch
		{
			
		}
		#>
	}
}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	#$excode = 0;
	
}
catch
{
	#$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error';  }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_Empty_Scheduled_Task_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}

$winget_remediations_createscripts_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile| Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Upload not yet available for Remediations.. For now use the Intune Admin Portal")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Please reopen IntunePrepTool to create more Remediations scripts")
				
				
			}
		}
		
		
	}
	
	
	
	
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
	
	
	
}

$configToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $true
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_winget_tabcontrol2.Enabled = $true
	$package_winget_tabcontrol2.Visible = $true
	$package_winget_tabcontrol2.Dock = 'Fill'
}
$scheduledTaskToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	$package_ScheduledTask_tabcontrol2.Dock = 'Fill'
	$package_ScheduledTask_tabcontrol2.Enabled = $true
	$package_ScheduledTask_tabcontrol2.Visible = $true
}


$mSIToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $true
	$package_msi_tabcontrol2.Visible = $true
	$package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $true
	$package_exe_tabcontrol2.Visible = $true
	$package_exe_tabcontrol2.Dock = 'Fill'
}

$main_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$wingetUpdateToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false

	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Dock = 'Fill'
	$Remediations_winget_tabcontrol2.Enabled = $true
	$Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Dock = 'Fill'
	$package_weblink_tabcontrol2.Visible = $true
	$package_weblink_tabcontrol2.Enabled = $true
}



$intunewinToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	
	
	$upload_intunewin_tabcontrol2.Dock = 'Fill'
	$upload_intunewin_tabcontrol2.Enabled = $true
	$upload_intunewin_tabcontrol2.Visible = $true
	
}

$wingetSearchShowVersionToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Enabled = $true
	$tools_winget_searchtabcontrol1.Visible = $true
	
}

$findUninstallStringsToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'Fill'
	$tools_uninstallstring_tabcontrol1.Enabled = $true
	$tools_uninstallstring_tabcontrol1.Visible = $true
	
}

$sourceFromWingetToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $true
	$download_tabcontrol1.Visible = $true
	$download_tabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	
}


$Weblink_intunewin_tabpage6_Click={
	#TODO: Place custom script here
	
}

$weblink_packagename_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	
}

$remediations_winget_maxversion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_remediations_maxversion_checkbox_CheckedChanged={
	#TODO: Place custom script here
	
}

$remediate_winget_version_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_wingetid_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$remadiations_winget_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$remediations_winget_upload_button1_Click={
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				
				
			
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				
			
				
				$encoding = [System.Text.Encoding]::UTF8
				$bytes = $encoding.GetBytes($remediate_detectFile)
				$Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
				$Bytes2 = $encoding.GetBytes($remediate_remediateFile)
				$Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
				$UploadRemediationsFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/5/2023 3:38 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	upload.ps1
	===========================================================================
	.DESCRIPTION
		Part of IntunePrepTool
		https://github.com/rink-turksma/IntunePrepTool
		Upload Remediations to Intune
#>
	Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
	if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
	else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
	$displayName = "!!displayName!!"
	$publisher = "!!publisher!!"
	$detectionScriptContent = '!!detectionScriptContent!!'
	$remediationScriptContent = '!!remediationScriptContent!!'
	$tenantID = "!!tenantid!!"
	$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"; $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	$MsalToken = Get-MsalToken -TenantId $tenantID -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
	$uri = "https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts"
	$createdPolicy = Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{ Authorization = $MsalToken.CreateAuthorizationHeader() } -ContentType 'application/json'
	Write-Host "Remediationa policy created successfully with ID: $($createdPolicy.id)" -ForegroundColor Green
	Write-Host "Please assign and schedule with MS Intune Admin console" -ForegroundColor Green
	
'@
				$displayName = $winget_remediations_name_textbox1.Text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!publisher!!", $config_customername)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!displayName!!", $displayName)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!detectionScriptContent!!", $Encoded_remediate_detectFile)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!remediationScriptContent!!", $Encoded_remediate_remediateFile )
				$tenatURL = $upload_tenantURL_textbox.text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!tenantid!!", $tenatURL)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"
				}
				$UploadRemediationsFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1" -Force
				$remadiations_winget_textbox2.AppendText("Created Upload.ps1")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule")
				
				if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					
					
					
					powershell_ise -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
				}
			}
		}
	}
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
}

$remediations_winget_open_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
	$remediate_winget_version = $remediate_winget_version_textbox1.Text
	Invoke-Item "$config_packagefolder\$winget_remediations_name\$remediate_winget_version"
}

$powershell_scheduledtask_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	if ($powershell_scheduledtask_radiobutton.Checked -eq $true)
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $true
		$package_scheduled_task_WingetID_textbox.Visible = $true
		$package_scheduled_task_WingetID_label3.Enabled = $true
		$package_scheduled_task_WingetID_label3.Visible = $true
		$package_ScheduledTask_create_scripts_button1.Enabled = $true
		$package_ScheduledTask_create_scripts_button1.Visible = $true
		
		
	}
	else
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $false
		$package_scheduled_task_WingetID_textbox.Visible = $false
		$package_scheduled_task_WingetID_label3.Enabled = $false
		$package_scheduled_task_WingetID_label3.Visible = $false
	
	}
}

$powershell_Empty_Scheduled_Task_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	$package_ScheduledTask_create_scripts_button1.Enabled = $true
	$package_ScheduledTask_create_scripts_button1.Visible = $true
}



$package_scheduledtasK_option_weekly_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
	{
		$package_scheduledtask_combobox1.Enabled = $true
		$package_scheduledtask_combobox1.Visible = $true
		$package_scheduledtask_time_combobox1.Enabled = $true
		$package_scheduledtask_time_combobox1.Visible = $true
		$package_scheduledtask_am_radiobutton1.Enabled = $true
		$package_scheduledtask_am_radiobutton1.Visible = $true
		$package_scheduledtask_pm_radiobutton.Enabled = $true
		$package_scheduledtask_pm_radiobutton.Visible = $true
		
	}
	else
	{
		$package_scheduledtask_combobox1.Enabled = $false
		$package_scheduledtask_combobox1.Visible = $false
		$package_scheduledtask_time_combobox1.Enabled = $false
		$package_scheduledtask_time_combobox1.Visible = $false
		$package_scheduledtask_am_radiobutton1.Enabled = $false
		$package_scheduledtask_am_radiobutton1.Visible = $false
		$package_scheduledtask_pm_radiobutton.Enabled = $false
		$package_scheduledtask_pm_radiobutton.Visible = $false
	
	}
}

$package_scheduledtask_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$datetimepicker1_ValueChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_time_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_am_radiobutton1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_pm_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_winget_max_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_label3_Click={
	#TODO: Place custom script here
	
}

$package_scheduled_Task_maxVersion_label4_Click={
	#TODO: Place custom script here
	
}

$powershell_create_package_dir_button1_Click={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	else
	{
		if ($powershell_package_name_textbox1.Text -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package name textbox', 'Select Package Name')
		}
		else
		{
			if ($powershell_package_version_textbox1.Text -like $null)
			{
				[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package version textbox', 'Select Package Version')
			}
			else
			{
				$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
				$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
				$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
				$package_scheduledTask_name = $powershell_package_name_textbox1.Text
				$package_scheduledTask_version = $powershell_package_version_textbox1.text
			
			
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"
				}
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"
				}
				$package_ScheduledTask_output_textbox1.Text = "`nNew package direcotory created: `r`n"
				$package_ScheduledTask_output_textbox1.AppendText("$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$powershell_open_package_directory_button1.Enabled = $true
				$powershell_open_package_directory_button1.Visible = $true
				$package_ScheduledTask_create_scripts_button1.Enabled = $true
				$package_ScheduledTask_create_scripts_button1.Visible = $true
				
				
				
			}
		}
	}
}

$powershell_package_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_open_package_directory_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	
	Invoke-Item "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\"
}

$package_ScheduledTask_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_ScheduledTask_create_scripts_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	$package_scheduledtask_system_panel3.Visible = $true
	$package_scheduledtask_system_panel3.Enabled = $true
	

				
				$ScheduledTaskFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	"!!ps1name!!"
	===========================================================================
	.DESCRIPTION
		Please place your script between:
        "Place your Powershell code here" and "End of your Powershell script"
        When done. Save script and close Powershell_ISE
#>
#App Params
$package_scheduledTask_name  = "!!package_scheduledTask_name!!"
$package_scheduledTask_version = "!!package_scheduledTask_version!!"
#Customer vars
$logdir = "!!logdir!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$package_scheduledTask_name $package_scheduledTask_version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$package_scheduledTask_name"
$excode = $null;
#create log directory in programdata when needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates dll directory in logdir when needed.
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates scheduledTasks directory in logdir when needed.
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
#Create registry key when needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application key in registry when needed
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  This is saved in $logdir. Also used in EventViewer
Start-Transcript -Path $logfile
<# Place your Powershell code here#>






















<# End of your Powershell script#>
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
if ($excode -eq 1) { $warning = 'Error'; }
else { $warning = 'Information'; }

if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs")
{
	if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) { remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false }
	copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
			$logdir = "$config_logfoldertarget\scheduledTasks"
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!ps1name!!", "scheduledTask_$package_scheduledTask_name.ps1")
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_name!!", $package_scheduledTask_name)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_version!!", $package_scheduledTask_version)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!logdir!!", $logdir)
				$ScheduledTaskFile | Out-File  "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\scheduledTask_$package_scheduledTask_name.ps1" -Force -Confirm:$false -ErrorAction SilentlyContinue
				copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\IntunePrepTool_msgfile.dll" -Confirm:$false
				$package_ScheduledTask_output_textbox1.AppendText("Template script to be scheduled created")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Please add your Powershell code between 'Place your Powershell code here' and 'End of your Powershell script'")
			$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
			$package_ScheduledTask_output_textbox1.AppendText("Save when done")
				
				
	
		$package_scheduledTask_Edit_script_button1.Enabled = $true
		$package_scheduledTask_Edit_script_button1.Visible = $true
		$package_scheduledtasK_option_startup_checkbox1.Enabled = $true
		$package_scheduledtasK_option_startup_checkbox1.Visible = $true
		$package_scheduledtasK_option_weekly_checkbox1.Enabled = $true
		$package_scheduledtasK_option_weekly_checkbox1.Visible = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Enabled = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Visible = $true
	}
	


$package_scheduledTask_Edit_script_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('Powershell_ISE will open now. Please place powershell code between "Place your Powershell code here" and "End of your Powershell script"; Save when done', 'Powershell_ISE') # Casting the method to [void] suppresses the output. 
	
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\scheduledTask_$package_scheduledTask_name.ps1"
	
	
	
}

$package_scheduledtasK_option_startup_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_createIntunewin_scripts_button1_Click={
	#TODO: Place custom script here

	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	
	if (($package_scheduledtasK_option_startup_checkbox1.Checked -eq $false) -and ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $false))
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Weekly or at startup', 'Please select at least one option when to run') # Casting the method to [void] suppresses the output. 
	}
	else
	{
		$package_scheduledTask_Edit_script_test_install_button1.Enabled = $true
		$package_scheduledTask_Edit_script_test_install_button1.Visible = $true
		$package_scheduledTask_Edit_script_test_uninstall_button1.Enabled = $true
		$package_scheduledTask_Edit_script_test_uninstall_button1.Visible = $true
		$package_scheduledTask_Edit_script_createIntuneWin_button1.Visible = $true
		$package_scheduledTask_Edit_script_createIntuneWin_button1.Enabled = $true
		
		
		$ScheduledTaskInstall = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.232
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
		When needed you can edit the creation of the scheduled task below
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$psFile = "!!psFile!!"
$StartupTask = "!!StartupTask!!"
$WeeklyTask = "!!WeeklyTask!!"
$WeeklyTaskDay = "!!WeeklyTaskDay!!" 
$WeeklyTaskHour = "!!WeeklyTaskHour!!"
$WeeklyTaskAMPM = "!!WeeklyTaskAMPM!!"
$registerDetectionRoot = "!!registerDetectionRoot!!"

# Customer variables
$logDir = "!!LogDir!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $version) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $version }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
write-host "Script will copy the powershell script to be scheduled now" -ForegroundColor Green
if ( test-path "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -PathType Leaf ) { remove-item "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force  } 
write-host "Script will copy the powershell script to be scheduled now" -ForegroundColor Green
copy-item $psFile -Destination "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force

#Below the code to set the permissions on the scripts folder
write-host "Script will setup NTFS filepermissions for the directory $logdir\scheduledTasks" -ForegroundColor Green
# BEGIN: 3d5f4a6gch7
#Below the code to set the permissions on the scripts folder
write-host "Script will setup NTFS filepermissions for the directory $logdir\scheduledTasks" -ForegroundColor Green
$Acl = Get-Acl "$logdir\scheduledTasks"
$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrators","Modify","Allow")
$System = New-Object System.Security.Principal.NTAccount("SYSTEM")
$Ar2 = New-Object System.Security.AccessControl.FileSystemAccessRule($System,"Modify","Allow")
$Acl.SetAccessRule($Ar)
$Acl.SetAccessRule($Ar2)
Set-Acl "$logdir\scheduledTasks" $Acl
# END: 3d5f4a6gch7

try
{
	
	write-host "Scheduled Task created for $psFile" -ForegroundColor Green
	# Creates the scheduled task
	

$action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-NoProfile -WindowStyle Hidden -Command `"& '$logdir\scheduledTasks\scheduledTask_$appName.ps1'`""
if ($StartupTask -eq $true) {
	$trigger1 = New-ScheduledTaskTrigger -AtStartup -RandomDelay 00:00:30
}
else {
	$trigger1 = $null
}
if ($WeeklyTask -eq $true) {
	$trigger2 = New-ScheduledTaskTrigger -Weekly -DaysOfWeek $WeeklyTaskDay -At $WeeklyTaskHour$WeeklyTaskAMPM
}
else {
	$trigger2 = $null
}
if (($trigger1 -eq $null) -and ($trigger2 -ne $null)) {
    $triggers = @($trigger2)
}
if (($trigger1 -ne $null) -and ($trigger2 -eq $null)) {
    $triggers = @($trigger1)
}
if (($trigger1 -ne $null) -and ($trigger2 -ne $null)) {
    $triggers = @($trigger1, $trigger2)
}
$principal = New-ScheduledTaskPrincipal -UserID "SYSTEM" -LogonType ServiceAccount -RunLevel Highest
Register-ScheduledTask -Action $action -Trigger $triggers -Principal $principal -TaskName $appName -Description "Scheduled Task for $appName" -Force -ErrorAction Stop
write-host "Scheduled Task created for $psFile" -ForegroundColor Green

	$excode = 0;
	
}
catch
{
	write-host "Error creating scheduled task" -ForegroundColor Yellow
	Write-Host "installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}



Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
		
		$ScheduledTaskUnInstall = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.232
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
		When needed you can edit the deletion of the scheduled task below
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$psFile = "!!psFile!!"
$StartupTask = "!!StartupTask!!"
$WeeklyTask = "!!WeeklyTask!!"
$WeeklyTaskDay = "!!WeeklyTaskDay!!" 
$WeeklyTaskHour = "!!WeeklyTaskHour!!"
$WeeklyTaskAMPM = "!!WeeklyTaskAMPM!!"
$registerDetectionRoot = "!!registerDetectionRoot!!"

# Customer variables
$logDir = "!!LogDir!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
write-host "Script will delete the powershell script used by the task" -ForegroundColor Green
if ( test-path "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -PathType Leaf ) { remove-item "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force  } 


try
{
	# Script deletes the scheduled task here
	write-host "Script will delete the scheduled task" -ForegroundColor Green
	Unregister-ScheduledTask -TaskName $appName -Confirm:$false -ErrorAction Stop
	write-host "Scheduled Task deleted" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
	write-host "Error with deleting scheduled task" -ForegroundColor Yellow
	Write-Host "Uninstallation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}



Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { [System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)  }
else {
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
remove-item $regKeyApp -Confirm:$false -force }
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
		
		$RegisterDetectionroot = "Intune_" + $config_customername
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!registerDetectionRoot!!", $RegisterDetectionroot )
		
		$psfile = "scheduledTask_$package_scheduledTask_name.ps1"
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!AppName!!", $package_scheduledTask_name)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!Version!!", $package_scheduledTask_version)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!psFile!!", $psfile)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!LogDir!!", $config_logfoldertarget)
		

		if ($package_scheduledtasK_option_startup_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $true)
		}
		else
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $false)
		}
		if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTask!!", $true)
			$WeeklyTaskDay = $package_scheduledtask_combobox1.Text
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskDay!!", $WeeklyTaskDay)
			$weeklyTaskHour = $package_scheduledtask_time_combobox1.Text
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskHour!!", $weeklyTaskHour)
			if ($package_scheduledtask_am_radiobutton1.Checked -eq $true)
			{
				$WeeklyTaskAMPM = "AM"
			}
			else
			{
				$WeeklyTaskAMPM = "PM"
			}
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskAMPM!!", $WeeklyTaskAMPM )
			
		}
		else
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTask!!", $false)
		}
		$ScheduledTaskInstall | Out-File "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\install.ps1" -force
	
		$psfile = "scheduledTask_$package_scheduledTask_name.ps1"
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!AppName!!", $package_scheduledTask_name)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!Version!!", $package_scheduledTask_version)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!psFile!!", $psfile)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!LogDir!!", $config_logfoldertarget)
		$RegisterDetectionroot = "Intune_" + $config_customername
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!registerDetectionRoot!!", $RegisterDetectionroot)
		
		if ($package_scheduledtasK_option_startup_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $true)
		}
		else
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!StartupTask!!", $false)
		}
		if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTask!!", $true)
			$WeeklyTaskDay = $package_scheduledtask_combobox1.Text
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTaskDay!!", $WeeklyTaskDay)
			$weeklyTaskHour = $package_scheduledtask_time_combobox1.Text
			$ScheduledTaskUnInstall= $ScheduledTaskUnInstall.Replace("!!WeeklyTaskHour!!", $weeklyTaskHour)
			if ($package_scheduledtask_am_radiobutton1.Checked -eq $true)
			{
				$WeeklyTaskAMPM = "AM"
			}
			else
			{
				$WeeklyTaskAMPM = "PM"
			}
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTaskAMPM!!", $WeeklyTaskAMPM)
			
		}
		else
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTask!!", $false)
		}
		$ScheduledTaskUnInstall | Out-File "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\uninstall.ps1" -force
		
		$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
		$package_ScheduledTask_output_textbox1.AppendText("Install and uninstall.ps1 created'")
		$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
		$package_ScheduledTask_output_textbox1.AppendText("Please test. When ready click on create Intunewin file")
		
		

		
	}
	
	
	
	
}

$windowsFirewallToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$config_InstallRequriedPSmodules_Click={
	#TODO: Place custom script here
	$config_install_required_ps_modules = @'
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

Write-Host "Script will install Evergreen powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Evergreen) { Import-Module -Name Evergreen -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Evergreen -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Evergreen -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

'@
	if (!(Test-Path "C:\Program Files\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1" -PathType Leaf))
		{
			$config_install_required_ps_modules | Out-File "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		else
		{
			Remove-Item -Path "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1" -Confirm:$false -Force
			$config_install_required_ps_modules | Out-File "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		
		powershell_ise -file "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1"
	}
}

$downloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$wingetToolStripMenuItem1_Click={
	#TODO: Place custom script here
	
}

$config_download_folder_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$config_downloadFolderBrowse_Click={
	#TODO: Place custom script here
	if ($config_download_folderbrowsermoderndialog2.ShowDialog() -eq 'OK')
	{
		$config_download_folder_textbox3.Text = $config_download_folderbrowsermoderndialog2.SelectedPath
	}
}

$download_winget_tab_Click={
	#TODO: Place custom script here
	
}

$download_winget_search_button1_Click={
	
	$downloadWingetSearchText = $download_winget_search_textbox5.Text
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$download_winget_output_textbox3.Text = $null
	
	$download_winget_listbox1.Items.Clear()
	$download_winget_version_listbox1.Items.Clear()
	
	
	$table_download_winget = New-Object System.Data.DataTable;
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "ID";
	$table_download_winget.Columns.Add($column_download_winget);
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "Name";
	$table_download_winget.Columns.Add($column_download_winget);
	
	

	foreach ($wsearch_l in $downloadwingetsearch)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row_download_winget = $table_download_winget.NewRow();
			$download_winget_extraStrip = $wsearch_l.substring(0, $wsearch_IdStart)
			$download_winget_extraStrip = $download_winget_extraStrip.TrimEnd()
			$row_download_winget["Name"] = $download_winget_extraStrip
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row_download_winget["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			if ($row_download_winget["ID"] -notlike $null)
			{
				$table_download_winget.Rows.Add($row_download_winget);
				$download_winget_listboxInput = $row_download_winget| Select Name,ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
				$download_winget_listbox1.Items.Add($download_winget_listboxInput)
			}
			## - Save changes to the table:
			$table_download_winget.AcceptChanges();
			
			#$download_datagridview1.DataSource = $table_download_winget
			
			#$download_winget_listboxInput = $table_download_winget | Select Name, ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
			#$download_winget_listbox1.DataSource = $download_winget_listboxInput
			
			
			
		}
		
	}
	
	
	
}

$download_winget_search_textbox5_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 

}

$download_winget_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_version_listbox1.Items.Clear()
	
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	
	
	foreach ($wsearch_55 in $downloadwingetsearchversionselected)
	{
		
		
		if (($wsearch_55 -notlike "Found*") -and ($wsearch_55 -notlike "*-*") -and ($wsearch_55 -notlike "*Version*") -and ($wsearch_55 -notlike $null) -and ($wsearch_55 -notlike "* *"))
		{
			
			$download_winget_version_listbox1.Items.Add($wsearch_55)
			
			
		}
		
	}
	
	
	
	
}

$download_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	#Write-Host $download_datagridview1.SelectedRows.Item.ToString()
}

$download_winget_version_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_download_and_add_button1.Visible = $true
	$download_winget_download_and_add_button1.Enabled = $true
}

$download_winget_download_and_add_button1_Click={
	#TODO: Place custom script here
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	$download_winget_explorer_button1.Enabled = $true
	$download_winget_explorer_button1.Visible = $true
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	if (!(Test-Path -Path $download_winget_path))
	{
		
		New-Item -ItemType Directory -Path $download_winget_path
	}
	#$downloadWingetToLib = winget download --download-directory $download_winget_path --id $winget_download_selected_id --accept-package-agreements --accept-source-agreements
	
	#$download_winget_output_textbox3.Text = $downloadWingetToLib
	#$config_downloadpath
	#Write-Host $download_winget_version_listbox1.SelectedItem
	$download_winget_selectedversion = $download_winget_version_listbox1.SelectedItem
	$download_winget_package = @'
winget download --download-directory !!@download_winget_path@!! --id !!@winget_download_selected_id@!! --accept-package-agreements --accept-source-agreements --version !!@download_winget_selectedversion@!!
'@
	
	$download_winget_package = $download_winget_package.Replace("!!@winget_download_selected_id@!!", $winget_download_selected_id)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_selectedversion@!!", $download_winget_selectedversion)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_path@!!", $download_winget_path)
	if (!(Test-Path "C:\Program Files\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -PathType Leaf))
		{
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		else
		{
			Remove-Item -Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -Confirm:$false -Force
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		
		powershell_ise 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1'
	}
	
}


$download_winget_explorer_button1_Click={
	#TODO: Place custom script here
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	explorer $download_winget_path
}

$config_help_button1_Click={
	#TODO: Place custom script here
	
}

$config_exit_help_button1_Click={
	#TODO: Place custom script here
	
}

$exe_maak_uninstall_script_button1_Click={
	#TODO: Place custom script here
	$exe_maak_intuneWIN_button1.Enabled = $true
	$exe_maak_intuneWIN_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	
	$exe_uninstallFile = @'
<#	
    .NOTES
    ===========================================================================
     Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
     Created on:   	21-5-2023 18:04
     Created by:   	Rink Turksma
     Organization: 	
     Filename:     	uninstall.ps1
    ===========================================================================
    .DESCRIPTION
        Parameters will be filled by IntunePrepTool.
#>
#App Parameters
$appName = "!!AppName!!"
$version = "!!version!!"
$exeFile = "!!EXEFile!!"
$exeParameters = "!!EXEPARMS!!" ##Check EXE PARAMETERS.. 
#Customer variables
$logDir = "!!logdir!!"
$registerDetectionRoot = "!!RegisterDetectionroot!!"
#Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
#Create log directory in programdata if it does not exist.
if (!(Test-Path -Path $logDir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
    New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application Key in the Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
    New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Function ensures successful or unsuccessful execution..
	### Eventually you will have, for example:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  
#The code you provided is a comment in PowerShell. It indicates that the following code block is related to a transcript that will be saved in a text file under the $logdir directory and will also be available in the event viewer.
Start-Transcript -Path $logfile
#Start; Write Log file
try
{
	Start-Process -FilePath $EXEFile -ArgumentList $exeParameters -ErrorAction Stop -wait
	write-host "Uninstall completed" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
    write-host "Error executing $EXEbestand" -ForegroundColor Yellow
	Write-Host "Uinstallation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}
### Place extra actions here:





<#----Below is the end of the installation script---#>
#Now the Transcript logging is started
Stop-Transcript
#After this command, the log is automatically saved in the $logdir location
#Here is a way to split the log so that we only have the last run.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
    $lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try / catch block in the execution, we set $excode to 0 or 1
# Based on this, the Log in the Event viewer is set to Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful application message or an unsuccessful one.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		$versie = $exe_versie_textbox1.text
		$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
		$MSIPARSInput = '"' + $exe_msiexecuninstall.Text + '"'
		
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
		
		try
		{
			$exepnaam = $exe_packagenaam_textbox1.text
			$exeversie = $exe_versie_textbox1.text
			$outputDirectory = $config_packagefolder
			$jjmsii = $exe_msiexecuninstall.text
			
			$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
			$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
			$exe_output_textbox1.AppendText("`nu.cmd created `r`n")
			$exe_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
			
			
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
		}
		
		
	}
	else
	{
		
		if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
		{
			$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
			
		}
		else
		{
			$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
		}
	
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	#$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsUnInstall_textbox1.Text
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppName!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!version!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEFile!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nUbinstall.ps1 NIET created `r`n")
	}
	}
}

$exe_radiobutton3_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	
	
}

$exe_msiexecuninstall_TextChanged={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_search_button1_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Searching: `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	$wattezoeken = $tools_uninstallstring_search_textbox3.Text
	$InstallsUninstallString = $InstallsUninstallString | where-object { $_.DisplayName -contains $wattezoeken -or $_.DisplayName -match $wattezoeken } 
	
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_uninstallstring_search_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$buttonSearch32Bit_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Searching: `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	$wattezoeken = $tools_uninstallstring_search_textbox3.Text
	$InstallsUninstallString = $InstallsUninstallString | where-object { $_.DisplayName -contains $wattezoeken -or $_.DisplayName -match $wattezoeken }
	
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}




$package_scheduledTask_Edit_script_test_install_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\install.ps1"
}

$package_scheduledTask_Edit_script_test_uninstall_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\uninstall.ps1"
}

$package_scheduledTask_Edit_script_createIntuneWin_button1_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $powershell_package_name_textbox1.Text
	$msiversie = $powershell_package_version_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$package_ScheduledTask_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$package_ScheduledTask_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$package_ScheduledTask_output_textbox1.AppendText("`r`n")
	
	$package_ScheduledTask_output_textbox1.AppendText("Install command is: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("un-install command is: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$package_ScheduledTask_output_textbox1.AppendText("$regkeyApp `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Please reopen tool to make another Intunewin package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$package_ScheduledTask_output_textbox1.AppendText("Config.csv written to: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$package_ScheduledTask_output_textbox1.AppendText("  `r`n")
	$package_scheduledTask_Edit_script_UploadLogo_button1.Enabled = $true
	$package_scheduledTask_Edit_script_UploadLogo_button1.Visible = $true
	$package_ScheduledTask_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$package_scheduledTask_Edit_script_UploadLogo_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $powershell_package_name_textbox1.text
	$exeversie = $powershell_package_version_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	if([System.Windows.Forms.MessageBox]::Show("Click yes to open the upload screen. Then load the $outputDirectory\$exepnaam\$exeversie\output\config.csv file there", 'Upload Now?',[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$package_ScheduledTask_tabcontrol2.Enabled = $false
		$package_ScheduledTask_tabcontrol2.Visible = $false
	
		
		$upload_intunewin_tabcontrol2.Enabled = $true
		$upload_intunewin_tabcontrol2.Visible = $true
		$upload_intunewin_tabcontrol2.Dock = 'Fill'
	}
	
}

$reloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}


$reopenIntunePrepToolToolStripMenuItem_Click={
	#TODO: Place custom script here
$ReloadIntunePrepTool = @'
	Set-Location "C:\Program Files\IntunePrepTool\"
	taskkill.exe /F /IM "IntunePrepTool.exe"
	& "C:\Program Files\IntunePrepTool\IntunePrepTool.exe"
'@
	if (Test-Path "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1")
	{
		powershell.exe -file "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1"
	}
	else
	{
		$ReloadIntunePrepTool | Out-File "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1" -Confirm:$false -Force
		Start-Sleep 1
		powershell -file "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1"
	}
}

$button1_Click={
	#TODO: Place custom script here
	#$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547";
	#$RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	#$MsalToken = Get-MsalToken -TenantId 'CSNTestRink.onmicrosoft.com' -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	#$webbrowser1
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">551</Line>
    <Line Disabled="True">1341</Line>
    <Line Disabled="True">1343</Line>
    <Line Disabled="False">1801</Line>
    <Line Disabled="False">3286</Line>
    <Line Disabled="False">4865</Line>
    <Line Disabled="True">5617</Line>
    <Line Disabled="True">5619</Line>
    <Line Disabled="True">5725</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>Renci.SshNet, Version=2016.0.0.0, Culture=neutral, PublicKeyToken=1cee9f8bde3db106|..\..\..\..\..\Desktop\Renci.SshNet.dll</Assembly>
  </Assemblies>
</File>