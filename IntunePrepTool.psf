<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAGdYAABnWARjRyu0AAHOuSURBVHhe7b2FdhxX3r77v4n/fZwbOGudW5iZ
b77MTDiZJJOJk9hOYmaSLUZbbEkWMzMzM0sWMzPL79m/3Sq7pbRt2ZKtlvQ+Ws/qoq6uKnXXfov2
/j+EEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIaeX//t//+/n9i6PvcNiUr2DwuMo
pZRSekyNTMjwvnTtpvdOEf9m7tg4hHZPbqCxfw4NfbOUUkopPaY2DSyguX8GO0X8m4lOzPBuHV5E
UUMfihsppZRS+jqLjNeGXhTW9+xLmbakqd/iuNdpfJ6lca/TWL7Gvn0GgLDoRO+WoYWXH1bUNKgc
QVHzCIrFpqGX4yillNLTbElzP/JqupFa2Ij0khakFze/WTVNmnpNLWra6TcfZ6YxbGd4mppe3DX8
Dcq0mWVtavkG0NAztf8AIGcAJJ0UNw2gvKEdlTXlKK+pQllNDUpqm9W4QZSqmco0+7W0eRBlrUMW
x5kcUOOHUdZiYRr1We/6eZRSSumHtqxlANkVHcit7ERxgxyhy5mA1yvT5FZ1ITG3DsX16iB7x+KG
fuTWPEdutcki1W+Mk/JRCvXUwiYdOowj/AI1v7xaNW2j6b1y5r6gTsapz1KvGaWtuuxs7J1+9wBQ
2DyOvqL7WKi1QVf8P1Dt9/+iNMUeJW1TKKjt0gV2udJUOKsCvEWCgSroVSEuw6Vfd7eNIL+6FRnF
aoUlVLSZCnoJBMb4kka1sEU1yCpr2gkCal5KGVdY24H8mi6GAEoppValBIAcVfjnqUJdCnGjMC9u
HFQF8oC2RLrNCvq86m4k5zegRKZTljYPqbKvFfkltSgsFeuQWdykh+vx6qA7o6RVhYAW9ZkyTzUf
GVZUjxxVbiZkVSC3qFoV+Gq8KoNlvJhV1qbLzXcIAMnebSNLKGlRhXBjJ3rj/4KJ0psYqPJFntP/
g5LCZJS2jiMtvxK5Fc1qoeqRVVyDpOxSlTi6VWHdpZJQM9ILq1ShrTaK6s4ub0J6QSWSc0qRkleO
rNJGPTxTvTevskVNW60DRUpOMdIKa/X8civbVWhoUxtBzb9EBYPyFhUqhvTKUEoppdZgeeugPqIv
UEfgUlDLGfICVdBnFtWhSJVvhaqczCxuVMOHVBBQ75HxtT1ILmh8OX1Z6whyyltRVFyB8MR8FJVU
IkeVk6Ut6uBYxqvyOLOsXYcA4yy5vCbn1qCltQMT46pMzipChpqHhAYJCTJNdnm7Pphu2v89ABIA
ltVR/iSqytMxmPwP9JW6oib6J2S4/H8oqalXCzWsC3QpzKXwTpIPVq9SoGeV1CE+PV8PT84uQnxa
HtKk8M8uVtNXIT2/XC10GZIy85GSW67eW6w2VK2avkYlqJadgNCAtNwSFSrK1EZpREJ6rkpY7ajY
OdtAKaWUWoNyYKoDgCrUpfAV82t7kZCah9z8EmTnFiEmOV8dmQ/rwlzGGwGgbCcAVLSOIkMd8aek
ZiI2RZWZadmqfKxS8x7T418GgNJW/XlSwMvZ8UR15J+VlYvColLEJqQhs7xNjZfPkQAwuBMAhtDc
N7u/ABAel+r9fHIDVV0zqKsrQXO+GyrSnVCS6oLC1Meo7hjW5lU06iP04vpu3Z1T3oCcsnqk5pUh
u7ReJZ3nyK9sUoV7NfJrOlR3MyraRlHW2IXC2k7kldWpAr8N2cVV6si/DEV13Sip70SBmmeWGiZn
F2S+mSpQ5Kp5F9f3oKZrXH32KKWUUmoV1qpyqai+92UAkFPz8irX5FNLWrR5cnZADXsVAHqRVtSs
zwCIZSoc5FV3ISYlH3EqAEQmZKvxjaowH9Hjy1Uhnl3egSxVoJsuu8tl9hEVGhoQmZSHuJwqRKv3
yjxMB8oqWCglmEi52T68sL8AEJmQ5j0wDzT0TqJxYAENg6toHBJX0DS8hsb+WTT2TaOpf0bbqF9N
w8SGXhmn+mX4gLxOo75n8uUwY3rj/WX1HahsH0XzwNzL9zT0Tqlu0zTS3bQzTh5loJRSSq3F5sE5
XUDL9f1KdZArBbMoB7yV7WNa6TaGyzRyXT+jRI7W1XTGcDVdVccEKtrHUalepd8YX6W6c6u69Y2G
1Z1qvCozZT7VnROo6Z5STqqCflK9X43Tnzuq31eoQomUnc8nVvcXAKQegLFloHVwXiebqnY54h+h
9FhY1U6PzmFKT52y3ylrHlBH6G3IqWjfpx3IV0fr+32PnMrPq5IbDTt1tx5uvJp3mw3LlCcAmvrR
PrKEgZmt/QeAqQ2gsqUfqekZKK+oRElZ+XtZWlZxtJafTsvKK49W9Z05Kssrqk6vlUdrRWX10Vl1
eq2sqjk6q4/Wqupaq7C6pg41tfWorq3blzXa/U8vyvTm76mpU/1vsEptn/auHnSPr2BgdvvdAkBx
XSdaWpqxtbWJleXl93J1ZeVIXVtd/fCuWRh2UA84z/X1tSN1Y2P9yNzc3Di1ym/1KN3e3joyX7zY
PrUS8jrW1jfQPrz47gGgpL4LjY2NWFEF6dzc3I7zage/qQuZpaVFs+Eml5aWMK9eZ2dnsai6l6V/
fgEbm5vY3NjAwvy86n+lvGdFzWtZzct8+F5lurX1df1ll3lKv2ncnP6clZVls2GvXFhYeKvyfilw
jemXVXCRz9g73etcXFy0ONzkvJr/MrZfvNA7aMvT7HZJTS/LYz5M/gdL6nMWF3dP+zqNZVpbW9df
gnU9P3m/yQWljJP/oTHMXBm/rra3/D/lVQ9T81tZXdPBSsbveo+MW1HhY2e55X1Hpf7/nVLle3KU
rqrf8lG5trZ2apXf6FG5ofbrR+mmlC2n1K2trTf6YnsbS8urhxMAdKE6O43cnCRk5uZjYHBEFwSm
Hb/6Eqqdf39fP2Z04b+Mgd5utHZ2qwJjCXkZKYiKScT80oqaTn1p1RdH3gO8QG1ZIeIS0zAyMaVX
Sr5UUrCbF+SrqyuoLMpFwLNw9I+MY0sVpvL+jc0t9HQ0oayqdmdlpfBUhdTODmFDf0nVtKpf5mMq
yFThp4ZLaFhcXMLE2DAam9t2CulNTI6PYXxiWr9f1k1/0fR8ZJlNX3g9bxm+toK29jYsr6ojT3X0
KWc95HOMglgK8+mJYUSFhSA7rwRrG1vqfa9+NPJ5Mi9R5r+1/QITI/3IzM5BT/8g1mUa5ejIKJ4/
78KgXnd5j5qHXibTcsj/yPhMUdZTtkFDdRn8fP1R19KljpK21bSyfdV2395ASXEhZhbljMHKq4J8
x9XlRTQ1NWByagqNTY1Y3zIdZbQ31aC1u191bevllc+Vz3+hhgw8b0dxZa1eXksF88fSUsF4WjQK
4qPSvED+2Bq/o9Oo/BaPSmNfdlQaheFp1FKhb+6hBoCFxWWMDXTh4cNHqK6uwO0H91Xh0IKQoGfI
y8vFUz9vXLlxDY2d/eqDN5EYG4nW3mFUF+cgIjIBo6NjqC4vhn9gMEpKihEU4KcKxTy4ONjjaVgM
qqrKERv2DGHR8VhQCy1Hz0YA2N5cQ1hQADweeyEoOAwxEeGorm9EclIyEuMj4frkCWobmpGdGIeU
rDyUqbDgqwq+0vIy+Ps9RkFZrf6ySmUJU5PjKC8rRd/QiNpxrKO3swkhoaFIVu+NSUzW07t6+qG9
Q61/fTVSUpLg5e2Lmvp6xMeGwD8gEBWVFXqdS4qLkZaZhaTEBPj4PUV3/7AKPMsvC+KV1Q10t9bA
2dEJ/v6ByMhKw9PAQOTkZOOpWj5/X1/kFBSjsjQXPnq+lfB0sYedsxta2jtQkJ6CxNRUODjaIi4l
ExUVFQgLCUZ+YTGS4mMQGhmD/LxsxCYmqXAlgeZVAFheXsH4YDfcHz/W0wcEPlPr0IiE2CikZ2Yj
OjocYRGRyC8t1ztQ8wCwubqI4OBADA2PIDw0AAkJCYiJTkCsek9SWgaiwkNUYV+HutJCRMYmorGh
Dnb3byEwOkUHBUsF88fSUsF4WtxbIH9s9xbKH1NLBeNpcW+h/DG1VCh/TC0VjKdFS4W+uYcaAOT0
vxQuNWVFcHawg58qiHOyMnHl2iVcvHQRCalpiIgIweDEPCYGnyNcFU5yZJiZFIO0vHJsri3Ax8sX
hQVFuH39ImJU4R0bFYHQ8BjEqcLs1u3byMnMUIW8B6YW9gSArQ34ujnALygSGakpuHn7Cv64cBnJ
OSUY7KzB//zPP1SYKIaXuz1+v3AeAaFxSEuJx/nzv+GRrT2yC0rVl2Udxfm56OodRF5GHJw9vbGw
soGB7lZVGHsiJDIKycnJcPHwVIVdJBJVoRoZ4g8bR1ekZWTi/q1rahnvIzomBi6Odrh8+RKcXdwR
GOgHN59AxMREq/BRiBdbm68CwNoGetrrcePKZfj5+eL2zVsICArGE88neBYcjJBnQQgJVMHp6k0E
qiBl5+SGjPQ0PHr4AIHPnsHP2x237t1BREwCklMScPX6LRQUlCDA0xke/sFISVLBw1d9vscTDI1P
Y2XZdOlCF+QqEKzOTyAqOhQ+atqSklJcvfg70rMLkRgVDDcvL4QEP4NvUBgWV9ZU4fkqAGyvr6hl
C0CTDng+8H0WjvSUVDx89EBtTzsUFZbiqfdjvU6Xr/4OR3c/FUiiEKiCHgPA0bm3QP7YWiqYP5aW
CsbToqWC+WNpqVD+mFoqGE+Llgp9cw/3EsDCIqYnRhEbGYb4xDSkpqkCPzJCHxHHJ8Sjq6dXFeCp
aHk+gIqibJRU1evT4jPqPcGBTxGXlIGy0gIEhISiqLgQza0taKitQYk6Aq2sqkRBYT6ePfXE3YcO
mFdHzuYBQC4jlBQVYnF1E3XlBXj8xBN5KkjEJMQhr6gAWWpZkmLiEBDgj8SUNHWEnYVbt24jKj5J
HelG4fmgOtqXHZT6sSzOz6CuthaT07NYVsNGh/rVUXQO6hoa0aqWKS83Vx0hZyA5IVoV7s+QX1SC
jo52FBcWIDoqEk2dz1Gkpk9LS1fT5qG2uhyFZVVobmpCQ1Ob+kG+un4vR+EDvZ1qXZX1VeqoOhiZ
uQWoVetdXVOD+rpa1V2FNBVqMlSAqa2thK+vLxKTUlBYmIfgoAAkpWaoQj8fCaoALi8vQ2hYEHIL
1DzqG9DW1oIitbzBqiAfHJ3YEwBUgTg3jfKKCtRUV8BfBYr6xgbExarCPCdPbfMKFKjtFB4di4Ul
0z0dRgCQSw/NNWVwc3dFVV01PJwd8Cw8UZ9RkbMnYeHByC8uRkxkKCJj45GXnw8vFSiKyuvUF5OX
AI7KvQXyx9ZSwfyxtFQwnhYtFcwfS0uF8sfUUsF4WrRU6Jt74ADQpAo1+YIZBZoUDrKjkX+8DDf9
8ExfArlxTvrlhr7x8TFVcMv0qhBUOwa5LqzfpwKBvE+mN3YYUmCub2xicXYSMVERKCir0dfojcJI
lM+W98mNcFKIb6yb/vGmmxGXsalWVs9bvU9WuraiCCERcZhdXNH3C8hny3tNhYSaXr3XdA+A6VS5
LI+xPtJt+nKbPkPOHMhwU7dpXnJTo2xg0/tkWvVe9X5ZHpmnURhJt6ynzFuWbVu9R/qN7WcMNy2P
aTlE47NMmu6LkGlluPGjk3sp5DNl2aTAloBjfLYso0nTPI35GctsDNPrJcv0cnqTMg9946Yat7W2
pAJbEVY3X+j7D2SYMS+Zx9ammmZnuHH9X9blqJR1Oq2+/E4dkabfzdFofK9Po/I7PCqNwuaolHub
TqsvXrx4o8LyytphXQLYUR2R7+q3oNxoZxy971c54jfdnb5mcfy+VWFBXmWHuLxzRHzalCBwaKoC
fV2eGLA07jUaAegoNA8yp829YehjuzeQfEz3hpHTpKVA9LG0FEg+ppZCyWnRUiAy90BnAKpaB3Dr
1i1cuXIF165do5RaudevX3+pef/HmGbvMErp0frH778jJTUdg6rwf+cAUNM+hDNnzuBf//wnvvji
C0qPhZ9//jmllJ56//rXvyA0PAIjC3i/AHD27Fl8/dVX+Pe//00ppZTSY6IcvEdERWN4ngGAUkop
PTUyAFjw22+/tSotLSOllFJ6EBkAzPzuu+/wlVqXzz77zKqU69aWlpdSSil9XxkAzJTC1sXFRddt
0NDQsMvaWqmQp/Zld319g34E0ny4VB4k3XV1dXqc0b9v1fsa6ut3+uvUZ9TrZYmPj8eXX37JswGU
UkoPTQYAMz/55BPExsbqyhF05Tsb67oCImloyEAq/xG21DipStdAKvgxR6pFfh+k8SIDqeBH6O7u
1mcBGAAopZQelgwAZv7jH/9AREQk8GJL1/Mf6OcFn6fBSElJQZ06Gm/v7IC/pwvSC0qRkZaIxLRM
VJQVoaSiEgmRESiva9QFeHVZIfwDg5CXn4f8wkLERIUhI7dEN4Hc1dGG1LQUDI2No7G2CvXqCH9o
cACDg4NobWlCcWkpcrIy0NTcpD4jHWubL9DW2soAQCml9FBlADDTFAAi9FF3ZnwoHjq4wNXJEf5P
n+Kbz/4XP5w5C1s7O90Y0Y3bt/HYwxUP7t+Bm5cnfvn+a9x46KRrV4qPjUVGRgquXbsCBxdHnDt7
DrfvPURGdhauX70MB0d7PLK5i3/+/X/w37O/wcnRDj+dOYNHji5wcrDFAzXOPzQCKSqE9I5Mo1sF
DwYASimlhykDgJnmAaCttgRJGXnIy0hCWVUtfF1s4ekdiJBnvnD38kJCYiKioyNRUFyChvoaBD0N
VBsyHrPzc0iKi0F+QYFudKilrQXBAYHw9nyMuzYPEBQaifb2VmSmJsPR5h6CIxLVEX86fHz9kaSm
T0mM1Q3yVFVVIioiEsNTC+jsaGcAoJRSeqgyAJhpHgBMzSTsRjee8GJb17FsYN6ogkFLQy36hid0
tzHuhXqfnB0QpJEGg73vFWSItLdfUlqm+1taWvD3v/8d//rXv/Dpp5/uW5lenmqQpxssrS+llNLT
64EDwM8//4zPVGHz1ZdfHnv/9re/ITw8XDcgIdfrXzVeZN79FtX7pLEbed07bn5P/5uUzzcazWlv
b4ednR2cnJzgvKN0v+x3dlbK684w/eqIJ0+e4OLFizoEWPrnU0opPb0eKAC8bAzosjQGJA1+HG/P
//YbEhIS0dXVbbJ7R6Pfkpam2TvM0jTmvm5c93P92tPTi5GRUQwPj2B4ZEfpVsrwkVGlvO44vPM6
MzMNb29v/FP9ky398ymllJ5eDxgA+mFjY4N79+7jwQObY++NGzeRlpaOlRVT+/nyyJ/VKMtjQWlW
eWZmFjOzr5ydncPo2DhGR0fw+PFjfSnA0j+fUkrp6fXAlwB0a4CqgJGb1I67f/nLXxASEqKvux8X
pI11uWSwsDCvLxnMz8/r9v4lAAwPD+vLAAwAlFJK98qbAM2UmwDlHoDjxPLy8sv7FcbHx3XhLyFg
dJQBgFJK6etlADDzuAYAOfKvqqpCQECArlBIbhw0zgDwEgCllFJLMgCYeVwDgBzxS5sBxcXF6Ovr
exkARkZ4DwCllFLLMgCYeZwvAUihv7q6+uoSAAMApZTSN8gAYOZxvwfAkPcAUEopfZsMAGYyAFBK
KT0tMgCYeaICwMubABkAKKWU/lkGADNPUgAYGR3DwMAAzwBQSim1KAOAmSclAEilQINDI5icnOJN
gJRSSi3KAGDmSQkA4tT0jB7v7u7OAEAppfRPMgCYeZICwOTUtB7PAEAppdSSDABmHucAIPUASLfU
A8AAQCml9G0eOACcO3cOn3/2mW5yVgoaa1KW6fPPP8d3331nceX3elwDgBT4z58/R2trq77zX0LA
1DQDAKWU0td74ADw888/44/ff9d3m3t4eFiVskx3797FV/s8Q3FcA4Ac/ZeUlOi2/3t7e/WwsfFJ
bG1tMQBQSim16IEDwL+//RZRkZE7xZH1UVlRoQt2Syu/1+N8BmBaHfH39PToo39xYHAYAwODfAyQ
UkqpRQ8cAOToOiw0VBdGMSG+sHlgg9LqRizMz2NxaRnr62s7rqvCagnrGxtYWpzXhdaKes1ITcbo
tPr0F9u6LvuB5+0IDgvH7PIaJoZ6ERsbh56BIcwvzKO/9zn6B0ewubmppl3B1NQkVtV811S3tIsv
n7OxsYmlhVm0trVjZXkRaekZ+Pvf/44vv/zyrf71r39F6M66HBdkm8m2XFxc0GFA6gCQADA2PsHW
AA+oXDr6+uuv9fZ7Vz/99FN8q8KxpflSSqk1eKAAUNnSj3v37iMzM0sVPAtITUlGY1MLEuPjER4W
hvjEZOTm5SIzPROFRQW4d+smnoZEIjkhHr5eXvAJCEWQvyc81WthbiauXLuBFFVgBzwLxuDoOKor
SpGWkYXI8BA88fKGh4cbPLwD0dc/iNysDLi7uyGnoAReLvawd3mMkrJSZKrp0zMzkaEMfOoLBydX
ODo6K53e6gObh+p9pnVZUuFFAoy1OzMzq5/3l5v+Xjo5rSsCYgA4mF988QVu3LiB8vJylJaWoqq6
GhWqWy63mFtaVgZpjrl0p1+mz8jIwA8//IBvvvnG4rwppfSoPVAAqG4bxJkzPyNKzWBtbR0RocGY
WdlCS02JLlCDQ4Lh5uqMq9dvw9/fH999/il++/0K4hIykJYQhf+e+QnhMQkoUuHg6oXf1VH4N3B2
fQIPVdgPjY0iPSUF2dnZcHVzR3FpMVycXOBgZ4e7Nvdx+64NikuKERbkjx++/gLnL91FUIA/Ll++
DLfHXgj080JaTgEivBzUkdj3+OXXX9/qt9/+GwmJiZiamsKQKjyHh0deOTKiW9cTpXuXe6Z5Oczo
NvqVu+bxtml2+v80zc54k6MYHd2tMUzOBvj4+OibIS398+mble0m95IYDA30YX5lbadvN9MzpnoX
DORsjNwfs9/7Tyil9GN74EsAcppTjvaF8fExrK5vYGtzHZXlpRiZmMbcjDoaVQXV4uIy+rs70Ns3
gLnZOfT1dKOltV3frS6V1sxMTaK1uVkfzQ4NDWFr+wVK87NRXtuEiYkxzM7NYrC/Hx3tbaiorETv
wCBm1bxnZmcx1NeDnr5BLMzPYVR91sTEBMZVgJhfWER2eio++eQTfST2NuW0rZ0KGJmZmUhISHgv
Ey0MM1fGH9Y0loaLxjhZj9u3b+sjWUv/fPpm5cyJq6ur/m6XFWTAydkF8RnZ6GxrRlVdE4YHelFW
UYFQf3f8ccNGfW8HkZufh6XVdfXdnFHh+AwDAKXUaj34TYBqJsaNc9svXmBjY12pRipebG9jWynI
HekG5t0yflv1y3uFFy9M08t1/uWlBVXwL+h+8/cYyDB5r4ExzQs1L2N+xSWl+z4Clmu+ci+A3Awo
7znuynpIAbTfxyDpbk0BwE1/jwL9fDA6v4H5kR64uDjD18cLly5fhr2zA87++gtu3rwJV3d3PLR9
iPLGLqyuLDIAUEqt2kMJAJEREfqUszyC1tfXd2hKYzaDgwO7hvX39+/qt6RMI8qZhJycHF4Dp++l
+RmAtvoK2NraITYxEZFhz+Dl44fYhBQ0tzTiWWAQ4mNjEKaGX71ySQWAbgYASqnVeygBIDQkBOPj
4/rIf21tzSqUswGyTCkpKfrU/t4Vp/RtmgcAYXFhHhvbL7C9uY7lVdO9AHKmyjjLVZqXiqs372F8
dlFfjpJ5yOWnzz77jFJKD1Up16Siu737rXfx0ALA5OSk3hnK437WoOyUZZlSU1MZAOh7aQQAuaSk
21uYn8ecWbsLMsy8HYaJ8TH9+OXK8hLkCQy5n0Qqonrw4AGllL63NjY2u5RhDg4OuH//vr5/zdL+
az8eagCQMwCWCuOj8CQHAEl9sk7W7nG//0ACgJeXF9rb21FcXIza2lrU1NS8VhlfV1enuqt1f3Nz
M1paWiil9L1tampCfX39LmX/Ik+ryT5GzgZY2n/tRwaAY6Y8dSF39tvb28PW1tZqleU7f/68rkjH
0nocByUAeHp66jYW5JFKQc4GUErpx1CQM+tGY29S4Z28inKZW+ofYQCw4EkMAHKqR46oR0aG9RfD
2omMjNx3NczWqBEA2tradFXL1nSJi1J68pUyVQp9udQoNbwuLi5q5ZKjjGcAeI0nNQB8//33GJ+Y
xFBfN1pVwZSakoL2jg6kZ+VgedW07oIkRMmPsh02N9YwODikE2VXWzPCQoLg7+eN2qYOPa2wpQq3
DfVe+R8KxuvMxAgy1bxHxif1vBYXZvUpqfnFZX2zpbCqvqCmrAqMDPSi83mf7mYAoJTS99cIAFLo
S1sv0rhbZ2enPiMg460qAOx3B7m5taULo00LgWHf85ACS73/ddOf5AAwOj6BqZE++Hh7wcnZGU+f
BiI8Mgr+3u64Z/MQySmpcHF1RkBwCOwfSq2JN3HtngOmJ8eRFB8PB9t7uHX7FkLCwvFQjXvs6wcv
d1fcvHUH7p7+iA4PwaUrVxGflAwXRztcu2uD/LxcONnZ4sq1y7ih+mNjovDE0xvhoSFq/rcRFRON
B7fvIjM3HwkJyToAREREMABQukfZNxkHS/JqdFty20jWL7Ytjt9Q30mDrc3d85F2UeQ0sexvt7Zk
f7mp62Yxn8ZQlsnScNF0EGGat4kXuluW23jf5qapDhapB8Z4Hz24so0lAIhSxbjclFxUVKT7Zfyx
DAALczN43t2ta0wz8QJb6oskrKgjV1NA0L0vv+DyxdWv8kNQR54rq6u6EiCps9/A+K0YyF3bqakn
5zFAIwAMDg3p9bt38xrSMjL1naBZ2Zl4ZGevX69dv4GQkGDcVuO/+uxf+Pnns/B8Gone7nYkxCcj
KjwYUdGx8PH0wBf//ARnzpxDYFAooiJjEJ+QiLM//oAvv/wal6/d1K0JSqhwd3PGZ//6B3797RLs
bR/i7oMH8Pd/igsXLiJTfaafjzcu/a7mExaJxPgkvXxSPwQDAKWvlB26PC2yYdqdqQJ0p/Kynf3b
XsZH+lFYUIC+4YmdIbtZXZxFYWGhdmZhRQ8z5iWPq05NzWB6agIz84vYWF3GyOi4HreXyYk/z18K
fdkXz05PYWFxGRvra6irKsfzviE9bmN9Vde6Kuu0vDCL6uoarG1sMQQconrbqjJR7kGSbn3grPZD
cjlAxh+7ACArEPL0CTweP4Z/UBi6n3dheHQC81NjqKupRnJSInoHRjE02Kd2vB3YVIV9RUUZxtQX
ebjvOUYnZ9U3ex3XLl9AWXW9bvint7cbg8PqPf09qG9sQFt7l/pybqCtqQFpaeknLwAMDuofaH9v
j74WNNDfrwqoKbUd+nTVyu1NtTh/5j/wC1fbsrMNnV3P0dnegZmpccTFxmJAbe9N9SMdGhzS20i2
l9SZMDo6htGxcYwPD6GqohKzszPIz8lEY2snBvufo6SsBJ0dnaitq8fI0ABy1NH+sHqP7ASGhwZR
rb6MNVWlSE3P0csnNUT+7//+r15uS1paR2vyVQBo1dVKC/IjNHdbHaJJKDX6t7ZMNVuaT3NalN+3
tE5pXh+H0b93P3BaFRJjw5Cdl6/2XRmIfOYHT3+1/5yaQo/aF2akJaCqoQWDKqyXllchPNgXT7y9
YWdvj5z8IjQ11KOgoFhN24Ho2Bh09w3isZMNHji4q9/zAGLj4jCp9gEZ6sCnuDAfyak56OmoR2xq
LjoaKxEZl4zyony0qd9xaXEBcrNzUFpRofa9tShR/QXFFWhvrkWcOhCQA7SF6VH8euYMWgemsDQ7
jsjQANg7umNDHW1lxz7DtfuOep2yk2Nx9eoNFFQ06H5L607fXfldye9HHiuWwr66uhqVlZW6kjsp
b4/dPQCCp9sjOLt6ICw8Eo/uXsGPv57D48deSM/Iwb3rv8LF5xmyEqPw6Wefwt75MdyfPMaDh/fx
wzdf48o9ez0fN4e7ePjIDgGh4XC0uYGffvsD9g8f4LfzF3H3vi1uXruC+3fvIj8//8QGAME4gpBT
cQbLCzPIy8vD5KypGuWXqIJKjj5W1zd3VaEsSDAzNDDvfhPmRy9L87OYmVXfJoXcAyBVEsuNi+bK
OoiW1tGaNAJAV1c3ZibHVMgc0etlztLSggoHSzt9wv622UlECnvzehFE6ZcjmP3sG06DQkZSJB7Y
3IeTuwtu3rylW1TNycuFm5MtHBwfwd3DFf/+9hv8eOYsbt+5CXsnN8RGRuCxmxsu/nEO3//wX/W+
G/D2fozIxHS0NlSiorEV6QkxCAgIwK8//YigkAjY3LiMZ5Gp6iu5hWdPveEbEIzwkED1m/wUF/74
Q+1zveFofx/3HVzh9NAGdm5eCPb3xqUrF2Fj+xDF1c1qP7GJAD9P1Hea9jnDve0oLKk0dXc3wc3b
T3dHh0WgKL8A0TEput/SutN3V343gpzh+UP9z6R1UnmVRvIEqwgAISoAyDOJUmBIQfQmhZBnPqht
68PK3ATuXLyAsxcuw83dS61ULrw9HOATGIQnzi44o34Ad2zt4f/UB3fu3dUt/fkHRWFrYw1p6anq
hxSNc7//AYf79/HL7xcQFBqB1IR0JMYn4sqlC3DzeKKvXZ+0ACDVHM/OzavQNfUnJ5TTM3MqNa7r
na/0m4+bVYXzlG4yePf7DkPTZ6sAoJTP6OnpRWNjE5qaW3bbJDbj999/t+qqcnUA8PLSZ6Nu/HEG
Dt4h6GprQkZeITZ3Mk9aUgyy1BFZdWWV+q7lwfbBHbh7+2N4YhpNNerIqqkNY6MjeP68F+vGm04o
RgCQ05VS6DMA/FnZR+ZnJSE8Kg41tbXw8/NWBbGbOmi5BztHZ1TX1CA3Nwt2to/g6uqJ8PAwdAyM
qxJ1AXlq/xgbHQw7e1cE+j7GtevXUKyOuFvqy1Fe34LasgI8emSLZ8+C4OriAs/HHkjLLND/m/zk
CLio7+9ATxuuXLmO4KAQlJRWIj0pAtev38GzwGC1HE/wRBmXkISi4iKU17bo96anJKCutQv1lQX4
5cyPiEnMQGdPH6bHBxGt9rXScmp2agIuXbqK+vZetY6vv5+AvptGACgoKMC1a9f05V55taoAEB0V
pa+RijMzM29Udgj9/X2YUoXE3NwsGmprUN/cgcHebhQWFGJ4ZAwjw0NoamxAVVUdOlrq4Wz3AFHJ
Wehua0ZrW5dpHgMDmFGf19vzXJ8Wq61v0sMG+qXtgH6MjgyjtakBuWqnLDty85U+rkoAkCNoOf1j
ClQSuKzVNxd2UmPexYsXdeNLltbVGpTvjb+PN0obWnH290u4e/cOnnh74ZGDE/rHTWdXkmJD4aDC
6lW1LheuXscFFUi9fX1x7/YVuD3xQWCQ2hnbP8TVO466hcuTjAQAKfTlkpBUiCS/U+lnANjt2trq
y0sjq6sr+nquBObl5RXT5ZKNTWysrehQbf6+VRXqtzc3MKv2nSW5qcgtNh2Jr8v81PvkaH1s3HSN
f3JiHCtq+vV10+UXuS4vBwXyDZydmtRnreR/Itf35+YXdDBZnJ/DjDqwkBsGzS/dyOvKyrLaf0+r
/eoohodH9QHImiyXGifLL+sk+3/53ZsvMz2Y5mcAzAOAtHEjHHkA+OGHH/DYw0PXTiS1pe1HuZux
pKREdZfoG0eqqyrVsAp9faO8rAxlykq1YlKzWnFhAfLzC/SwKn39o+LlPEpLS1FRUaGHV1dX6WHl
5WX6taysXB1tNiM0NPRAG8iaNA8Axxm5Y3hwaBgXLlyw+gDgpwr8MhUAImISkJmehrCQAPx+8Qra
+8b0kW5xYQ6SUtPwVB3J+fo/ha866nJ2c0aKGhYWHIiwqFhkZqYhSh1Vvbrp9WQihYY8niS/SalB
UWoxMyowYQB4pWyLTVWQm143tfpuffUqw4zhMkz3m71P3Nre0ttabpA2Wl8V16UpdvUemdZ8fuaf
uXec6XPMuneGG5p/royXAt5YLvNxovHZ9PCU7SpYbQA4d+4cvvj8c93mvOzMD1s5RSwFn7xaGv82
T1JrbAwAH1fjHoCO9nZ9FCSkxIbB5Ynfy+o5F5ZNw8153dmP/d5TcVwxzgBIy6DyHZUbS3kG4MNo
FLqWxtGTo9UHgLNnz+JrVchKFbXWqKWVPq4yAHxcjQAgbQFIRRyCHC0Ry0gAkNP+Ro1lcoaE9wBQ
+v5afQAwzgDI895HoTS3Ko3jSMFoaQVPkgwAH1dLAYC8HiMAyFG/IQMApe+v1QeAM2fO4LfffkNi
YiKSkpL0q2FSUrLS1J2QkPAnXzf8bZq/T9r7d3Z21pcgLK3gSZIB4OPKAPBuMADsT9PNf7vrS6B0
r/IdsfoA8L0qkBwdHPTC7GVrYx1bH+Gyp9x0JGcDLK3gSZIB4OPKAPBuMAC8WdkG8j0yb9SF0jcp
3xW5uVKq/7XKAPDD99/DztZWL0x8qDcikvOQnRQBV09vONk9RFRsHNIysrAsVUcp+p53Y2bOtDMt
L85DZW09urq7UV1Zhur6Fl3F78zMFFqamzC7sISpiVGMjI6pDTGPpcUlTIwN65rourraMTA8qucj
6UgqnLG0gidJBoCPKwPAu8EA8Hblvgi5GfRDaI6l8ebuTLXzauL105nY2y/8aVqz/je5F/NhpmnM
u3e/x3yYJc0x7987naE5bxsv7BpvadghKRjfm2MRAFKj/HH11n08srkHn+BwZCQlIywsBE+Dw7C0
sqIf3yvKy8KNi9fxfHACdeV5uHH9Mu4/fIA/LvyB67ceoKqmGk62D3Dr9k14envi1/9+jzPnf4e3
txdu3LgOZzd3PPFww80bl+Ho6aurpCwuYgA4TjAAnEwYAN6uHNGZ6vA4ZFWBsbm+gqy0NNQ1d+78
Rywjhcv4+JjRp5brz0+yGKwsLWJyckLXFaB5saUrGlucn8XKmun0tIFMp9kpvN6EtAezqSZbX156
WanWvDrwW1he1d1SU6m0Q2DO8sIcFpZM7R28ic31VXR2tmP95cM4qkDd6bLE7OQI0tR2a2jt3hmy
h+11ZGek6XZlRibndga+Ynh4RG9/i/+XAyj/J+N7cywCQFVZHhxs7eDs4oGUtFSEPXuKR3a2CI9N
Ukf2a6itkWf+q9HY2Iq19Q3UlhfA08cPdfW1qlB/DBdHB9y4cxMPbR1RV1eLuKgwXP7tLO7buiM6
Mgx3796DX2AQwoOfIk9tkLSMDKyq70ix6mYAeDeMhGmO8aV7k4cBA8DJhAHg7X6oAKB+vYgJfYrY
+BT4ePsgNT0Dz0JD8HxgGPnpyaiqa0RuRiIS07P0/yrIyxEBETGIDPLDd//+Fv4BzxAWHob6lnYk
xceisb0TUxPTaKyvQVZ2Ngrz8hEZEYbsgkJ4OTvg0oWLeKj27ZU1tRgaHFT7pH7Y3b8Jv7A4rKnf
98LUMMJDwtDa1q7eF6mbLo+LikBUdDSq61rQVFepumMQH5uA3OwMRMREIyM1ATFxCZickaq1l9WB
4iXUt3ZidHQYBbk58FIHfskZOWiur0NcfIKaZwuiwkMRrebT2NyBsqIs5BVXYqi3C05ODsjMyUZk
dASiQwJg88gZw6Oj6OnuQmpSDDLzizH4vANJSalIiAmB2xMvOKj1iYlPRnVlBZISk9TvvlXXqljf
9hxJEU9xx85ZrecwgoOD0Ts4jIwUteyqII4Mj1VbX+1TLfxfDqLsb43vzbEIAMaNC6Is9PBgP6Zm
5nUrUlK7lTlSqYTUgiUVhcj0S+qHITX7SbWSi0vLuo15ec/ywrzakSzoCirWVIgQpcVAo4lEQer7
/+tf/6qfBjCUmwLl9euvv9aFpqWVP24eZgCQL9jU+ChGxqcwPzuNucU3J2v5f8r/7DBgADiZMAC8
3Q8TACSYb+Cxk6v+PzSW5uPsr78hKiYSF879gE8//wpXVaHh4uYEl8dPMDW3jPhwf3h4e+H2rdtw
dLCDrc1dhIQGwdHuPi5fuajCQaLaH8+isCBfV6rm5eWNp6rgs31kq5v9dlDv8fP3hMOjB4hNSEBs
TAQeOTjDy9MdldIuQWw4sgsr4e/zBKFhkbh07gzuqfc9uvcQru6PkZ1fAD8VVPx9/HH96iX4Bgbg
0f3r+O6/P6C6thYJsRFwsrVBaGQMkpLjceXKPQT6uuGb//yAosI8XLp6BY6OTrhz/QYe3bWBxxNP
PLxzDV/95ydk5BQhXYWeR2rZPH09cffOXdg+uIeMrAz4ernrirp8/b1V2fANfvrpZ9y9dxv3Hjkg
IyMbT318cP3aZXz3w0+6vYWgZwEIUMvf+7wN2aVVKMnNQFBwGP74+Qf4B0fB3e4uXL1C9HY/vQHA
zk4v7MrK6suCWX70+m5GtVOQfino9ypVX8pOQ6bVwUFNv75malFMz0eG78xDpjHmba5sHKklUB5H
vHLlyi5v3bql6ymQgtPSyh83D/sSQFVuPH65cAPFRflIz8lFamoyOto7VCqPQmxcPOoa29Cmknpm
bqGu9vOwnoFnADiZMAC83Q91BkAiQEN1ERztnRAQGqOPam+owj0tNRVuLk6Ii0vUtauWlJaqALCE
mvIS1DU0ISwsGD7ej/Hw3nXcuHkL6VIIervD/1k0utRRu7RX0Kr2Cc2NNbB5cAs379sjKS4GLq4u
aGxpQWFejn6/s4c3/PyewNn1MeqaWlGSlwWvJz5IS0uFi7MLQoJDkKf2MeWFpYiKCENVfTNqK9Xy
FBboRuHa2tsQHhaGhPhY5Kppenp7EB0ehCdenrCxc0BcQiZqqioQExOl24Fxd3HEY09/FOTmozSv
CCmJcXCys8eNOw9QVtuCtuZaFYDi0ayWMTY6AkEBfnBycoSrh6dapzpdc6y/vy881TLKfq+z33Q/
WVlRiQoY2XB2ckd8ZCguX76EnMJqjAx0oaiqHoM9HbC1tdNPovmqZZPGlzKyCvX2P5UB4FtVKMkZ
gJGREfSqf9qA1Mf/ER0U9Smood2qYbJMQUFBJ+bywGEHgKbqQvXjdMCt27fUj9cP3371Kc7+fgEP
bt3E/Vv3Vdp/gC8+/wzffH8GvSPTvARA3ggDwNv9YPcAKIWVZVPLlPXl+ajZuRdge3MdG+o3ZyCN
9ZizrfrrKwpRVt2o++WAS7+qgy+D2fF+3L9zEzmldbpfzgYaewO5Xi9nIV5sSxXB0m2a/9rKsn59
0z0GljD2M/Jqqp7YtOzG58nZ4NXVP89TDlBk32KO+bw2Nl4ts4F8ZzVqvLHcgpy17misRnF5zc6Q
V5dAjfXZVNvVmJ/5/+GwlM8zvjdWGQAqW/rx4IGNSpHhGB4Z1S3Bzc7OYeZjOTOnG9GYmpaGhmb1
54uTk9NYWlrWN6U8ffqUAcAC8uVqqi5RKb4VT71c9H0b167cgL2zO3KzspGfkYPk5Hg4Otrh8ZOn
+hKB0fTwQWEAOJkwALxdeQpAF2qq0PwQSsFhdEtBbwyT364xfK/mhY7Rv3caKVwXdn4De6cxf//e
4XuntdT/Oo35/Xl6S8NeTb93uPm4vePfNL28yn7ydeP0/PaMO0xl/vKbku+NVQaA6rZB/Prrr3B1
NV17koAkG2y3etQHQeZv7GTkh2VUPSqhQJqmlbrIGQAsI18w2SkbiXlrc0Nty3mdkmW4KK3XyR21
MtzYaR0GDAAnEwaANyvbQC597qfV1IMrzXJbGv7+yv/T0nD6YZTviWxzCQJWewlAKgJ69OiRXpjX
IQWHFCAfQqPwb2trQ19f384PbAaTKgQwAFgnDAAnEwaAt2uEa0r3o5RxgtXWBCg3AdruPAVgCSmQ
ZecpOwFR+uXGPmFzYx3L+mZA07i9yrT6NMiK2oGoQkOuvejHLV5sQdq2Np4ikGmNnc38/BwDgJXD
AHAyYQB4u7IdjKpeKX2b8n0RjnUAkELcuCQgrC/PISczC33Dk7r/TXR3dWJ9Cxgd7MPUzBzaG2tR
U9+qdiwzWNypNMJAPmdmZpoBwMphADiZMAC8WdkG8j2SGwEpfZvGd8WqLwHsJwAYNzTo2pI2VhHg
7YHE+CQ88fRBXm42QiOjMTo+gYykBLR1dCIlIRJFFaa7Ly+e/wkFVS2wuf4bvJ4Gwe7efUTFJCEh
LhLVLV16GiNgyOkS07UTUwCYmOBNgNYIA8DJhAHg7crlSvMDog+hzH8vckOgvlPfwjSm5dnp2Rln
Pr/dmuZjmvTVfP483W7NP2Pv/KVcsMzrl0UwPtscWT5L05tr/j5j/ubDjMf53obx3g+lIGcB5Htz
IgKArNLa/ARcnZ/ocZmx4bh0+Soio8Lww7+/wJdf/xvXr16Bu4cjPHwDsLm1DT9vVzyyd8H9B/eQ
mpWD3OxMhIaFwdvHC3XtPXo+xj+CAeB4wABwMmEAeLvGEd2HVO8LV5dQogqN4fFJ3YaKJeRgbGHR
9KieKvUwMDBo6t4H83OzO13C6wrwPzM7p0qavbzYwrjaVy8tLWBsYgrL6lWeKnsz6jNlPTfWMTo8
qGuD7ejZ//K/2FzH8sruRwlnpyYwOjaBrZ3tODM7o5ZlEVUV5RgZn8ZAbxdKS0vR1dOn/pcbejvv
3faHqczf+N6cjDMASvnH5abFwcXBBeFxKQgNeAybR/ZIjI+DvZ2DOrKPR21tNfKLivVGLi7Oh7//
U0TFJaAgPwdhwf546h+AmJgYdPaP6M8wNtbeAMBLANYJA8DJhAHg7X74AKCOHrc2EB0SiKioWCQm
JMPd2Q6xaTmYn5lEVno6ptQ+Mic1BXHRkYhPTMKoKtx6Gsvw06+/IT0jE3WNLagsLcLo1CwmxkZU
oTiOtuYGRKt9bv/wJMrzM3DXzhm19TUoLimFl6szcgvL1P45X4WIfqSmpmFyfhmLc9N6XzUw0If8
nGxU1dSq+ZYiLSUejW2d6GqqR0RcIjbVvjspIRYJMeGwc3JHTlY6UtNzUVyYh6S0dMxMTiI6Ogqt
z3tRX1GKclUm2D60w9rmC1SVFSPgqbeuytfZ2QUlpWVIVe/p6+vH8+7n6FGFdWtjPQoKitDd1YGC
vFxkZ2ejsqwINjZ30KCWY7C7DcWlFYgLCYCjszdMV92B1OQY+Pv44JGNvVrPMjjY3oGHt79uryYr
O0e3ZXDYlf+YeywCwI//+Q8cHOz1wlhibwAQhTm1YxDyMxJe1sK0Kg1DqGkl2RnpSl7NWVtZepnc
zOdpHgDkERg+Bmi9MACcTBgA3u6HDgCyu9xcnoW3l5/+n8xPj8HD1Q5PfDxx7pcz+Pbf3+OPCxcR
m5SnCvIU/P2Tv6BzWB0w9bXgt3M/IyA4Ap6O93H56l3dME9qQjQycnJx4+plBIc+w9VLv8E7IBje
fj5wtbPB52qfZG/vgHO//qznbWv3COd//w1lDd3oaqxAYnKiroXv+vUrcPbwgfODe3BwsYOzkx08
fALg5OaK/skldNQU4r6NLUICfeAVEILCzHRcUZ/p4emBqzfu4Fl4OK5fu4QvvvgK586fU/N4oo7U
NxGfEI/MtHjcvPdIHUQmqCDgi7Cgp7h65TJ+U9PdvnMP//7mK/z4359w5fJ1PAsKwtVrF+Hl44sn
j53g4eGixn+DH348A/uHtnB1930ZAGKjgpGTV6DCSQyiYqLVge4DJKRmYXpuUVd9PDxtOrNi6f9w
GFp9AJCKgB4+fISIyCiMjIypH7v86Of1aR79Omt6Nv/PK2cq1I1CXjBeZZihDDPvFw2MfmOe0i0B
QI7+x8Ym1Ocu8BKAlcIAcDJhAHi7H+MSgNoZoiAjCW7O7qrQjkZBYRFq6+rg5flYFWIOSE9NhY+n
D+LjYhAU6IuiygYsz00gLi4K3ur77u35BMmppgKmICtJF8DOjnaq8LmHiLBw+Hi5wtHVFW4OTrh2
55EOBvb2trCzd0JBfh4e3L2BrJIGzM+M4Pat63jiG6gKdm88sHFEgDqirqytRV52BoJUQf3Hpct4
Pr6E2aEOPPYJ0g3Ehceno7WmHM/CItHY1AA/P18VGGzx0NEJ9rYPERuXgKDgIMwtLCIhLha5eTmo
bGzXyxsXEQxnN08kJ8TC8/FjBD4LQVxsJOztHBEXnYCW1hY8VgHE1s4F9Y0NKMjLhpOjvQoC3uq9
4Wr6SKyo76p8X3OyUpGsAoy/vzdCngXrdg6Cw6J0w0OxsdGYmJeb0D/cZQAp04zvjdWeAZB6AJyd
nDA5OakK3jFMTU2pbnFSX9eRHcDHRI76ZRnkTIC8SstN//jHPyyu/HGTAeDjygDwbjAAvN2PEQBE
YULtC3VTuy+2XzatO6f2i8Li3AyWlk0NgMlyyVlaYWlxHmvScJtxcLW1iUVV0ErVwtmFZXqalaV5
3RTw+prpHgI58NpU/9959f+WanrlQNA4VJP1lcrF5tX3YF397uWUuVxjl5v1EiMDce32I8wsGtXx
ml4EWR7jzPFoXzuuX76AoupWrK8s6ZZl5bPlHrGa8mJ0D4zpwlIOLLe3Nl41XWzGrFpvqdhMau7T
3TK96paPlEsm8+qAVeaxvDiHalWoSsFqNJA2MT4GOWZdX13G6OgIhvufo6ikXL/XfJsftsciAPz4
44+60Z06lTBlIc2VZxeloZ6ampqPpvG5oiyTi4vLgTaQNXmYAUC+YJb5c9WXhpaQ4fJFfRcYAE4m
DABvV86Iym9m787+QyjIb9NcwRgnGMNlmDFe9gF7hxm/cym49/LqfWreO93md9KbjzfNw+S8DiGv
jqJlmPFq7tbmur6ny0CGCXr+qntDhQ4ZZr685vN5uUw70+z0vBy/M1p37+bV9ObjpFpkY14fUvkM
q38K4Ny5s/hyp+ld2ZlLM7yGRr/RRO/H0Phc47PZHLBl5AvW3tqEoeEhFBeX6mRbVVWNuYWdu4It
MDM1gc6uDpQU5sLXxwe1Te06zb8uHLwOBoCTCQPAm5VtIN+jj1MV8OEq/0fR0rj3VS4Ty1kDS+N2
a6rt9XXjpE4Yy+M+nIe9LV6nfI7sq602AEhzu19/9RW+/fZbq9TSSh9XD/sSQGl+JsJCgnHnzm3E
xMYiKioOiTGRcHRxQEVlNUIDfPEsJh6ZiTHwfxqAO1cv476tPZydHVBUVgafJ08wNDGnkuqfjwre
BAPAyYQB4O1yO9B3US6vCFZbE6C0wy9nAORGO1F2mh9L4zONgtHSCp4kDzMAyAmtxalh/H7uNyQn
J+DqzXuoqqhU/WcRER2BC7+fx7OIaLg5P8Snn36Gs79d0Hf7+vj5wNnVGYOj4wj298Hz4amdue0f
BoCTCQMApYer/G4Eqw0Av/zyM8789BM8PDyOzJ9//lkXjpZW8CR5mAFAmtR8sbGCqIgo9A/0IS4x
BaPDw4iOjkFbe5u+S9f50S1cuHUfKYlxiIlNQV5WCsKiYlR/NOzsbJGWU4QNNR9eAiACAwClh6vV
BwCpCMje/vX1AHwMpDXCTz/91OIKniQPMwDIdSUpiM2RYQZb68vw93qM1JzSnSGWkVNU5u/bDwwA
JxMGAEoP12MRAOzs7PTCVBZlwu2xF9Kyc5GXm4e6+nrkZWYhwM8LwSEh6B4cx9rqErLSU1Hd0Iwl
tVOVG8s6Orv1nZyysosL85hfkAoWXuxUIiTt0Msdkdu6YaCpmVksquEdLY3oH5nQn/vwoZymZgA4
LjAAnEwYACg9XI9HANipCjgh3Bc2Dm6orG/DaG8z/v7J53je14d7ty4jMiYGs8vraKurRHhEJPy8
3HHv3m3Y2NrgzM+/oqq2HvnZaXj44DZcvHzg7/0Y537/HYEhofDxegJffz+EhATD3dkWt2xskZmR
jozsAv25DADHCwaAkwkDAKWH67EKACnRAbh+9yHikzKQkpioawhMjIvBrVtX4ePvj96RKVSX5iMp
JR3uTnbIzc+Dv58PHj14iId2D3Dz1i3EJiQhKysdZ8/8hG+//Q7PggJx/eol3Hlgg4iIMDzx8kZ6
ZiZio2OQmpqpP5cB4HghFXYwAJw8GAAoPVyPVQCYmhhFaUkJKitr0Dc4rIcN9PeisaEOxcXFGJ2a
x9hAF5LTsnRNgdLa0uTEOHqf9+gGgFo7uvSzj9Mzs5iZnEBLc4u+DDA5MaGcVMOnMTo2pnfGRbmZ
KK9t1p/x4MEDXdufPPNv7lc7jydaWvHjqASA79X2ltoO5ShaGks6jkpNXtJWw8WLFxkAThAMAJQe
rscqAOx6GOzFC73w5pUrbW9vqWHrmJqa1tPqGrHMJ1DIDWVGrVPCqxqoXtX0JEp1jquqMBEcHR11
Qf/TTz/t8pdffsF//vOfExMCjAAgYaqhsdFiTYjHQamhUTx//rwOaZbW1RpkAHg3GAAoPVytPgB8
o460bR890kf0vb29ujnI/v7XOzAwgOHhIYvj9qMxfzkNPqjmJf2tra1oVAViU1OTtrm5WfU3oKOj
A76+vnpHbmnlj6tSaO4923H8lLMzltfPWmQAeDcYACg9XK06AFS19uPO7Tt49iwY3c97MD4+oY/u
pd7mj+bkFGZ2WiE0lOohV1ZWdSgJDAw8Ma0BGhq1HB53La2bNckA8G4wAFB6uFp5ABjA5UuX4e3t
o1ubkmfCpeWnj+W62jj6noHp3Y5PSEuEyvHxE9UcMP24MgC8GwwAlB6uVh0A5BKAHMnZ2NjohTkK
pJEI2dHIDlqUbgkBcnaAAYAeRAaAd4MBgNLD1eoDgNwEaLtzE+DHRm4GlAAgO2e5J2B4eFh3MwDQ
w5AB4N1gAKD0cGUAeAMSAGTHLJcBIiMjERUVpXc4cg8AAwA9qAwA7wYDAKWHKwPAG5AAsLCwgKmp
Kb2TFqWbAYAehgwA7wYDAKWHKwPAGzAuAYiykxGlm5cA6GHIAPBuMABQergyALwF4yZAcxkA6GHI
APBuMABQerieiAAgKyFV+hpH6YYrK7v7X+fKyorW0jjZwcg9ALvlJQB6cBkA3g0GAEoP1xMRAGTn
uba2pldGlOZ9ha3tV9X9bkkdAkrpNtqYN6aVpoDl/VLXgAlTdcCbG6YNJNMbykabnJpiAKAHlgHg
3WAAoPRwld+NcKwDgBz9S4Fu1OW/vrqIyGd+cHZ0QUNHj+pfweq6qXA3VtjY4c6M9sHJ0QERsYko
zMtHfWMTKkqKERsTAR//QJRUN+p5GvOX9gYYAOhhyADwbjAAUHq4npgAoBv+UQW0UJWXhqiEHGxt
LMPR5iHs7B/B51kIfJ+44cKlawgM8sfV65dQ2dSFqYE2/HL2PKLjU7G5voKfvvkSueXNCA9wh9Nj
HzS2Pd8VALa2NhkA6KHIAPBuMABQerieyADQUV8OTy9/lBUXwtnBAU+DAhH81BOffv6FWrkbcHB0
Rlp6MlKyizE11IHLalhGdh7qqsvh4eqMlLRMeHo4wT8kEk1t3QwA9IPIAPBuMABQerieuABgCgEv
UFOaj8jIOIwO9eHOjUsorWzE+FAv8nIL0Nffj8GhQQyPTmBzdRGx0RGIjUtESVk55ELBcH+32iB5
iI6OUe+rZwCgH0QGgHeDAYDSw/VEBoDtnZv/hM3VJfQPDO/0/RlVtr+VV/NlAKCHJwPAu8EAQOnh
emICgBylfwzkiQEjAExMTDAA0PeWAeDdYACg9HC1+gDw7bffvLU1QNkByM5Aqu09XE21AJornzM9
M4MpngGgB5QB4N1gAKD0cLXqAFDVOoArV67A19fX9APXP3LLyk5gaUkpr4fl0pI6ypd2/ydeKv16
mB7OAEDfXwaAd4MBgNLD1eoDwK2btxAYGISenl5dAMuR9+Tk1G7VMBn+IZR573JSHfmrwn9+YQGj
oyMMAPS9ZQB4NxgAKD1crToAyCWAb77+Gg4O9vqU/MjIiDr6Ht9RHY2rI3A5Chel2+jX3cZ0O8PM
p3k53qx/1zQvP2OPL8dPYGxsTC9TSEgI/vGPf1hceUrfJAPAu8EAQOnhavUB4Oeff8avv/4KHx8f
PHnyxKqUSxOXL1/GV199ZXHlKX2TDADvxusCgAzfXVvn6939tNCflfGHNY2l4R/Tw1qP/Uxjafhh
uZ/5H8Z6iEZ176dFqw8A586dwxeff65Ps8sO05qUZZLC/7vvvrO48pS+SfkOMQDsH0sBQJycnNRn
B/fj6OioxeGGMv6wprE0/GN6WOuxn2ksDT8s9zP/w1iP4eFhfVb3NJ1NsvoAcPbsWXzNI2x6AmUA
eDdeFwCkhc7p6WlK31v5Dg0NDWFgYECfCbBUWJ5EGQAoPSIZAN6N110CkKa8jdO3lL6P8v2Ro38J
AQwADACUfnAZAN6N1wUA3gRID6p8f+T7xADAAEDpR5EB4N0wAoBUyCVHa/LKAEAPQwaAYxQA5KY7
uflOHr87iN988w1v4KNHJgPAu2EEALnpTx7FnZqa0jttBgB6UBkAjlEAkML/4sWLCA8PR2hoqH4W
33jd222uDDcMDg7Wjxd+/fXXu+ZN6ceSAeDdkAAgtXNWVFTAz88Pzc3Nup8BgB5UuQ+AAeCYBAA5
epdn8A+KrOxBVo7Sg8gA8G5IAJDT/vI4V2lpqb57m2cA6GHIAHCMAoA8f+/l5aUXMC8rDf2Dg8jI
yMDg8AjGxsdQUlKMoZFR5RhWlhcxOjGpptxGXmYqcktrXlYacvfuXQYAemQyALwbEgDkcS0JAVLo
yw5b+hkA6EGV7w8DwDEMAJEhARgaG8czv8ewe/QIbk884eTiBI/HT+Dl7YNAP1/88suv8A8Mwp27
txGRnKvfxwBAj1rzACA3tUkwpa/XOAMg28pQ+uUxQAYAehB5BuCYBoCCrCTY2tkhOCAArs6P8NjL
E+6PPZRP4OPjjbu3b+Crr76GvbOrCggPEZ9ZrN/HAECPWiMAtLW16dPZshOy9COllH5YGQCOaQDY
XF9Da2sbZsZH4P3EDf2jE/qfOTE6hOd9g1hamEXfwBCWFufQ1tqK+cVlPV7+yTdv3sQnn3yCL7/8
0ur94osveMPiCZMBgFLrkAHgmAaA1dU1fXpwbWUZM7NzusGHtbU1bKh/6NaW2qGqFTT+odvbL9Tr
mj6VKCvu6OiIM2fO4LfffrN6L126pBtGkkcXzbcFPb4yAFBqHUp5wABwjAKAPAUgdwP39PSgr68P
/f39+p/Xr7ql3xhmuHeYdD9//hzd3d1Wb1dXl17msLAwve7m24IeXxkAKLUOGQCOWQDw9vbWAUBW
QHac76P8o+Xsgbxas8L4+Liuy4AB4OTIAECpdSi/PQaAYxYApFCU0/2WVuwkKV/OsbExBoATJgMA
pdYhzwAwAFitDAAnUwYASq1DBgAGAKuVAeBkygBAqXXIAHAMA4AUiqcpAEj7BQwAJ0fzACCN3MiO
R/7XlNIP7959LAPACQwAsoLW7H6WWb6ccsMjA8DJUgKAPM7a0tKCvr5+TM/MYmpq+s1Oz5i0NE4p
j8LO7Gc+b1CW413nMa2WSTTvN3Wr4Xpeu8fv9eW46VkVhuZM/W+YntL3dXJySn+3zPe5DAAnMADI
OKknXKoKtUZl2fYuv6XppN4CCQC8BHCyNM4AdHR0YHlpSe14Xugf3daW6ckPHf52us2HSR0Xguy0
zJH3z8+qEDBvqlZY6sTYmeUutswGyjSC7PQE6d/YWMP8wp/bJjB2FjJvYUt9vrF8G+q7u7S0DGPO
6+s79W+srevP29b1c6ybRqqJttQ4GS/KfOW7v7G5ha31NYxPTKj5quVQ/cLmzuvL7WO2/LIs8n5j
kLzsLN7L95kj22xjw7Td9OfvTCvb17Q8pvkZnyHDZZsY8zTnTdvR9Dm7gzy1DuW7OT4xqfetxn6X
AeAE3gMg9YRLc6HWrCyjLKv8I6RBGHHvNEZQkGaMpSVE821Bj6/GGYDGhgZ09fZhdWURwyMT2N7c
UK+j+ge4sbaMgcERvFA7pZGREbQ316O5oxvDw8N6/EDfc1RWlKGlsxdzk8PwcLSHX2gEJmfmsKa+
VwvzcxgeGkZ5ebmazxB6+4fUPFd0/RlSt4SU31Pjo1hVO8WJsRH1XVuE/f3riErL0/3DwyPo7mxH
WWWN6fN6u1XAWMLUxChW1jaxvbGCtvYO5GSmorqxFZNjw2htqkdWZg4W1Xd3c3kat+/boLO7GyVq
HtOT45hbWFDf51VsquVbWlnW862prlK/gzXEhQTgsacXYpOT8Lx/UK+zFOtDQ4NYVe8ZVf2zU2Oo
rKpR696j1nNBv39+ZhLdPb2YmpzQl1NG1cHBixeyzYbR1tKAto7nKkTLvIRtPO/uwtzSCtaWFzCp
jgo3NtRvUG0D+a1tqXJ9dXEWHZ1duqIx+W0uzM2qZRhGWVk5BtV27Bscxvrq8s52HNBBQraXVDw2
NjKE1Z2QQayTGfUdMQ8A8j9mADhBAUCOmo9DC2tSwBs1ExoNwrwOBoCTpQQAade+vLQU//7+P3Bx
cMB9Gzs4PLqHL776Gs09w2gozsQfF6/Dzdke33z3Hdy9fGD/8C6+/f472No7IDwyGk4ONohJK0RV
URZq2wf1dyUpIQ6llRVwsLHB9WvXcenyBdx/5IigoCDY3LuLy5ev4eZtG3g9eYLvv/sWt+/dg72T
hyoMp3Dl93N4pObt6uqG+7du4/cLf8DjaSRG+7vg5uoK78euuHX3IaYXVhAfHoTohEQEPPWBp6cH
3D28kJqRjR++/hS51S3A+jwe2tzRbXO4ebjhP2q5r9y8DT8fT9y8cR2RiZk65BQUV2BmbABBEYl6
+WvK8nHr+mV8o7bT0+BQXPnjN9y4eRP+wdGqoO3HmR//oxv78vEPwvTMNPzVZ6dmZsPV2QkP7t9V
2+p7PAsNx+XfzuHn87/hj/Pn8dU3XyMmqwTz4324cvkifJ/64+qF8/jvr+fhr7rv3r4F58e+KpSs
IOypN+KSUhAVE6vCRiVs795VO8bruKCWw8bOGUHPAvFQ7SwvX7mmt4Wnuxu++/e3uHP/HhycPTC7
tKrXg1gnclmKAeCYB4A3XQIwAoClin4M9g43NDDvliOwN033Psqy7Q0AlqYzYAA4Wb4MAOoI/ttv
v4OffyBsbFQBYmuDs7+cRWffOHpa69QP8gqcHWzxuyrIgkIi4OvpivPnfoOXpw+CVOEYGxOFrLwK
TAz1wM3REdGJKYiPC8fVGzcQEBgMmwe38djdHfb2Tnga8BQ+voEoyC9EcXEpIp4F4PzZX/HIxl7N
o0x/z5JjovHkiSeKy6rVeH9cv3kDccl5GFfz93BzhacqyOOSTDuIhIhghKtCMioyDE+f+sJLBZT4
lHQVPB4gNb8SawuTKCgtQ3pCJB7Y2uPy+bPw8gtFZEQI7qhCNaOoGkszI6hv6cSLzXWEqiDh6/dU
Febp8HR1wG9qnb08vfHLmf/gytXbaO4cUJ+6DWc1f/fHj+EfFKZ33MF+XoiOT0R6eg5S4yNw9tdz
8Pb0wn9//B72ju5weHAPP//8C1LzqjA13IOi4iJkZaTg5pWLuHrzEZLiY9V2ugffoAj5sSM80E+t
RybCQgPU+FtqOz5TO8dbeKwCkL2Ds9qO/spQFBQU6e0oy33+119hq0JWXlGV3jbEetkbAHgJ4BQF
gNnpKd0o0OuOtbc21jC3sKS7W+qqUF5dr3Y5f2ZkoA/dfaYjLkHm/Sb2Lsd+A8DM9CQ2NrcRFsYA
cJI0LgE0NzdjaGQUK0uLmJ03nbWaVTsoQRq7khvjhDk1zLjuPDczo18nx0fVjmsBS4um7+vs5Bim
VP+L7U2MjU+o79YKZufm9fX6hbkZTExO6+lkhycKK4sLWF2TtjJM399N9V2U39AL9VlzszNqHmtq
/qblmp4YV0fI668utG9v6FPj6zunvJfm5fT7hO6WU/pyTd24T0BYVeu4vvHqernMZntbrrGb5re9
sYrB4WFs7fTPz87qcbOyHGbLuKZ+MxPjY1hcWTP168sno2bbR20zVZDL+9bU8q+r/YSel4xUw2Xd
pXt7Y13tJ0yXIYyQL2yur2BkdFz9Ltf19eJVVVjMqu0q23FezXNyyrT99XbcWfflhXms7dz7QKwb
uQmQAeAUXALYGwCE9KQolNR3qF//JhLjotHW3Ye6qiKUVdVjuKcbt2/dQF3XMLqbquDj7Y/wsAg0
t3UgLi4W3T19yExPRElxIc589yWCo9NQWZSP2NQMvTPrb29EYmIqqsvLkJ2Xj97+QYyODGNkfOpP
y7KfACAkRAdjZGYZURHhDAAnSOMmwNbWVn2tXQrqOaUcnczPL+g7lo3uaRUC5tSr3J0vw6Rb7pSX
wl/umpe7/2V6o994nwyXYfJqPn+Zj57XznyN98g8ZmZM85Nx8p7ZWXFn/numffk5O/Pb+xmyozU+
xzT+1ftNn2G62994CmBafbaxvjKNXk/1Oq+CkX7fznSyTMay6GXe6Zdp5b16HmbvE/X4nc/Ty6TU
75PllWFqGr3Men6y3eZVv2l5TP3G6/62I7VOJ1UIlnBsXnbI/pcB4JQEgLTESLT0T6KjrgRPPH3g
5e6Ee7eu4otvvoKjhw+eeHuhoWsQBckxaHo+pt/zzN8bT4NC8ODGRTi6OuKxhyvs7G1x+9oNePg+
hesTLyyoz/Nyd0dVbQMeO9vg9iMHFR5C8NDWAf2jU3o+5suy3wAQFRaAwekVREcyAJwkjQAg9QBM
TU3p74B8nymlH1b5rZmXFwwApygAlOQk4ZGjK9LTUuDh5obgZ0FwtrXDnYcOCA0Lxp17t9HSO4bp
0X48cXVRISEASSlpcHFyQuDTp6itr0dBbhbiEuIQGRoG/6deuHrrLpq7niNWFfjPgsORnBiNuw/s
UV5ciCdeAfpzzZdD3G8AqCjMRGJiij4DwQBwcjQPAKwJkNKjkwHgFN0DsL21icnJCaysrWNl2XTt
dH1tRfWrD32xpY7kX92Nv7q8iLkF0zXChQW1FopdNwRurSPQ2wX2br6YX17T75+fm8fa6gqWV17d
Cbzr83fcTwAQBXnkKFSFDQaAkyMDAKXWIe8BOEUBwCjcVcfOy06/wug2vyFIMLpl/C7Vn9woZbqx
yTTMNJ1+efl5xmebK8P3EwCMefEpgJMlAwCl1iEDwDG9BCD/OEvKykmlHtaOcSeqfOkkDLwJBoCT
pXkAYFsAlL7dvYXXQTSfl8ybAeAYBQBfX19dS5jsOKU2PUvKGQKpQtdaleWXZZRllaP/iYkJPczS
dPLljIiIYAA4QRoBQNoCkNrkjLvcKaW7lbv3Z9U+UB7LlIJLzvzKAZMc5L2r8j7zRwCNgpAB4JgE
ANlxPnnyRFeHKkdPUpf665RHrKzZ/SyvFBDyxXz27JkOP+bbgh5fzc8ASAMl8rw9pfTPrqyuqoMl
06N7UmjJQZMU5lKQv6tyyVUOuOT9xpkAngE4RgHg22+/xX/+8x+cP38e586dO/HKeoo//vijXnfz
bUGPr0YAaG9vVzujN1/+IeS0I/UtSOEtBZcU4C/vw3pHBZmH3CPGAHAMA4AoBeFXavhp8ptvvvnT
dqDHV/MAIDsjQsjrkUsB5gFACur3UUKAnElgADjGAYDS4y4DACH7Z38BYOeRqR0sTWMpAMgrAwAD
AKUfzd2XAKz/iRVCjpK3B4AX2N5cR39/r27qum9gEJtblh8DZwAwyQBA6REpAUAaA2ppbVU7rMGd
OuUt3wVN6WlWngKQmwCNgksCgGBc1xd1//YWJifHlZOYmJqC6YTA2+8BOO0BID8/H5cuXcKdO3f0
a2Zmph7OAEDpB9I4AyBPAcgjoGtSM6WFu5YppSv6qN0ouKSwft1TAOu6UN/AhprO0nhRAoQ8DsgA
YGq9srq6Go8ePYKTkxMePnyI8vJyHZYYACj9QJoHANYESOn+lEJLLgVIgf2+SgAwn+dpvglQApGs
uzRIJmdOROmX8VYTAL777jt9J7w8B3/UygaR5bG0wpTuVwYASt9PKbjk9/K+yvv3zu80BwCpUE9C
kaHUsyDjrSYASOF/8eJFXQWw7DSPSvl8Ozs7PpJHDywDAKXWofz2TnsAkPU3V8ZbTQD45JNPEBYW
pm9MOGq6u7v1RmGlPPQgMgBQah0yAFh5AJA68ENCQlTxu43ikjIU5GYgPTsfeVlpaGzv0S3yra5t
YHVpEeNT0/pu0KXlZQz0PsfgyISp5JaW+2amMD1juoN0cqQfpRXVWJifw/TkOFrb2nduIFnXw2Zm
1VKr98zPL6gviOmUk1BekInPPv0XAwA9kOYBYGZmBltbW/oHSSm1rHnhdZgyAByDABAcHKwL4NT4
KDg4OMDJyQX+TwMRFhqMmzeuwjcwEOFhwbBzc4OLkyN+v/AH/nvmJxRVtWB4oAcDw+OYHh/CY3s7
JKcXYmF2HO7Odrh77yZsbG3w448/o6yqRoeLh/dvw97jCfy8HuPXc+fgH/QM3k884OMfAC+X+/j2
y88trjCl+9UIANLew+jYGJbVD3FxcYlSakEpqMwLLnkq4H015mE+PwaAYxIAqgtS4OIVgNAAbwRF
xOOJqz0ycnIREuQLv4BAuHu447wqtL///j+4e/chGlufo7muEk3tzzExNoTUhCR0dPVjbnoU9o/u
ISc/H0GB/qrQf4SHtvdx6/YtRMcnICcvG+d++Vkd6X+H4GfPcPvmVdx9ZI+Ip2744l+fWFxhSver
BACpB0ACwNDQsPrRzWOWUvonZ2bnVEgeV4WSqTEgeYZfblaT1/dRbnIzKhUyCkIGgGMSAJYW5zE9
M4f5uVn15ZjD+Nio+oLM6tP2YQFP8MPZixgenUB3Z6cq8McwODSi3ydI+jNYWV7G6E6TwtNTk+jv
7UN9fR3aOrr0MPnSzU1Poa2lFUtLy3oauRxQV1utNsqnvARAD6RxBkBqAlxZYU2AhLwJ88aApAA3
r9znXRSkHJAAIQWgzI+XAI5RAJB/1vbWlr5mKm6rf6p+3d5Ce2sj2rp6YdQILf/w1/1DZeVlvOm9
2zvvMPFy3jt1S+vP3Jmmra0dn3/+OQMAPZDmAUCOSgghr0dqBHx7WwBvV/b5EgDkN2cEAHllALDC
AHDmzBl8qnaUf/nLX3QAmJgYR19fHwYGBizYj/GJCT2N5fEHc3BwUL/KRvnyyy8ZAOiBZAAgZP/s
NwCYY2k8A8ArrToAVLX24+GjR7h//wFu3ryFxMQkVQAPYmqnbugP5aQ4KbUiyavJCdU/N7egq2yV
hhOkXgIGAHoQzQMAGwMi5M2YXwJ4bQDY2sT8/Jy+RDCvptmyMA0DwCutOgBUtw2ogv8mLl64iF/P
nkVcXJw+LS+n4z+k8uWSIKAbopgxNUYhj2mNjU/oahKLi4t5BoAeWCMAGE8BLC5ZvvuZ0tPuglJu
ApSCWwomSwFAX+7dXENXZzs6uzrR0f1ctwb44sWfp9sbAGS/zwBgZQFALgH8/PPP+FwtwP/8z/8g
KChoJwt+WORoTDaIfMmkwQidJpX6zMDUFAMAPRTNA8Cg2vHIDaZyUyuldI+zcyoEvCqwZX8shbZx
r9YrLd/LZa4U8FLoMQAcgwBg6SbAD40EACn8e3p6kJ2drWtpk37TpYFJFBUV8RIAPbBGAJCKgOQH
KDse4ywUpXS3RmEtr1J4S+M1sm9+H+WMrnE2QZT5MwAwAGhkg0iBX1JSomsf7Ozs1KGAAYAepuYB
QHZKshPa+wOllP5ZKbgO6t75MQCcgABgPP63lxfqnyqPC8r1H0P5R8vrXlbVBpFTTMZGkdeXlwAY
AOghyQBAqXXIAHACAoAU5ovzsxibmMT4yBAmVIE9NjKIkVGjLQBLvNAVC42NDqMoPwdllfX6zlFZ
eTkLIAW/bAzeA0APWwYASq1DXgI4IWcAFqeGERUTC09XB/gFhSE6MgwFhaVITo5DbnEZ+jraEBgS
pq/v52VlIjk+GlevXEVAgDc8PL0R6O+HnOIaSRP6BkA59S+FPwMAPWxf3gSoAoDUXyHXJKU9AErp
B3R5Zdf1f5EB4IScAZAj+hAfd7g88YGz/UPEp2Yh6Ikr7trch7u7Mx7YuyEo5Bm+//47fPPtd7h4
8RJcXV3h7eWO0oYOzAx1IygsQc9PVj4pKUk3/8t7AOhhKwFA2gJoaW3V9VtI1dPTM7OU0g+o1CNj
/kihURAyAJyAACAZICcpEinZxYgJDUB5bTMSw4KQkVuAstIiPA3ww/Ub1+Do7gHbRw7ISE+Fm5sT
4hNiYWf7EE7O7mjrGdTzksezYmJiMD4+ru86ZQCgh6lxBoAVARHycZEgIAWfeUHIAGCFAUCqAv7X
v/6pqwIODAzc+fe9HnnOU58J0GcD5GX75fOfQnl+Ki5euYmx2UWsLi9hUw2Xm/7knz47PYXFpVU9
3draKpaWjBanFvSrriVQBQBeAqCHoXkAkIBJCPk4MACYtOoAoKsCfvgQD3aqAk5JSdHXb1ZWVt/o
6uqamap/badbvc7NzWBqeg6bG5uqkF/Xw43X9XVpY3pdbYw5VdBPmaoGnjZd95fu8fFJ3S9nABgA
6EFlACDkaNgbAHgPgFUGAFNVwJcuXca5c+cRExOL3t4+TMhd/rrRH3k1dZucNBtm6jY0pjMKdvPp
d0+ze9iEOuLXqm5pr31sbEyfAeAlAHpQeQmAkKNB7rdhADgGlwB++cVUFfDf/vY3hIQE6xqcpFU+
+UcNDw/p1zd52NNIAKipqeEZAHpgjQAgjwFKwLR0NotSevhKuy5Gw0IiA4CV3wT4zTff6O579+7h
zp07R6Z8/uXLl1n40wNrBADjKQA5wyQtnlFKP5xy+l9+a3sLQgYAKw4A3333Hb7++mu9MJ9//vmR
Kkf/llaW0nfR/AyA/ABlxyNHIpTSD695QSj9DABWHAAszZzS46x5AGBNgJQenQwADACUflQZACi1
DhkAGAAo/agyAFBqHfIeAAYASj+qDACUWoenPQDI03XS9o0Mk0eSJRBINwMApR9IBgBKrcPTHgCk
8K+trUVoaCgqKyt1CJDxDACUfiAZACi1DhkAlnTbN/KYe0NDAwMApR9aBgBKrcPTHgDklL9URz41
NaVfeQ8ApR9Y8wAg1+CkwSr5QVJKP67y25NCT2qZlcbkLE1zEpWDDvObAKXRO3llAKD0A2seAKTJ
aamaVE69nWSNow5KrU35/cnRrxSKlsYfd6Wgt/SbNC/0zWUAoPQDagQAufYmRx7z8/M6iZ9k+/v7
0dPTg97eXkqtyr6+Pv39tDTuJCin96Vg3/ub3FvwGzIAUPoBNQ8Acu3xdUn8JCjrJjsbDw8P3Lp1
C/fv36eUfgTlxr67d++iq6tLH/Fb+n1akgGA0g/oaQwALi4uuHr1qg4BlNIPrzSpf+PGDXR2djIA
UGotnsYA4O/vDzs7Ozg5OVFKP4KOjo5wcHDA8+fPGQAotRaNANDU1ISBgYFTcQ/A5OQkpfQIlCeN
LP0mXycDAKUf0H+qH4cEALk7V+5AlseP5Bnkkywh5Giw9Ht8k4IcnDAAUPoB/OKLL/Q1uuLiYuTk
5CA7O5tSSq3CgoICPHv2DF9++aXF/dd+ZACg9DV+9913+Prrr/WZAEoptTbl6F/2U5b2X/uRAYBS
Sik9hTIAUEoppadQBgBKKaX0FMoAQCmllJ5CGQAopZTSUygDAKWUUnoKZQCglFJKT6EMAJRSSukp
lAGAUkopPYUyAFBKKaWnUAYASiml9BTKAEAppZSeQj9YAPj222+t0r3Laa60/iaNK3z++ecfXPkc
aWjmIA05UEoppe/rBwkAUpBaKvSswdcVuhIOLl++jNu3b+smYD+0d+7c0dvum2+++dOyUEoppR/a
Qw0AUoh+pbpTUlLQ1taGzq4udHd3o621FU2NjWjcsbm5GS0tzWiSV93dooY17YyT7uaX0+5Vpm1r
a901rKmpSQ83H/Zy3M5nSXd7ezv8/Pzw6aef7toIUghLKBgcGIAltra2sLm5qd3bLUj3Ll68eDnN
3um21TiDhIQE/OMf/9i1LJRSSunH8NADwJdffome3l5dwPV0d6CurhEzcwu635y1tQ282NrE+sYG
1lZXdoYC21tq+E63JTbWVjA3/+f5yXws8eLF9k6XiYz0NHzyySe7NoIEgO+//x4Tk1MYHexF9/Nu
5OXm6PXIKyjE+uareRiFuUbNe2pqSnf2dLYhPCQIDo6OaO3eHSRebK6rINKiu2cmRtDdaxqfnJzM
AEAppfRI/CABoL2zC5sr87hx/TICgsJRXlmFkqJ8pGfnYXpqEt4ezojNKMZARz0KSitRXpyHxJR0
pGWk6yP2stISJKekoLu7C0UFRQgPC0FichoqqqqRkRoHd08vFBQUIz0tFX7+T5GdnYXisjJkpCWj
pfM5WhuqEZeajk2VJJprSmHn4ISs7Fxk5+QiNCIGn/7rX7s2ghEAxiamMD7Yjaf+fnBwsEdQ0DOE
hkfg2VMvPLCzQ25ePlxcnRCqNthjF0fY2T/EzQcOmJmaQExcMnq6WvE0OALPu9rg4uKCpJQ0BAf6
I+hZMJ4+9cODew+QkVuA+LhEHXKSk5IYACillB6JHywAbCzN4saNq0jPKkB6cqzqvgYnN1fcuHMf
jk4OiEzNx2BnPVKy8lBRnINr16/DwdkBDi5usLl/B/ZqGid7O1w4fw4Xr17F/dt38Mnf/45Hjs7w
8HDD5d9/x9k//sAvP/2s5vsY7i52sLV/hEd2D+H+xAv3HtlhYGwK2SoU+Ho/wQ8/ncOzoAB8/ePZ
P90DYASAoaFhVSy/wB0VXJJTU3Hnzl2kZ6bh/oP7qj8Zl65eQ0hIMG5cu4R//e//4Icff4KnfwR6
u9sQl5yDtYVJpKr1Kc5Lh9tjT1z94yzcPH3UejyEvYs7Lp7/FT5BoUiKi4dcNEjhGQBKKaVH5IcJ
AB2dOgCUVFTLmW5UleYjLTNbX4uPioqAg+1DZJfUYW1pHo9dHeD3NBglpWX6On5MbCwS1JFxW0eb
OqJPhYe7C0JDQmCrQsGNW3cQrQrPjMx0BPr7wNPHWx2Je6C8qg6pSXFobG5GcVE+nqmj7l/O/4HR
mUXkpKeo+WTAw9UNfv7+eOjkga++/GLXRngVAIb08ra3tWJqahqdnZ0YnxhDW3s7xsbH0VhbifM/
/weez6LRWleNxqZWNNY3YnJ8BLGxCZhfWsLA0AhWlxeRlJiAvsFRlBXmoFQt3/DQIAoLClBRVoz4
xFT9OUlqPeVyhGw30XyZKKWU0g/pBwkAcgOggfkNcsb9b8Z1+e1tNUANNK75vzC7Qc7oNr9pzpzt
7VfX5fdOkhIXDlevAKxvvUBfVys6e0wFu5Cmjuxfdw/A8LCcAXg9K4szSEtPx9iU2lp7GB0ewvKq
6T4EvV6vYVWFnompGd0t9wD87//+r95usgzmy0QppZR+SA8cAH7++Qw++/RTXfB/8cXn+Ne//qXv
tl9dXcHs7Kx2bseX/XNzL7tN/a+692qMk/eYv+/V8FfTmvrnMDMzjYXFRT1uYWEB83rYDNbX1xEf
H4+//e2venkN5fFAKYSfP3+OkZFhfSZgaHDQpHRrBzEyOqrnNz42ikFjvFK6x8fHVYAYejX85ft2
5rXTPTIygjE1Hwkb8rRDfl4eysrKEBERoesGsPRPopRSSg/bAwWAqtYB3L17D9ev38DNW7dx8+Yt
3LhxExWVVWhsbEJnZ7cKA536koB+be+wrIzX01gYZ7jPaTqUnZ1d2o4Opbwqu7uf62HJySn4448L
epkNr127jtu376ChoRH9AwOYnJxSBfrE4Tuxu18uM6yvb+hwkpmZqcOTpX8SpZRSetgeKACUN/Ug
ODgU8QlJSFDKa1x8oiqMOzE2JgWeKkg/skPD6uh8aEQdbb+yf2AIY6rAHRkZRWpaGq5eu4Z79+69
VG72u3fvvpp2GGtr61hdXTt05eyEBAt5bNBQ+uXRw8nJSaSmpv6pfgJKKaX0Q3ngSwBnzvykZyKn
/z//7DN9V3tHR4e+xn0ULC8vYX5+HouLi1hSLsolgIV5TM9IATyJ8PAw/PWvf9W1FRrKqXe5FPC2
ewAOwvLy8stLErJssozi1PQMAwCllNKP7oEDgMWnANrbd4q9j48UsHIfgBSuxuuMOvqW0+0TExOI
jIzEP9VKm28EuQFPHg38kAFgaWlp5/6EGcj9AhICpJ8BgFJK6VF4IgOAFK6FhYW6UJUAMCsFrRUE
AFmu/Px8BAcH6xAgy8oAQCml9Cg8cQFACtnp6WkUFBToG+tGR0dNp9qtIADIfQANDQ0oLy/Xn8UA
QCml9Kg8kWcApKCVAleuu7+8BKAKWmsIALJMKysrLy9VMABQSik9Ck/kGQApaKXgF/V1950AIKfd
jzoAyPKYywBAKaX0KDySACC1/K2urn4QpZCVSwDmTikn9WN3k4iKimIAoJRSeuo9kgAgBbUcqUvN
fGtra4eqzNOSGxsbuvrg6OjoPzXAwwBAKaX0tHkkAUCugUuhvJe9bQG8dNewnR7FrumNV+M9ezRg
AKCUUkoPIQD8+uuv+PKLL3Qh+vXXX+t69fcbAFaWl7C6to6lxQVs7ZTRayvLWNvYMvW8hqmJCSwu
r+70vWJxcWmn6xXS8JAc+RshgAGAUkopPWAAqG4bxKVLl/DzmTM6CPzyyy/4739/QldXly709h6F
G0oAEMryU9Hc1YeywkxkFxQhJy8HrS0tqCgvR1ZOln6ET7pz0hLxNDAU1dXlaG9txWM7W0TGJqO8
ogJZqXHw9nmK0uJCFBWVobAgG529A+jvbEVyZrYKE6bCXxQYACillNIDBoDKln44ODjC3t4Bjo5O
qttJd9fV1avCewzz8wuYmZW78M2cmcO0KvSEgsw41Hf0orYsB7fu3IKdkx2cndxw79Y12DrZ4rG7
Cy5evghnF1d4uLnjyu8/4YdfzsPN3hkOdnb4/fJluLl74Nqli3BzewwXWxs8tH8AB3tbeHj54b6t
HToGJvVnMQBQSimlrzzwJYDdzQF/oQux1tYWXahJtbfS6M2uO/JVvxSEwvhgN+Lik5CVkYHyqhoM
DA4gJSlZFYbpGBoeUkf0hUhPT0JUVCwS42MQEhiMgOBQpCelIjuvAKlpalxkDBLi49HR0Y2s1CQ8
7+tHVVkRElNSEBEdg5nlTf1ZBomJifjkk092bQQGAEoppafNQ78JUArT0FBVSKen68LWksnJyUhL
S0NWVhYSE+KRnJKKnOxsZKggIMNEqcUvPT1NTa8Cghon80tRhXp6egayc1S/er8xTuaVkZGp3yfz
yM7OUeNTkaTCREZGuh4v5uTkwMnJSd+nYL4RPmYAYEVAlFJKrcFDDQCGUpDJs/b7UdrAFy2NE41x
xnTm05qPM4aZj9s7XE79y1kKKezNl/djBoDa2loUFxdjaGiIVQFTSik9Mj9IADhufqwAYDRSJGdI
pFpiBgBKKaVHJQOA8mMFADnlL2cBpMDnJQBKKaVH6YEDwLlz5/CtKkC///77Y6tsiB9++B5jY2M7
xfXhI9f+pcCXgl/OBBhtFUxOMQBQSin9+B4oAMhjgM7OLnBxdoWrq/ux1cXFFe7uHujo7NJH5AsL
i5ibV0foh+j0tDryn5KnIF45OTmlQsGCfjKCAYBSSunHlJcAlHIJ4Mcf/6trMBwcHNL1FMhR+Sul
ISFTY0Kv983jpZA3Ffzy+ko5KyD3A8gTCnLToqXlo5RSSg9bBgClBAC5FFBQUIDKykqUlpZ+VOvr
6xEeHo7PPvvM4vJRSimlhy0DgJlSmdFXal2OQmlHwdIyUUoppR9CBgAzpSKjo9TSMlFKKaUfwn/+
8x8HCwDSAJCcurZ0VEsppZRS6/Tvf/8fhEdGYXjhPQJAeVMv7t+/Dw8Pd7i7u8PNze2l0m9oPtzc
101jPuywpnlT//tMY3S/bpq9vm4a82H7meZN/R9qGqP7ddOYDz/Mad7U/z7TGN0HmcZ8+H6nsdS/
n2mM/veZxuh+3TR7NZ/GfDrzfkvj905jqX8/0xj97zON0f26afZqPo35dG/r3880Rv+Hmsbo3jvN
3umMfkvj905jqX8/0xj97zON0f26afZqPo35dG/rP6xpjP73mcbo3jvN3nFvm+Zt/fuZxug3htnb
2SElNR39M1vvHgCK67rg6emJ3NxcXXc/pZRSSo+HyclJyM8vQq8q0N85AJTUd6ujfw/dUI808EMp
pZTS42FsbAxy8woYACillNLTJAMApZRSegplAKCUUkpPoQwAlFJK6SmUAYBSSik9hTIAUEoppafQ
AwWA4tpOODo4IDExQc+IUkoppcfD8LBQZGZlo296890CwMQaUNc5gqTkVJ0gcnLzKaWUUnpMzMjM
Qk19E3pUgf4OASDLe3wV6Bhd1lUIyukDSimllB4f5ci/Z3IN7SNLGJp7sb8AEB6TFLoMYFAlBkkN
lFJKKT2eSuE/u4n9BQBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYSQk8L/
+T//P3NntfK6JUolAAAAAElFTkSuQmCC</Preview>
  <Form>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
6Z0yTZrvhWa1dhy1RhzM2fnz/wO3GrS0nnwCAA==</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	#Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		else
		{
			if (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
			{
				[void][System.Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
			}
		
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	$config_tabcontrol2.Dock = 'Fill'
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Enabled = $true
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_intunewin_tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {

	$wgid = $winget_WingetID_textbox1.text

	
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
		{
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_intunewin_tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	
	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	
	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:04
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			$MSIbestand = $msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Product installation success" -ForegroundColor yellow -BackgroundColor black
		write-host "Possible uninstall command is:" -ForegroundColor yellow -BackgroundColor black
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
	}
	
	
	$excode = 0
	
}
catch
{
	Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
	$startPMSI
	write-host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
	write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "See what this meens: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:



<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor yellow -BackgroundColor black
	
	
	
	$excode = 0
}
catch
{
	Write-Host "Uninstall failed" -ForegroundColor Red -BackgroundColor Blue
	$startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}



'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$config_tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already available in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be available in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkPackageName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkPackageName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkPackageName.intunewin"
			DisplayName   = $weblinkPackageName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create extra folder in startmenu (when needed)"
  if (!(Test-Path -Path $location))
{
	
	New-Item -ItemType Directory -Path $location
}

	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!packagename!!", $weblinkPackageName)
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!packagename", $weblinkPackageName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_packagename.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget not installed" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_basic_template_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}

$winget_remediations_createscripts_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile| Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Upload not yet available for Remediations.. For now use the Intune Admin Portal")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Please reopen IntunePrepTool to create more Remediations scripts")
				
				
			}
		}
		
		
	}
	
	
	
	
	
	
	
	
}

$configToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $true
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_winget_tabcontrol2.Enabled = $true
	$package_winget_tabcontrol2.Visible = $true
	$package_winget_tabcontrol2.Dock = 'Fill'
}


$mSIToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $true
	$package_msi_tabcontrol2.Visible = $true
	$package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $true
	$package_exe_tabcontrol2.Visible = $true
	$package_exe_tabcontrol2.Dock = 'Fill'
}

$main_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$wingetUpdateToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false

	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Dock = 'Fill'
	$Remediations_winget_tabcontrol2.Enabled = $true
	$Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Dock = 'Fill'
	$package_weblink_tabcontrol2.Visible = $true
	$package_weblink_tabcontrol2.Enabled = $true
}

$powershellToolStripMenuItem_Click = {
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	$package_powershell_tabcontrol2.Dock = 'Fill'
	$package_powershell_tabcontrol2.Enabled = $true
	$package_powershell_tabcontrol2.Visible = $true
	
}

$intunewinToolStripMenuItem_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	
	
	$upload_intunewin_tabcontrol2.Dock = 'Fill'
	$upload_intunewin_tabcontrol2.Enabled = $true
	$upload_intunewin_tabcontrol2.Visible = $true
	
}

$wingetSearchShowVersionToolStripMenuItem_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Enabled = $true
	$tools_winget_searchtabcontrol1.Visible = $true
	
}

$findUninstallStringsToolStripMenuItem_Click = {
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_powershell_tabcontrol2.Dock = 'None'
	$package_powershell_tabcontrol2.Enabled = $false
	$package_powershell_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'Fill'
	$tools_uninstallstring_tabcontrol1.Enabled = $true
	$tools_uninstallstring_tabcontrol1.Visible = $true
	
}

$Weblink_intunewin_tabpage6_Click={
	#TODO: Place custom script here
	
}

$weblink_packagename_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	
}

$remediations_winget_maxversion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_remediations_maxversion_checkbox_CheckedChanged={
	#TODO: Place custom script here
	
}

$remediate_winget_version_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_wingetid_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$remadiations_winget_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$remediations_winget_upload_button1_Click={
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				
				
			
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				
			
				
				$encoding = [System.Text.Encoding]::UTF8
				$bytes = $encoding.GetBytes($remediate_detectFile)
				$Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
				$Bytes2 = $encoding.GetBytes($remediate_remediateFile)
				$Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
				$UploadRemediationsFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/5/2023 3:38 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	upload.ps1
	===========================================================================
	.DESCRIPTION
		Part of IntunePrepTool
		https://github.com/rink-turksma/IntunePrepTool
		Upload Remediations to Intune
#>
	Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
	if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
	else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
	$displayName = "!!displayName!!"
	$publisher = "!!publisher!!"
	$detectionScriptContent = '!!detectionScriptContent!!'
	$remediationScriptContent = '!!remediationScriptContent!!'
	$tenantID = "!!tenantid!!"
	$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"; $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	$MsalToken = Get-MsalToken -TenantId "rinktest.onmicrosoft.com" -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
	$uri = "https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts"
	$createdPolicy = Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{ Authorization = $MsalToken.CreateAuthorizationHeader() } -ContentType 'application/json'
	Write-Host "Remediationa policy created successfully with ID: $($createdPolicy.id)" -ForegroundColor Green
	Write-Host "Please assign and schedule with MS Intune Admin console" -ForegroundColor Green
	
'@
				$displayName = $winget_remediations_name_textbox1.Text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!publisher!!", $config_customername)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!displayName!!", $displayName)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!detectionScriptContent!!", $Encoded_remediate_detectFile)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!remediationScriptContent!!", $Encoded_remediate_remediateFile )
				$tenatURL = $upload_tenantURL_textbox.text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!tenantid!!", $tenatURL)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"
				}
				$UploadRemediationsFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1" -Force
				$remadiations_winget_textbox2.AppendText("Created Upload.ps1")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule")
				
				if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					
					
					
					powershell_ise -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
				}
			}
		}
	}
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">547</Line>
    <Line Disabled="False">1881</Line>
    <Line Disabled="False">3196</Line>
    <Line Disabled="False">4725</Line>
    <Line Disabled="True">5406</Line>
    <Line Disabled="True">5408</Line>
    <Line Disabled="True">5514</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>