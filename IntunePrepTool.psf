<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAH++SURBVHhe7f1XdxxJlq2L7t9yx/kV9+WMce7D
uU+ne3f37u69q6p36aqsqqxKnWRmkkkyqTUIEJrQWmutQYAQhNZaByICWmvMs5YFggwigwLBIAiQ
8+OYdIcLc3MPd1/TzM3N/xshhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQj5A/v5//9///4Sg0KiEgODwBP+g
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
KIqiqFMgrQXw3AD0T+OHH35AcnIScnPFUWRnURRFURR1CpQvBiAsNBgdXb1HMwC2daBrdB5tsuLw
2CTGp6wYm5ymKIqiKOoUSON2/+AIJm0L6LduvJkBCA2PNjUAusLo/B6GZnYwOLNNURRFUdRpkX0b
w7O7GLBtmvFBy/LrDYCPX0COfXXHuAWKoiiKok63NPj3j8+83gAQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQggh5GTz3/7b/wtx5lSRvLhkgAAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	[string]$downloadpath
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		else
		{
			if (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
			{
				[void][System.Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
			}
		
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	$config_tabcontrol2.Dock = 'Fill'
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Enabled = $true
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_intunewin_tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {

	$wgid = $winget_WingetID_textbox1.text

	
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	[string]$c_downloadfolder = $config_download_folder_textbox3.Text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
			downloadpath    = $c_downloadfolder;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
			{
				Unblock-File -Path $exe_org_path -Confirm:$false 
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_intunewin_tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	
	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	
	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:04
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Unblock-File -Path $msi_org_path -Confirm:$false
				$MSINewname = $msi_openfiledialog1.FileName
				
				$MSINewname = $MSINewname.Split("\")[$MSINewname.Split("\").Count - 1]
				$MSINewname = $MSINewname.Replace(" ", "")
				$MSIbestand = "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname"
				#Write-Host $MSIbestand
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			 #$msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v $logfileMSI /i $MSIbestand"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### This function handles the detection method in the registry.
	### It will create a key in the registry with the name of the application. 
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
#Start; Write Log file
Start-Transcript -Path $logfile
Set-Location $PSScriptRoot
try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Can't read MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Script started i.cmd" -ForegroundColor Green
		write-host "Possible uninstall command is:" -ForegroundColor Green
		write-host ""
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
		write-host ""
		Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
		write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green

	}
	
	if ($msiuninstallcode -eq $null) { $excode = 1 ; write-error "Can't find uninstall code in MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
    Else
    {
        write-host "Script started i.cmd" -ForegroundColor Green
        write-host "Possible uninstall command is:" -ForegroundColor Green
        write-host ""
        write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
        write-host ""
        Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
        write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
        $excode = 0
    }
   
	
	
}
catch
{
    Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "MSIEXEC Log start:.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
    $MSILOGS = get-content $logfileMSI 
    $MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue


    $excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}

write-host "Possible uninstall command is:" -ForegroundColor Green
write-host ""
write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
write-host ""

### Place extra actions here:







<#----Enf of extra actions--#>
#Stop; Write Log file
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1.Text + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$config_tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already available in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be available in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	}
	catch
	{
		#Error handling here
	}
	
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			$config_download_folder_textbox3.Text = $cis.downloadpath
			
			if ($cis.downloadpath -like 'Enter UNC or local path for the download Package folder. (Evergreen / Winget)')
			{
				#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
				[void][System.Windows.Forms.MessageBox]::Show('Download folder was added to config. Please use this tool or edit "C:\Program Files\IntunePrepTool\config_customerinfo.csv" ', 'Please add Download folder') # Casting the method to [void] suppresses the output. 
			}
			
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
			try
			{
				New-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
	$config_download_folder_textbox3.Text = "Enter UNC or local path for the download Package folder. (Evergreen / Winget)"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkPackageName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkPackageName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkPackageName.intunewin"
			DisplayName   = $weblinkPackageName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create extra folder in startmenu (when needed)"
  if (!(Test-Path -Path $location))
{
	
	New-Item -ItemType Directory -Path $location
}

	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!packagename!!", $weblinkPackageName)
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!packagename", $weblinkPackageName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_packagename.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force }

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget not installed" }

try
{
	
	$install = "!!WingetCommand!!"
if ($install -like "!!doe*")
{
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
			
		}
		catch
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
	}
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
		}
		catch
		{
			
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
	}
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
			
		}
		catch
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
	}
	
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
	{
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
		}
		catch
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_Empty_Scheduled_Task_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}

$winget_remediations_createscripts_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile| Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Upload not yet available for Remediations.. For now use the Intune Admin Portal")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Please reopen IntunePrepTool to create more Remediations scripts")
				
				
			}
		}
		
		
	}
	
	
	
	
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
	
	
	
}

$configToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $true
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_winget_tabcontrol2.Enabled = $true
	$package_winget_tabcontrol2.Visible = $true
	$package_winget_tabcontrol2.Dock = 'Fill'
}
$scheduledTaskToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	$package_ScheduledTask_tabcontrol2.Dock = 'Fill'
	$package_ScheduledTask_tabcontrol2.Enabled = $true
	$package_ScheduledTask_tabcontrol2.Visible = $true
}


$mSIToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $true
	$package_msi_tabcontrol2.Visible = $true
	$package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $true
	$package_exe_tabcontrol2.Visible = $true
	$package_exe_tabcontrol2.Dock = 'Fill'
}

$main_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$wingetUpdateToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false

	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Dock = 'Fill'
	$Remediations_winget_tabcontrol2.Enabled = $true
	$Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Dock = 'Fill'
	$package_weblink_tabcontrol2.Visible = $true
	$package_weblink_tabcontrol2.Enabled = $true
}



$intunewinToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	
	
	$upload_intunewin_tabcontrol2.Dock = 'Fill'
	$upload_intunewin_tabcontrol2.Enabled = $true
	$upload_intunewin_tabcontrol2.Visible = $true
	
}

$wingetSearchShowVersionToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Enabled = $true
	$tools_winget_searchtabcontrol1.Visible = $true
	
}

$findUninstallStringsToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'Fill'
	$tools_uninstallstring_tabcontrol1.Enabled = $true
	$tools_uninstallstring_tabcontrol1.Visible = $true
	
}

$sourceFromWingetToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $true
	$download_tabcontrol1.Visible = $true
	$download_tabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	
}


$Weblink_intunewin_tabpage6_Click={
	#TODO: Place custom script here
	
}

$weblink_packagename_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	
}

$remediations_winget_maxversion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_remediations_maxversion_checkbox_CheckedChanged={
	#TODO: Place custom script here
	
}

$remediate_winget_version_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_wingetid_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$remadiations_winget_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$remediations_winget_upload_button1_Click={
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				
				
			
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				
			
				
				$encoding = [System.Text.Encoding]::UTF8
				$bytes = $encoding.GetBytes($remediate_detectFile)
				$Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
				$Bytes2 = $encoding.GetBytes($remediate_remediateFile)
				$Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
				$UploadRemediationsFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/5/2023 3:38 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	upload.ps1
	===========================================================================
	.DESCRIPTION
		Part of IntunePrepTool
		https://github.com/rink-turksma/IntunePrepTool
		Upload Remediations to Intune
#>
	Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
	if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
	else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
	$displayName = "!!displayName!!"
	$publisher = "!!publisher!!"
	$detectionScriptContent = '!!detectionScriptContent!!'
	$remediationScriptContent = '!!remediationScriptContent!!'
	$tenantID = "!!tenantid!!"
	$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"; $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	$MsalToken = Get-MsalToken -TenantId $tenantID -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
	$uri = "https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts"
	$createdPolicy = Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{ Authorization = $MsalToken.CreateAuthorizationHeader() } -ContentType 'application/json'
	Write-Host "Remediationa policy created successfully with ID: $($createdPolicy.id)" -ForegroundColor Green
	Write-Host "Please assign and schedule with MS Intune Admin console" -ForegroundColor Green
	
'@
				$displayName = $winget_remediations_name_textbox1.Text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!publisher!!", $config_customername)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!displayName!!", $displayName)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!detectionScriptContent!!", $Encoded_remediate_detectFile)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!remediationScriptContent!!", $Encoded_remediate_remediateFile )
				$tenatURL = $upload_tenantURL_textbox.text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!tenantid!!", $tenatURL)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"
				}
				$UploadRemediationsFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1" -Force
				$remadiations_winget_textbox2.AppendText("Created Upload.ps1")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule")
				
				if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					
					
					
					powershell_ise -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
				}
			}
		}
	}
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
}

$remediations_winget_open_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
	$remediate_winget_version = $remediate_winget_version_textbox1.Text
	Invoke-Item "$config_packagefolder\$winget_remediations_name\$remediate_winget_version"
}

$powershell_scheduledtask_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	if ($powershell_scheduledtask_radiobutton.Checked -eq $true)
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $true
		$package_scheduled_task_WingetID_textbox.Visible = $true
		$package_scheduled_task_WingetID_label3.Enabled = $true
		$package_scheduled_task_WingetID_label3.Visible = $true
		$package_ScheduledTask_create_scripts_button1.Enabled = $true
		$package_ScheduledTask_create_scripts_button1.Visible = $true
		
		
	}
	else
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $false
		$package_scheduled_task_WingetID_textbox.Visible = $false
		$package_scheduled_task_WingetID_label3.Enabled = $false
		$package_scheduled_task_WingetID_label3.Visible = $false
	
	}
}

$powershell_Empty_Scheduled_Task_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	$package_ScheduledTask_create_scripts_button1.Enabled = $true
	$package_ScheduledTask_create_scripts_button1.Visible = $true
}



$package_scheduledtasK_option_weekly_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
	{
		$package_scheduledtask_combobox1.Enabled = $true
		$package_scheduledtask_combobox1.Visible = $true
		$package_scheduledtask_time_combobox1.Enabled = $true
		$package_scheduledtask_time_combobox1.Visible = $true
		$package_scheduledtask_am_radiobutton1.Enabled = $true
		$package_scheduledtask_am_radiobutton1.Visible = $true
		$package_scheduledtask_pm_radiobutton.Enabled = $true
		$package_scheduledtask_pm_radiobutton.Visible = $true
		
	}
	else
	{
		$package_scheduledtask_combobox1.Enabled = $false
		$package_scheduledtask_combobox1.Visible = $false
		$package_scheduledtask_time_combobox1.Enabled = $false
		$package_scheduledtask_time_combobox1.Visible = $false
		$package_scheduledtask_am_radiobutton1.Enabled = $false
		$package_scheduledtask_am_radiobutton1.Visible = $false
		$package_scheduledtask_pm_radiobutton.Enabled = $false
		$package_scheduledtask_pm_radiobutton.Visible = $false
	
	}
}

$package_scheduledtask_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$datetimepicker1_ValueChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_time_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_am_radiobutton1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_pm_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_winget_max_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_label3_Click={
	#TODO: Place custom script here
	
}

$package_scheduled_Task_maxVersion_label4_Click={
	#TODO: Place custom script here
	
}

$powershell_create_package_dir_button1_Click={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	else
	{
		if ($powershell_package_name_textbox1.Text -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package name textbox', 'Select Package Name')
		}
		else
		{
			if ($powershell_package_version_textbox1.Text -like $null)
			{
				[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package version textbox', 'Select Package Version')
			}
			else
			{
				$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
				$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
				$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
				$package_scheduledTask_name = $powershell_package_name_textbox1.Text
				$package_scheduledTask_version = $powershell_package_version_textbox1.text
			
			
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"
				}
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"
				}
				$package_ScheduledTask_output_textbox1.Text = "`nNew package direcotory created: `r`n"
				$package_ScheduledTask_output_textbox1.AppendText("$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$powershell_open_package_directory_button1.Enabled = $true
				$powershell_open_package_directory_button1.Visible = $true
				$powershell_Empty_Scheduled_Task_radiobutton.Enabled = $true
				$powershell_Empty_Scheduled_Task_radiobutton.Visible = $true
				$powershell_scheduledtask_radiobutton.Enabled = $true
				$powershell_scheduledtask_radiobutton.Visible = $true
				
				
				
			}
		}
	}
}

$powershell_package_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_open_package_directory_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version.text
	
	Invoke-Item "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\"
}

$package_ScheduledTask_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_ScheduledTask_create_scripts_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script;
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script; $RegisterDetectionroot = "Intune_" + $config_customername
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version.text
	
	if (($powershell_scheduledtask_radiobutton.Checked -eq $true) -and ($package_scheduled_task_WingetID_textbox.text -like $null))
	{
		[void][System.Windows.Forms.MessageBox]::Show('You need to fill the WingetID textbox', 'Please select WingetID')
		
	}
	else {
		if ($powershell_Empty_Scheduled_Task_radiobutton.Checked -eq $true)
		{
				
				
				$ScheduledTaskFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/12/2023 6:20 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	"!!ps1name!!"
	===========================================================================
	.DESCRIPTION
		A description of the file.
#>

#App Params
$package_scheduledTask_name  = "!!package_scheduledTask_name!!"
$package_scheduledTask_version = "!!package_scheduledTask_version!!"
#Customer vars
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$package_scheduledTask_name_$package_scheduledTask_version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$package_scheduledTask_name"
$excode = $null;
#create log directory in programdata when needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Create registry key when needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application key in registry when needed
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  This is saved in $logdir. Also used in EventViewer
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	######### PLEASE Place action here!!!
	######### Please try to end your action with -ErrorAction Stop
	######### Begin here
	
	
	
	
	
	
	
	
	
	
	###### End here

	
	#-ErrorAction Stop
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}


### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs")
{
	if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) { remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false }
	copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}






		
'@
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!ps1name!!", "scheduledTask_$package_scheduledTask_name.ps1")
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_name!!", $package_scheduledTask_name)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_version!!", $package_scheduledTask_version)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!logdir!!", $config_logfoldertarget)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
				
				
				
				$ScheduledTaskFile | Out-File  "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\scheduledTask_$package_scheduledTask_name.ps1" -Force -Confirm:$false -ErrorAction SilentlyContinue
				$package_ScheduledTask_output_textbox1.AppendText("Template script to be scheduled created")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Please search in script for: 'Begin here'")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Place Powershell command's to be run there.")
				
			}
			else
			{
				##### Here Script to create script to create Winget Update task
			}
		}
		$package_scheduledTask_Edit_script_button1.Enabled = $true
		$package_scheduledTask_Edit_script_button1.Visible = $true
		$package_scheduledtasK_option_startup_checkbox1.Enabled = $true
		$package_scheduledtasK_option_startup_checkbox1.Visible = $true
		$package_scheduledtasK_option_weekly_checkbox1.Enabled = $true
		$package_scheduledtasK_option_weekly_checkbox1.Visible = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Enabled = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Visible = $true
	}
	


$package_scheduledTask_Edit_script_button1_Click={
	#TODO: Place custom script here
	
}

$package_scheduledtasK_option_startup_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_createIntunewin_scripts_button1_Click={
	#TODO: Place custom script here
	
}

$windowsFirewallToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$config_InstallRequriedPSmodules_Click={
	#TODO: Place custom script here
	$config_install_required_ps_modules = @'
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

Write-Host "Script will install Evergreen powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Evergreen) { Import-Module -Name Evergreen -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Evergreen -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Evergreen -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -PathType Leaf))
		{
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		else
		{
			Remove-Item -Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -Confirm:$false -Force
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
	}
}

$downloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$wingetToolStripMenuItem1_Click={
	#TODO: Place custom script here
	
}

$config_download_folder_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$config_downloadFolderBrowse_Click={
	#TODO: Place custom script here
	if ($config_download_folderbrowsermoderndialog2.ShowDialog() -eq 'OK')
	{
		$config_download_folder_textbox3.Text = $config_download_folderbrowsermoderndialog2.SelectedPath
	}
}

$download_winget_tab_Click={
	#TODO: Place custom script here
	
}

$download_winget_search_button1_Click={
	
	$downloadWingetSearchText = $download_winget_search_textbox5.Text
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$download_winget_output_textbox3.Text = $null
	
	$download_winget_listbox1.Items.Clear()
	$download_winget_version_listbox1.Items.Clear()
	
	
	$table_download_winget = New-Object System.Data.DataTable;
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "ID";
	$table_download_winget.Columns.Add($column_download_winget);
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "Name";
	$table_download_winget.Columns.Add($column_download_winget);
	
	

	foreach ($wsearch_l in $downloadwingetsearch)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row_download_winget = $table_download_winget.NewRow();
			$download_winget_extraStrip = $wsearch_l.substring(0, $wsearch_IdStart)
			$download_winget_extraStrip = $download_winget_extraStrip.TrimEnd()
			$row_download_winget["Name"] = $download_winget_extraStrip
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row_download_winget["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			if ($row_download_winget["ID"] -notlike $null)
			{
				$table_download_winget.Rows.Add($row_download_winget);
				$download_winget_listboxInput = $row_download_winget| Select Name,ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
				$download_winget_listbox1.Items.Add($download_winget_listboxInput)
			}
			## - Save changes to the table:
			$table_download_winget.AcceptChanges();
			
			#$download_datagridview1.DataSource = $table_download_winget
			
			#$download_winget_listboxInput = $table_download_winget | Select Name, ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
			#$download_winget_listbox1.DataSource = $download_winget_listboxInput
			
			
			
		}
		
	}
	
	
	
}

$download_winget_search_textbox5_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 

}

$download_winget_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_version_listbox1.Items.Clear()
	
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	
	
	foreach ($wsearch_55 in $downloadwingetsearchversionselected)
	{
		
		
		if (($wsearch_55 -notlike "Found*") -and ($wsearch_55 -notlike "*-*") -and ($wsearch_55 -notlike "*Version*") -and ($wsearch_55 -notlike $null) -and ($wsearch_55 -notlike "* *"))
		{
			
			$download_winget_version_listbox1.Items.Add($wsearch_55)
			
			
		}
		
	}
	
	
	
	
}

$download_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	#Write-Host $download_datagridview1.SelectedRows.Item.ToString()
}

$download_winget_version_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_download_and_add_button1.Visible = $true
	$download_winget_download_and_add_button1.Enabled = $true
}

$download_winget_download_and_add_button1_Click={
	#TODO: Place custom script here
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	$download_winget_explorer_button1.Enabled = $true
	$download_winget_explorer_button1.Visible = $true
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	if (!(Test-Path -Path $download_winget_path))
	{
		
		New-Item -ItemType Directory -Path $download_winget_path
	}
	#$downloadWingetToLib = winget download --download-directory $download_winget_path --id $winget_download_selected_id --accept-package-agreements --accept-source-agreements
	
	#$download_winget_output_textbox3.Text = $downloadWingetToLib
	#$config_downloadpath
	#Write-Host $download_winget_version_listbox1.SelectedItem
	$download_winget_selectedversion = $download_winget_version_listbox1.SelectedItem
	$download_winget_package = @'
winget download --download-directory !!@download_winget_path@!! --id !!@winget_download_selected_id@!! --accept-package-agreements --accept-source-agreements --version !!@download_winget_selectedversion@!!
'@
	$download_winget_package = $download_winget_package.Replace("!!@winget_download_selected_id@!!", $winget_download_selected_id)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_selectedversion@!!", $download_winget_selectedversion)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_path@!!", $download_winget_path)
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -PathType Leaf))
		{
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		else
		{
			Remove-Item -Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -Confirm:$false -Force
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		
		powershell_ise 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1'
	}
	
}


$download_winget_explorer_button1_Click={
	#TODO: Place custom script here
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	explorer $download_winget_path
}

$config_help_button1_Click={
	#TODO: Place custom script here
	
}

$config_exit_help_button1_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">548</Line>
    <Line Disabled="True">1450</Line>
    <Line Disabled="True">1452</Line>
    <Line Disabled="False">1910</Line>
    <Line Disabled="False">3327</Line>
    <Line Disabled="False">4891</Line>
    <Line Disabled="True">5643</Line>
    <Line Disabled="True">5645</Line>
    <Line Disabled="True">5751</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>