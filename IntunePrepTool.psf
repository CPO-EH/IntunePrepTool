<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAH2ISURBVHhe7f1ndx3JlbWLvr/ljvMr7pc7xrkf
zv3yjpa61a23pW7ZlqpUvkqqEovee0947z0IwnuA8N577733nvOuFRtJbOzaIEESJAvY8wHmyJ2Z
kZGRLmJFxMrI/0UIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEkBPIV//P//P/i/L2C4ny9AmM8vD2pyiKoijq
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
oOgDQFEURVEuKPoAUBRFUZQLij4AFEVRFOWCog8ARVEURbmgaABQFEVRlAuKToAURVEU5YKiEyBF
URRFuaDoBEhRFEVRLij6AFAURVGUC+pIfAB+/7vfmYgoiqIoijoe+p2U3Z9++gm6+gbfrgvg7Nlz
+OLzz/Htt98affPNNy/luOyg+Q8Rxtmyg+Z/bmGs+VeFcbbsfYWx5t81jLNlbxPGmv+QYaz5DxHG
2bKD5hnm1WGs+VeFcbbsJISx5t81jLNlbxPGcf5VYZwte5sw1vyHCONs2UHzHyKMs2Vff/21TL9G
R0//m7cA1HeP4/z584iOjkZKSgqSkpIoiqIoijoGSktLg5+vDxpbOtA3s/NmBkBd1xguX76CxMRE
E1FqaipFURRFUcdAGRkZCA8LRVNr59sZAJcuXUZCQoKJTFsBKIqiKIr6+Ss9PR2hIcHvbgBoZMnJ
yRRFURRFHQNpy/3bGwCdYzh79ixiY2OQmioWRXISRVEURVHHQOliAAT4+aCppf3NDICJVaClfxYN
smHvwDAGR8YxMDxGURRFUdQxkJbbnd19GJ6YQ+f42uEMAL/AUNMCoBv0z+6gZ2oL3VObFEVRFEUd
F01umtf/uibWze/u0cXXGwCP3DxTJpe3jLVAURRFUdTxlhb+nYNTrzcACCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEPLz5n/9r/8/Z9iyB/HWFzwAAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	[string]$downloadpath
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		else
		{
			if (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
			{
				[void][System.Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
			}
		
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	$config_tabcontrol2.Dock = 'Fill'
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Enabled = $true
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_intunewin_tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {

	$wgid = $winget_WingetID_textbox1.text

	
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	[string]$c_downloadfolder = $config_download_folder_textbox3.Text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
			downloadpath    = $c_downloadfolder;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
			{
				Unblock-File -Path $exe_org_path -Confirm:$false 
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_intunewin_tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$argList2 = $exe_parsUnInstall_textbox1.text
		if ($exe_openfiledialog1.SafeFileName -like "*.exe")
		{
			
			$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
		}
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	
	$exe_parsUnInstall_textbox1.Enabled = $true
	$exe_parsUnInstall_textbox1.Visible = $true
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true


	
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $true
		$exe_parsUnInstall_textbox1.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $true
		$exe_parsUnInstall_textbox1.Visible = $true
		$argList2 = $exe_parsUnInstall_textbox1.text
		if ($exe_openfiledialog1.SafeFileName -like "*.exe")
		{
			
			$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
		}
		
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	

}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		
	}
	$exe_labelVoorbeeldUninstall.Visible = $true
	$exe_labelVoorbeeldUninstall.Enabled = $true
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	$exe_UnlInstallParameters.Visible = $true
	$exe_UnlInstallParameters.Enabled = $true
	$exe_radiobuttonUninstallEXEPath.Visible = $true
	$exe_radiobuttonUninstallEXEPath.Enabled = $true
	$exe_install_test_button1.Enabled = $true
	$exe_install_test_button1.Visible = $true
	$exe_radiobuttonGebruikZelfdeEXEAlsB.Enabled = $true
	$exe_radiobuttonGebruikZelfdeEXEAlsB.Visible = $true
	$exe_radiobutton3.Enabled = $true
	$exe_radiobutton3.Visible = $true

	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$exeFile = "!!ExeFile!!"
$exeParameters = "!!ExeParams!!" ## Check EXE Params.. 
# Customer variables
$logDir = "!!LogDir!!"
$registerDetectionRoot = "!!RegisterDetectionRoot!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
try
{
	Start-Process -FilePath $exeFile -ArgumentList $exeParameters -ErrorAction Stop -wait
	write-host "Installation completed of $exeFile" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
	write-host "Error executing $exeFile" -ForegroundColor Yellow
	Write-Host "installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:









Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	$exe_installFile = $exe_installFile.Replace('"!!AppName!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!LogDir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionRoot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!Version!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!ExeFile!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!ExeParams!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Unblock-File -Path $msi_org_path -Confirm:$false
				$MSINewname = $msi_openfiledialog1.FileName
				
				$MSINewname = $MSINewname.Split("\")[$MSINewname.Split("\").Count - 1]
				$MSINewname = $MSINewname.Replace(" ", "")
				$MSIbestand = "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname"
				#Write-Host $MSIbestand
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			 #$msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v $logfileMSI /i $MSINewname"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### This function handles the detection method in the registry.
	### It will create a key in the registry with the name of the application. 
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
#Start; Write Log file
Start-Transcript -Path $logfile
Set-Location $PSScriptRoot
try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Can't read MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Script started i.cmd" -ForegroundColor Green
		write-host "Possible uninstall command is:" -ForegroundColor Green
		write-host ""
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
		write-host ""
		Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
		write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green

	}
	
	if ($msiuninstallcode -eq $null) { $excode = 1 ; write-error "Can't find uninstall code in MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
    Else
    {
        write-host "Script started i.cmd" -ForegroundColor Green
        write-host "Possible uninstall command is:" -ForegroundColor Green
        write-host ""
        write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
        write-host ""
        Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
        write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
        $excode = 0
    }
   
	
	
}
catch
{
    Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "MSIEXEC Log start:.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
    $MSILOGS = get-content $logfileMSI 
    $MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue


    $excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}

write-host "Possible uninstall command is:" -ForegroundColor Green
write-host ""
write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
write-host ""

### Place extra actions here:







<#----Enf of extra actions--#>
#Stop; Write Log file
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { fDetectionInRegistry -succes $true 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1.Text + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$config_tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already available in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be available in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	}
	catch
	{
		#Error handling here
	}
	
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			$config_download_folder_textbox3.Text = $cis.downloadpath
			
			if ($cis.downloadpath -like 'Enter UNC or local path for the download Package folder. (Evergreen / Winget)')
			{
				#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
				[void][System.Windows.Forms.MessageBox]::Show('Download folder was added to config. Please use this tool or edit "C:\Program Files\IntunePrepTool\config_customerinfo.csv" ', 'Please add Download folder') # Casting the method to [void] suppresses the output. 
			}
			
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
			try
			{
				New-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
	$config_download_folder_textbox3.Text = "Enter UNC or local path for the download Package folder. (Evergreen / Winget)"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkPackageName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkPackageName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkPackageName.intunewin"
			DisplayName   = $weblinkPackageName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create extra folder in startmenu (when needed)"
  if (!(Test-Path -Path $location))
{
	
	New-Item -ItemType Directory -Path $location
}

	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!packagename!!", $weblinkPackageName)
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!packagename", $weblinkPackageName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_packagename.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force }

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget not installed" $excode = 1 }
else { $excode = 0 }

try
{
	
	$install = "!!WingetCommand!!"
if ($install -like "!!doe*")
{
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		<#
		try
		{
			#install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
			
		}
		catch
		{
			
		}
		#>
	}
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale

		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
		}
		catch
		{
			
			
		}
		#>
	}
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
	{

		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
			
		}
		catch
		{
			
		}
		#>
	}
	
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
		}
		catch
		{
			
		}
		#>
	}
}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	#$excode = 0;
	
}
catch
{
	#$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error';  }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_Empty_Scheduled_Task_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}

$winget_remediations_createscripts_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile| Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Upload not yet available for Remediations.. For now use the Intune Admin Portal")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Please reopen IntunePrepTool to create more Remediations scripts")
				
				
			}
		}
		
		
	}
	
	
	
	
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
	
	
	
}

$configToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $true
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_winget_tabcontrol2.Enabled = $true
	$package_winget_tabcontrol2.Visible = $true
	$package_winget_tabcontrol2.Dock = 'Fill'
}
$scheduledTaskToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	$package_ScheduledTask_tabcontrol2.Dock = 'Fill'
	$package_ScheduledTask_tabcontrol2.Enabled = $true
	$package_ScheduledTask_tabcontrol2.Visible = $true
}


$mSIToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $true
	$package_msi_tabcontrol2.Visible = $true
	$package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $true
	$package_exe_tabcontrol2.Visible = $true
	$package_exe_tabcontrol2.Dock = 'Fill'
}

$main_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$wingetUpdateToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false

	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Dock = 'Fill'
	$Remediations_winget_tabcontrol2.Enabled = $true
	$Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Dock = 'Fill'
	$package_weblink_tabcontrol2.Visible = $true
	$package_weblink_tabcontrol2.Enabled = $true
}



$intunewinToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	
	
	$upload_intunewin_tabcontrol2.Dock = 'Fill'
	$upload_intunewin_tabcontrol2.Enabled = $true
	$upload_intunewin_tabcontrol2.Visible = $true
	
}

$wingetSearchShowVersionToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Enabled = $true
	$tools_winget_searchtabcontrol1.Visible = $true
	
}

$findUninstallStringsToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'Fill'
	$tools_uninstallstring_tabcontrol1.Enabled = $true
	$tools_uninstallstring_tabcontrol1.Visible = $true
	
}

$sourceFromWingetToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $true
	$download_tabcontrol1.Visible = $true
	$download_tabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	
}


$Weblink_intunewin_tabpage6_Click={
	#TODO: Place custom script here
	
}

$weblink_packagename_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	
}

$remediations_winget_maxversion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_remediations_maxversion_checkbox_CheckedChanged={
	#TODO: Place custom script here
	
}

$remediate_winget_version_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_wingetid_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$remadiations_winget_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$remediations_winget_upload_button1_Click={
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				
				
			
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				
			
				
				$encoding = [System.Text.Encoding]::UTF8
				$bytes = $encoding.GetBytes($remediate_detectFile)
				$Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
				$Bytes2 = $encoding.GetBytes($remediate_remediateFile)
				$Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
				$UploadRemediationsFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/5/2023 3:38 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	upload.ps1
	===========================================================================
	.DESCRIPTION
		Part of IntunePrepTool
		https://github.com/rink-turksma/IntunePrepTool
		Upload Remediations to Intune
#>
	Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
	if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
	else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
	$displayName = "!!displayName!!"
	$publisher = "!!publisher!!"
	$detectionScriptContent = '!!detectionScriptContent!!'
	$remediationScriptContent = '!!remediationScriptContent!!'
	$tenantID = "!!tenantid!!"
	$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"; $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	$MsalToken = Get-MsalToken -TenantId $tenantID -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
	$uri = "https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts"
	$createdPolicy = Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{ Authorization = $MsalToken.CreateAuthorizationHeader() } -ContentType 'application/json'
	Write-Host "Remediationa policy created successfully with ID: $($createdPolicy.id)" -ForegroundColor Green
	Write-Host "Please assign and schedule with MS Intune Admin console" -ForegroundColor Green
	
'@
				$displayName = $winget_remediations_name_textbox1.Text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!publisher!!", $config_customername)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!displayName!!", $displayName)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!detectionScriptContent!!", $Encoded_remediate_detectFile)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!remediationScriptContent!!", $Encoded_remediate_remediateFile )
				$tenatURL = $upload_tenantURL_textbox.text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!tenantid!!", $tenatURL)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"
				}
				$UploadRemediationsFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1" -Force
				$remadiations_winget_textbox2.AppendText("Created Upload.ps1")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule")
				
				if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					
					
					
					powershell_ise -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
				}
			}
		}
	}
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
}

$remediations_winget_open_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
	$remediate_winget_version = $remediate_winget_version_textbox1.Text
	Invoke-Item "$config_packagefolder\$winget_remediations_name\$remediate_winget_version"
}

$powershell_scheduledtask_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	if ($powershell_scheduledtask_radiobutton.Checked -eq $true)
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $true
		$package_scheduled_task_WingetID_textbox.Visible = $true
		$package_scheduled_task_WingetID_label3.Enabled = $true
		$package_scheduled_task_WingetID_label3.Visible = $true
		$package_ScheduledTask_create_scripts_button1.Enabled = $true
		$package_ScheduledTask_create_scripts_button1.Visible = $true
		
		
	}
	else
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $false
		$package_scheduled_task_WingetID_textbox.Visible = $false
		$package_scheduled_task_WingetID_label3.Enabled = $false
		$package_scheduled_task_WingetID_label3.Visible = $false
	
	}
}

$powershell_Empty_Scheduled_Task_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	$package_ScheduledTask_create_scripts_button1.Enabled = $true
	$package_ScheduledTask_create_scripts_button1.Visible = $true
}



$package_scheduledtasK_option_weekly_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
	{
		$package_scheduledtask_combobox1.Enabled = $true
		$package_scheduledtask_combobox1.Visible = $true
		$package_scheduledtask_time_combobox1.Enabled = $true
		$package_scheduledtask_time_combobox1.Visible = $true
		$package_scheduledtask_am_radiobutton1.Enabled = $true
		$package_scheduledtask_am_radiobutton1.Visible = $true
		$package_scheduledtask_pm_radiobutton.Enabled = $true
		$package_scheduledtask_pm_radiobutton.Visible = $true
		
	}
	else
	{
		$package_scheduledtask_combobox1.Enabled = $false
		$package_scheduledtask_combobox1.Visible = $false
		$package_scheduledtask_time_combobox1.Enabled = $false
		$package_scheduledtask_time_combobox1.Visible = $false
		$package_scheduledtask_am_radiobutton1.Enabled = $false
		$package_scheduledtask_am_radiobutton1.Visible = $false
		$package_scheduledtask_pm_radiobutton.Enabled = $false
		$package_scheduledtask_pm_radiobutton.Visible = $false
	
	}
}

$package_scheduledtask_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$datetimepicker1_ValueChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_time_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_am_radiobutton1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_pm_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_winget_max_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_label3_Click={
	#TODO: Place custom script here
	
}

$package_scheduled_Task_maxVersion_label4_Click={
	#TODO: Place custom script here
	
}

$powershell_create_package_dir_button1_Click={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	else
	{
		if ($powershell_package_name_textbox1.Text -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package name textbox', 'Select Package Name')
		}
		else
		{
			if ($powershell_package_version_textbox1.Text -like $null)
			{
				[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package version textbox', 'Select Package Version')
			}
			else
			{
				$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
				$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
				$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
				$package_scheduledTask_name = $powershell_package_name_textbox1.Text
				$package_scheduledTask_version = $powershell_package_version_textbox1.text
			
			
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"
				}
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"
				}
				$package_ScheduledTask_output_textbox1.Text = "`nNew package direcotory created: `r`n"
				$package_ScheduledTask_output_textbox1.AppendText("$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$powershell_open_package_directory_button1.Enabled = $true
				$powershell_open_package_directory_button1.Visible = $true
				$package_ScheduledTask_create_scripts_button1.Enabled = $true
				$package_ScheduledTask_create_scripts_button1.Visible = $true
				
				
				
			}
		}
	}
}

$powershell_package_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_open_package_directory_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	
	Invoke-Item "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\"
}

$package_ScheduledTask_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_ScheduledTask_create_scripts_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	$package_scheduledtask_system_panel3.Visible = $true
	$package_scheduledtask_system_panel3.Enabled = $true
	

				
				$ScheduledTaskFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	"!!ps1name!!"
	===========================================================================
	.DESCRIPTION
		Please place your script between:
        "Place your Powershell code here" and "End of your Powershell script"
        When done. Save script and close Powershell_ISE
#>
#App Params
$package_scheduledTask_name  = "!!package_scheduledTask_name!!"
$package_scheduledTask_version = "!!package_scheduledTask_version!!"
#Customer vars
$logdir = "!!logdir!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$package_scheduledTask_name $package_scheduledTask_version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$package_scheduledTask_name"
$excode = $null;
#create log directory in programdata when needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates dll directory in logdir when needed.
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates scheduledTasks directory in logdir when needed.
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
#Create registry key when needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application key in registry when needed
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  This is saved in $logdir. Also used in EventViewer
Start-Transcript -Path $logfile
<# Place your Powershell code here#>






















<# End of your Powershell script#>
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
if ($excode -eq 1) { $warning = 'Error'; }
else { $warning = 'Information'; }

if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs")
{
	if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) { remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false }
	copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
			$logdir = "$config_logfoldertarget\scheduledTasks"
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!ps1name!!", "scheduledTask_$package_scheduledTask_name.ps1")
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_name!!", $package_scheduledTask_name)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_version!!", $package_scheduledTask_version)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!logdir!!", $logdir)
				$ScheduledTaskFile | Out-File  "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\scheduledTask_$package_scheduledTask_name.ps1" -Force -Confirm:$false -ErrorAction SilentlyContinue
				copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\IntunePrepTool_msgfile.dll" -Confirm:$false
				$package_ScheduledTask_output_textbox1.AppendText("Template script to be scheduled created")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Please add your Powershell code between 'Place your Powershell code here' and 'End of your Powershell script'")
			$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
			$package_ScheduledTask_output_textbox1.AppendText("Save when done")
				
				
	
		$package_scheduledTask_Edit_script_button1.Enabled = $true
		$package_scheduledTask_Edit_script_button1.Visible = $true
		$package_scheduledtasK_option_startup_checkbox1.Enabled = $true
		$package_scheduledtasK_option_startup_checkbox1.Visible = $true
		$package_scheduledtasK_option_weekly_checkbox1.Enabled = $true
		$package_scheduledtasK_option_weekly_checkbox1.Visible = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Enabled = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Visible = $true
	}
	


$package_scheduledTask_Edit_script_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('Powershell_ISE will open now. Please place powershell code between "Place your Powershell code here" and "End of your Powershell script"; Save when done', 'Powershell_ISE') # Casting the method to [void] suppresses the output. 
	
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\scheduledTask_$package_scheduledTask_name.ps1"
	
	
	
}

$package_scheduledtasK_option_startup_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_createIntunewin_scripts_button1_Click={
	#TODO: Place custom script here

	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	
	if (($package_scheduledtasK_option_startup_checkbox1.Checked -eq $false) -and ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $false))
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Weekly or at startup', 'Please select at least one option when to run') # Casting the method to [void] suppresses the output. 
	}
	else
	{
		$package_scheduledTask_Edit_script_test_install_button1.Enabled = $true
		$package_scheduledTask_Edit_script_test_install_button1.Visible = $true
		$package_scheduledTask_Edit_script_test_uninstall_button1.Enabled = $true
		$package_scheduledTask_Edit_script_test_uninstall_button1.Visible = $true
		$package_scheduledTask_Edit_script_createIntuneWin_button1.Visible = $true
		$package_scheduledTask_Edit_script_createIntuneWin_button1.Enabled = $true
		
		
		$ScheduledTaskInstall = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.232
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
		When needed you can edit the creation of the scheduled task below
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$psFile = "!!psFile!!"
$StartupTask = "!!StartupTask!!"
$WeeklyTask = "!!WeeklyTask!!"
$WeeklyTaskDay = "!!WeeklyTaskDay!!" 
$WeeklyTaskHour = "!!WeeklyTaskHour!!"
$WeeklyTaskAMPM = "!!WeeklyTaskAMPM!!"
$registerDetectionRoot = "!!registerDetectionRoot!!"

# Customer variables
$logDir = "!!LogDir!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
write-host "Script will copy the powershell script to be scheduled now" -ForegroundColor Green
if ( test-path "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -PathType Leaf ) { remove-item "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force  } 
write-host "Script will copy the powershell script to be scheduled now" -ForegroundColor Green
copy-item $psFile -Destination "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force

#Below the code to set the permissions on the scripts folder
write-host "Script will setup NTFS filepermissions for the directory $logdir\scheduledTasks" -ForegroundColor Green
# BEGIN: 3d5f4a6gch7
#Below the code to set the permissions on the scripts folder
write-host "Script will setup NTFS filepermissions for the directory $logdir\scheduledTasks" -ForegroundColor Green
$Acl = Get-Acl "$logdir\scheduledTasks"
$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrators","Modify","Allow")
$System = New-Object System.Security.Principal.NTAccount("SYSTEM")
$Ar2 = New-Object System.Security.AccessControl.FileSystemAccessRule($System,"Modify","Allow")
$Acl.SetAccessRule($Ar)
$Acl.SetAccessRule($Ar2)
Set-Acl "$logdir\scheduledTasks" $Acl
# END: 3d5f4a6gch7

try
{
	
	write-host "Scheduled Task created for $psFile" -ForegroundColor Green
	# Creates the scheduled task
	

$action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-NoProfile -WindowStyle Hidden -Command `"& '$logdir\scheduledTasks\scheduledTask_$appName.ps1'`""
if ($StartupTask -eq $true) {
	$trigger1 = New-ScheduledTaskTrigger -AtStartup -RandomDelay 00:00:30
}
else {
	$trigger1 = $null
}
if ($WeeklyTask -eq $true) {
	$trigger2 = New-ScheduledTaskTrigger -Weekly -DaysOfWeek $WeeklyTaskDay -At $WeeklyTaskHour$WeeklyTaskAMPM
}
else {
	$trigger2 = $null
}
if (($trigger1 -eq $null) -and ($trigger2 -ne $null)) {
    $triggers = @($trigger2)
}
if (($trigger1 -ne $null) -and ($trigger2 -eq $null)) {
    $triggers = @($trigger1)
}
if (($trigger1 -ne $null) -and ($trigger2 -ne $null)) {
    $triggers = @($trigger1, $trigger2)
}
$principal = New-ScheduledTaskPrincipal -UserID "SYSTEM" -LogonType ServiceAccount -RunLevel Highest
Register-ScheduledTask -Action $action -Trigger $triggers -Principal $principal -TaskName $appName -Description "Scheduled Task for $appName" -Force -ErrorAction Stop
write-host "Scheduled Task created for $psFile" -ForegroundColor Green

	$excode = 0;
	
}
catch
{
	write-host "Error creating scheduled task" -ForegroundColor Yellow
	Write-Host "installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}



Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { [System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)  }
else {
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
fDetectionInRegistry -succes $true }
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
		
		$ScheduledTaskUnInstall = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.232
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
		When needed you can edit the deletion of the scheduled task below
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$psFile = "!!psFile!!"
$StartupTask = "!!StartupTask!!"
$WeeklyTask = "!!WeeklyTask!!"
$WeeklyTaskDay = "!!WeeklyTaskDay!!" 
$WeeklyTaskHour = "!!WeeklyTaskHour!!"
$WeeklyTaskAMPM = "!!WeeklyTaskAMPM!!"
$registerDetectionRoot = "!!registerDetectionRoot!!"

# Customer variables
$logDir = "!!LogDir!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
write-host "Script will delete the powershell script used by the task" -ForegroundColor Green
if ( test-path "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -PathType Leaf ) { remove-item "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force  } 


try
{
	# Script deletes the scheduled task here
	write-host "Script will delete the scheduled task" -ForegroundColor Green
	Unregister-ScheduledTask -TaskName $appName -Confirm:$false -ErrorAction Stop
	write-host "Scheduled Task deleted" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
	write-host "Error with deleting scheduled task" -ForegroundColor Yellow
	Write-Host "Uninstallation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}



Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { [System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)  }
else {
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
remove-item $regKeyApp -Confirm:$false -force }
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
		
		$RegisterDetectionroot = "Intune_" + $config_customername
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!registerDetectionRoot!!", $RegisterDetectionroot )
		
		$psfile = "scheduledTask_$package_scheduledTask_name.ps1"
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!AppName!!", $package_scheduledTask_name)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!Version!!", $package_scheduledTask_version)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!psFile!!", $psfile)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!LogDir!!", $config_logfoldertarget)
		

		if ($package_scheduledtasK_option_startup_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $true)
		}
		else
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $false)
		}
		if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTask!!", $true)
			$WeeklyTaskDay = $package_scheduledtask_combobox1.Text
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskDay!!", $WeeklyTaskDay)
			$weeklyTaskHour = $package_scheduledtask_time_combobox1.Text
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskHour!!", $weeklyTaskHour)
			if ($package_scheduledtask_am_radiobutton1.Checked -eq $true)
			{
				$WeeklyTaskAMPM = "AM"
			}
			else
			{
				$WeeklyTaskAMPM = "PM"
			}
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskAMPM!!", $WeeklyTaskAMPM )
			
		}
		else
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTask!!", $false)
		}
		$ScheduledTaskInstall | Out-File "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\install.ps1" -force
	
		$psfile = "scheduledTask_$package_scheduledTask_name.ps1"
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!AppName!!", $package_scheduledTask_name)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!Version!!", $package_scheduledTask_version)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!psFile!!", $psfile)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!LogDir!!", $config_logfoldertarget)
		$RegisterDetectionroot = "Intune_" + $config_customername
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!registerDetectionRoot!!", $RegisterDetectionroot)
		
		if ($package_scheduledtasK_option_startup_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $true)
		}
		else
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!StartupTask!!", $false)
		}
		if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTask!!", $true)
			$WeeklyTaskDay = $package_scheduledtask_combobox1.Text
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTaskDay!!", $WeeklyTaskDay)
			$weeklyTaskHour = $package_scheduledtask_time_combobox1.Text
			$ScheduledTaskUnInstall= $ScheduledTaskUnInstall.Replace("!!WeeklyTaskHour!!", $weeklyTaskHour)
			if ($package_scheduledtask_am_radiobutton1.Checked -eq $true)
			{
				$WeeklyTaskAMPM = "AM"
			}
			else
			{
				$WeeklyTaskAMPM = "PM"
			}
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTaskAMPM!!", $WeeklyTaskAMPM)
			
		}
		else
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTask!!", $false)
		}
		$ScheduledTaskUnInstall | Out-File "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\uninstall.ps1" -force
		
		$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
		$package_ScheduledTask_output_textbox1.AppendText("Install and uninstall.ps1 created'")
		$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
		$package_ScheduledTask_output_textbox1.AppendText("Please test. When ready click on create Intunewin file")
		
		

		
	}
	
	
	
	
}

$windowsFirewallToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$config_InstallRequriedPSmodules_Click={
	#TODO: Place custom script here
	$config_install_required_ps_modules = @'
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

Write-Host "Script will install Evergreen powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Evergreen) { Import-Module -Name Evergreen -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Evergreen -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Evergreen -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -PathType Leaf))
		{
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		else
		{
			Remove-Item -Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -Confirm:$false -Force
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
	}
}

$downloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$wingetToolStripMenuItem1_Click={
	#TODO: Place custom script here
	
}

$config_download_folder_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$config_downloadFolderBrowse_Click={
	#TODO: Place custom script here
	if ($config_download_folderbrowsermoderndialog2.ShowDialog() -eq 'OK')
	{
		$config_download_folder_textbox3.Text = $config_download_folderbrowsermoderndialog2.SelectedPath
	}
}

$download_winget_tab_Click={
	#TODO: Place custom script here
	
}

$download_winget_search_button1_Click={
	
	$downloadWingetSearchText = $download_winget_search_textbox5.Text
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$download_winget_output_textbox3.Text = $null
	
	$download_winget_listbox1.Items.Clear()
	$download_winget_version_listbox1.Items.Clear()
	
	
	$table_download_winget = New-Object System.Data.DataTable;
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "ID";
	$table_download_winget.Columns.Add($column_download_winget);
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "Name";
	$table_download_winget.Columns.Add($column_download_winget);
	
	

	foreach ($wsearch_l in $downloadwingetsearch)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row_download_winget = $table_download_winget.NewRow();
			$download_winget_extraStrip = $wsearch_l.substring(0, $wsearch_IdStart)
			$download_winget_extraStrip = $download_winget_extraStrip.TrimEnd()
			$row_download_winget["Name"] = $download_winget_extraStrip
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row_download_winget["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			if ($row_download_winget["ID"] -notlike $null)
			{
				$table_download_winget.Rows.Add($row_download_winget);
				$download_winget_listboxInput = $row_download_winget| Select Name,ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
				$download_winget_listbox1.Items.Add($download_winget_listboxInput)
			}
			## - Save changes to the table:
			$table_download_winget.AcceptChanges();
			
			#$download_datagridview1.DataSource = $table_download_winget
			
			#$download_winget_listboxInput = $table_download_winget | Select Name, ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
			#$download_winget_listbox1.DataSource = $download_winget_listboxInput
			
			
			
		}
		
	}
	
	
	
}

$download_winget_search_textbox5_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 

}

$download_winget_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_version_listbox1.Items.Clear()
	
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	
	
	foreach ($wsearch_55 in $downloadwingetsearchversionselected)
	{
		
		
		if (($wsearch_55 -notlike "Found*") -and ($wsearch_55 -notlike "*-*") -and ($wsearch_55 -notlike "*Version*") -and ($wsearch_55 -notlike $null) -and ($wsearch_55 -notlike "* *"))
		{
			
			$download_winget_version_listbox1.Items.Add($wsearch_55)
			
			
		}
		
	}
	
	
	
	
}

$download_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	#Write-Host $download_datagridview1.SelectedRows.Item.ToString()
}

$download_winget_version_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_download_and_add_button1.Visible = $true
	$download_winget_download_and_add_button1.Enabled = $true
}

$download_winget_download_and_add_button1_Click={
	#TODO: Place custom script here
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	$download_winget_explorer_button1.Enabled = $true
	$download_winget_explorer_button1.Visible = $true
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	if (!(Test-Path -Path $download_winget_path))
	{
		
		New-Item -ItemType Directory -Path $download_winget_path
	}
	#$downloadWingetToLib = winget download --download-directory $download_winget_path --id $winget_download_selected_id --accept-package-agreements --accept-source-agreements
	
	#$download_winget_output_textbox3.Text = $downloadWingetToLib
	#$config_downloadpath
	#Write-Host $download_winget_version_listbox1.SelectedItem
	$download_winget_selectedversion = $download_winget_version_listbox1.SelectedItem
	$download_winget_package = @'
winget download --download-directory !!@download_winget_path@!! --id !!@winget_download_selected_id@!! --accept-package-agreements --accept-source-agreements --version !!@download_winget_selectedversion@!!
'@
	
	$download_winget_package = $download_winget_package.Replace("!!@winget_download_selected_id@!!", $winget_download_selected_id)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_selectedversion@!!", $download_winget_selectedversion)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_path@!!", $download_winget_path)
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -PathType Leaf))
		{
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		else
		{
			Remove-Item -Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -Confirm:$false -Force
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		
		powershell_ise 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1'
	}
	
}


$download_winget_explorer_button1_Click={
	#TODO: Place custom script here
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	explorer $download_winget_path
}

$config_help_button1_Click={
	#TODO: Place custom script here
	
}

$config_exit_help_button1_Click={
	#TODO: Place custom script here
	
}

$exe_maak_uninstall_script_button1_Click={
	#TODO: Place custom script here
	$exe_maak_intuneWIN_button1.Enabled = $true
	$exe_maak_intuneWIN_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	
	$exe_uninstallFile = @'
<#	
    .NOTES
    ===========================================================================
     Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
     Created on:   	21-5-2023 18:04
     Created by:   	Rink Turksma
     Organization: 	
     Filename:     	uninstall.ps1
    ===========================================================================
    .DESCRIPTION
        Parameters will be filled by IntunePrepTool.
#>
#App Parameters
$appName = "!!AppName!!"
$version = "!!version!!"
$exeFile = "!!EXEFile!!"
$exeParameters = "!!EXEPARMS!!" ##Check EXE PARAMETERS.. 
#Customer variables
$logDir = "!!logdir!!"
$registerDetectionRoot = "!!RegisterDetectionroot!!"
#Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
#Create log directory in programdata if it does not exist.
if (!(Test-Path -Path $logDir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
    New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application Key in the Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
    New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Function ensures successful or unsuccessful execution..
	### Eventually you will have, for example:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  
#The code you provided is a comment in PowerShell. It indicates that the following code block is related to a transcript that will be saved in a text file under the $logdir directory and will also be available in the event viewer.
Start-Transcript -Path $logfile
#Start; Write Log file
try
{
	Start-Process -FilePath $EXEFile -ArgumentList $exeParameters -ErrorAction Stop -wait
	write-host "Uninstall completed" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
    write-host "Error executing $EXEbestand" -ForegroundColor Yellow
	Write-Host "Uinstallation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}
### Place extra actions here:





<#----Below is the end of the installation script---#>
#Now the Transcript logging is started
Stop-Transcript
#After this command, the log is automatically saved in the $logdir location
#Here is a way to split the log so that we only have the last run.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
    $lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try / catch block in the execution, we set $excode to 0 or 1
# Based on this, the Log in the Event viewer is set to Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful application message or an unsuccessful one.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		$versie = $exe_versie_textbox1.text
		$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
		$MSIPARSInput = '"' + $exe_msiexecuninstall.Text + '"'
		
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
		
		try
		{
			$exepnaam = $exe_packagenaam_textbox1.text
			$exeversie = $exe_versie_textbox1.text
			$outputDirectory = $config_packagefolder
			$jjmsii = $exe_msiexecuninstall.text
			
			$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
			$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
			$exe_output_textbox1.AppendText("`nu.cmd created `r`n")
			$exe_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
			
			
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
		}
		
		
	}
	else
	{
		
		if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
		{
			$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
			
		}
		else
		{
			$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
		}
	
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	#$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppName!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!version!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEFile!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nUbinstall.ps1 NIET created `r`n")
	}
	}
}

$exe_radiobutton3_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	
	
}

$exe_msiexecuninstall_TextChanged={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_search_button1_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Searching: `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	$wattezoeken = $tools_uninstallstring_search_textbox3.Text
	$InstallsUninstallString = $InstallsUninstallString | where-object { $_.DisplayName -contains $wattezoeken -or $_.DisplayName -match $wattezoeken } 
	
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_uninstallstring_search_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$buttonSearch32Bit_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Searching: `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	$wattezoeken = $tools_uninstallstring_search_textbox3.Text
	$InstallsUninstallString = $InstallsUninstallString | where-object { $_.DisplayName -contains $wattezoeken -or $_.DisplayName -match $wattezoeken }
	
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}




$package_scheduledTask_Edit_script_test_install_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\install.ps1"
}

$package_scheduledTask_Edit_script_test_uninstall_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\uninstall.ps1"
}

$package_scheduledTask_Edit_script_createIntuneWin_button1_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $powershell_package_name_textbox1.Text
	$msiversie = $powershell_package_version_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$package_ScheduledTask_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$package_ScheduledTask_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$package_ScheduledTask_output_textbox1.AppendText("`r`n")
	
	$package_ScheduledTask_output_textbox1.AppendText("Install command is: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("un-install command is: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$package_ScheduledTask_output_textbox1.AppendText("$regkeyApp `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Please reopen tool to make another Intunewin package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$package_ScheduledTask_output_textbox1.AppendText("Config.csv written to: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$package_ScheduledTask_output_textbox1.AppendText("  `r`n")
	$package_scheduledTask_Edit_script_UploadLogo_button1.Enabled = $true
	$package_scheduledTask_Edit_script_UploadLogo_button1.Visible = $true
	$package_ScheduledTask_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$package_scheduledTask_Edit_script_UploadLogo_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $powershell_package_name_textbox1.text
	$exeversie = $powershell_package_version_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	if([System.Windows.Forms.MessageBox]::Show("Click yes to open the upload screen. Then load the $outputDirectory\$exepnaam\$exeversie\output\config.csv file there", 'Upload Now?',[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$package_ScheduledTask_tabcontrol2.Enabled = $false
		$package_ScheduledTask_tabcontrol2.Visible = $false
	
		
		$upload_intunewin_tabcontrol2.Enabled = $true
		$upload_intunewin_tabcontrol2.Visible = $true
		$upload_intunewin_tabcontrol2.Dock = 'Fill'
	}
	
}

$reloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}


$reopenIntunePrepToolToolStripMenuItem_Click={
	#TODO: Place custom script here
$ReloadIntunePrepTool = @'
	Set-Location "C:\Program Files\IntunePrepTool\"
	taskkill.exe /F /IM "IntunePrepTool.exe"
	& "C:\Program Files\IntunePrepTool\IntunePrepTool.exe"
'@
	if (Test-Path "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1")
	{
		powershell.exe -file "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1"
	}
	else
	{
		$ReloadIntunePrepTool | Out-File "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1" -Confirm:$false -Force
		Start-Sleep 1
		powershell -file "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1"
	}
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">548</Line>
    <Line Disabled="True">1336</Line>
    <Line Disabled="True">1338</Line>
    <Line Disabled="False">1796</Line>
    <Line Disabled="False">3215</Line>
    <Line Disabled="False">4794</Line>
    <Line Disabled="True">5546</Line>
    <Line Disabled="True">5548</Line>
    <Line Disabled="True">5654</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>Renci.SshNet, Version=2016.0.0.0, Culture=neutral, PublicKeyToken=1cee9f8bde3db106|..\..\..\..\..\Desktop\Renci.SshNet.dll</Assembly>
  </Assemblies>
</File>