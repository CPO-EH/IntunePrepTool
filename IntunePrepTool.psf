<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAGdYAABnWARjRyu0AAC5fSURBVHhe7d33U1xnvufxqa3dv2Fr/4hNtVW7
dbe27g93627t1N6dmbt1Z8Yzd2bs6wm2HGRbWbJyQhHliAJWAgnlgBACBBJZQggQQRJZ5Jya1DSf
fZ4DLSP5aKxgHRqf97vqVTTdfU5324jn202HnxARERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
EREREREREREREREREREREVFk9a9+8pM/ff7VvNgT8RdjDx+LBwAAM9jJMxdjf/6P/xg7ucy/vL98
9NnZ4tpOldT3qqi2CwAAzGCljQO6XVCuyWX+5cWfvRxbbs/8oFq3i2oAAPCtO8W1ynxDd5zta1xP
exXO9obbaa/CXnb4dhTXdHz/ABB78kxsWUOf684AAPCLrJI6pd+vUmr+I6Xeffx6zDZ3HtQoo/DN
t3fuiBdWv/H2GWZbexsyjcInLW84ADgTSJ0yipuV/qBF6SVdynzYYo5788kEAIBIZRdOu4BeuVWo
pMyHup5Z8nrulOjyrQe6mv7gzbY3rpjtraQXTzP7fubF46Yctpdt1+mskvpXHQDOxpY39js33m6U
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
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERGRh/3kJ/8fObFrsZh+vWgAAAAA
SUVORK5CYII=</Preview>
  <Form>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
sJ65IxcuA/ZYtgzmP/of/h+3GuaxOUkBAA==</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	<#
	$regkeyRootCSN = "HKLM:\Software\CSN_Package"
	try
	{
		[string]$klnm = $klantnaam_textbox1.text
		[string]$ldir = $logfoldertarget_textbox2.text
		[string]$sdir = $packacgedir_textbox3.text
		
		$vvcld = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigLogDir -ErrorAction Stop
		$vvck = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigKlant -ErrorAction Stop
		$vvcsd = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigSourceDir -ErrorAction Stop
		$klantnaam_textbox1.text = $vvck.ConfigKlant
		$logfoldertarget_textbox2.text = $vvcld.ConfigLogDir
		$packacgedir_textbox3.text = $vvcsd.ConfigSourceDir
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Je hebt nog geen Klantnaam, Log en/of Source Dir opgegeven.. Ga naar Config', 'Configureren') # Casting the method to [void] suppresses the output. 
	}
	#>
	Set-Location $PSScriptRoot
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername  -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	
}


$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }

	
	$WinGetID = $wid
			$regApp1 = $WinGetID.Split(".")[1]
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
	
		$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	08/03/2023 12:15
	 Created by:   	Rink Turksma
	 Organization: 	CSN Groep B.V.
	 Filename:     	Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
$WinGetID = "!!WinGetID!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"

#Dyn vars
$regApp1 = $WinGetID.Split(".")[1]
$logfile = $(Join-Path $logdir  "$WinGetID$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget Is niet geinstalleerd" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
		$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
		$installfile = $installfile.Replace('!!logdir!!', $logdir)
		$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
		$installfile = $installfile.Replace('!!versie!!', $versie)
		if ($wlo -ne $null)
		{
		$installfile = $installfile.Replace('!!locale!!', $wlo)
		$installfile = $installfile.Replace("!!localeSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
		if ($wve -ne $null)
		{
		$installfile = $installfile.Replace('!!versionWinget!!', $wve)
		$installfile = $installfile.Replace("!!versionSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
	
	
	if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
		}
	
		
		$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
		$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
	
	
		Set-Location $PSScriptRoot
		
		
		& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
		
		Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
		$winget_output_textbox3.Text = "`nNew intunewin package created: `r`n"
	
		$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
		$winget_output_textbox3.AppendText("`r`n")
		$winget_output_textbox3.AppendText("Version: $Versie `r`n")
		$winget_output_textbox3.AppendText("Install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
		$winget_output_textbox3.AppendText("un-install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
		$winget_output_textbox3.AppendText("Detection registry is: `r`n")
		$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
		$regkeyApp = "$regkeyRoot$regApp1\"
		$regkeyApp
		$winget_output_textbox3.AppendText("$regkeyApp `r`n")
		$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
		$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName = $wingetID
			Publisher = $config_customername_textbox.Text
			AppVersion = $versie;
			reglocation = $regkeyApp
			regValue = 'Versie'
			installCMD = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD = "powershell -executionpolicy bypass -file uninstall.ps1"			
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
	}
	
	

$winget_WingetID_textbox1_TextChanged={
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null) { #Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage2_Click={
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click={
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click={
	#TODO: Place custom script here
	
	#$showurl = winget show $wgid
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Expecting Winget in: C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}

		$wgid = $winget_WingetID_textbox1.text
		try
		{
			$showurl = & $winget_exe show $wgid
			foreach ($l in $showurl)
			{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
			}
		}
	catch
	{
		$showurl = winget show $wgid
		foreach ($l in $showurl)
		{
			if ($l -like "*Download Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
		
	}
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_save_button_Click={
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text

	
	$config_customerinfo += @([config_customerinfo]@{
			customername =  $c_customername
			logfoldertarget   = $c_logfoldertarget
			packagefolder	  = $c_packagefolder
			tenanturl   = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_import_csv = Import-Csv config_customerinfo.csv -ErrorAction Stop
	$config_listbox = $null;
	foreach ($cis in $config_import_csv)
	{
		Update-ListBox $config_listbox $cis.customername -Append
	}
	
	
	
}

$tabcontrol1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click={
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click={
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder;  $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
	}
	$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
	
	[string]$exe_org_path = $exe_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
		$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
		$exe_panel1.Enabled = $true
		$exe_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
	}
	$exe_open_sourcedir_button1.Enabled = $true
	$exe_open_sourcedir_button1.Visible = $true
}

$exe_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage5_Click={
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click={
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file  "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" 
	}
	

}

$exe_radiobuttonUninstallEXEPath_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click={
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click={
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click={
	#TODO: Place custom script here


	
	$exe_installFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	

	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information';  remove-item $regkeyApp  }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$exe_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	
}

$msi_buttonOpenMSIFile_Click={
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click={
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
	}
	$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
	[string]$msi_org_path = $msi_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nMSI file copy failed `r`n")
		$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
		$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
		$msi_panel1.Enabled = $true
		$msi_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
	}
	$appNaam = $msipnaam
	$versie = $msiversie
	$MSIbestand = $msi_openfiledialog1.SafeFileName
	#klant variabelen
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	#Dyn vars
	$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
	$filenaamMSILog = $appNaam + $versie + "MSI"
	$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
	$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
	$msi_OpenSourceDir_button1.Enabled = $true
	$msi_OpenSourceDir_button1.Visible = $true
}

$labelInstallParametersadj_Click={
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click={
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'

	$msi_installFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
    write-host $startPMSI
	$msilog = get-content $logfileMSI
    if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
    Else {
    foreach ($ml in $msilog) {
    if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*"){ 
    $msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
    }
    }
    write-host "Product succesvol geinstalleerd" -ForegroundColor yellow -BackgroundColor black
    write-host "Mogelijke uninstall commando is:" -ForegroundColor yellow -BackgroundColor black
    write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
    }

	
	$excode = 0
}
catch
{
	Write-Host "Installatie mislukt" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
    write-host "Zie log file v.d. MSI waarom dit niet werkt:" -ForegroundColor Red -BackgroundColor Blue
    write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "Zie wat dit betekent: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$msi_install_par_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	
}

$msi_OpenSourceDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click={
	#TODO: Place custom script here
	$msi_uninstallFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
    write-host $startPMSI
	write-host "Unistall uitevoerd" -ForegroundColor yellow -BackgroundColor black
   

	
	$excode = 0
}
catch
{
	Write-Host "Deinstallatie mislukt" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
	
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	
}

$msi_button4TestUninstallPowers_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click={
	#TODO: Place custom script here
	Clear-Host
}

$tabpage1_Click={
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click={
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click={
	#TODO: Place custom script here
	$config_csv_openfiledialog1.ShowDialog()
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	#Write-Host $ConfigCSVImport
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$itwnffilepath = $filepath + $itwnf
	$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
	$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
	$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
	$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
	$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
	$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
	$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
	$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD

}

$upload_IntuneWinFile_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click={
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IntuneWin32App -Force }

Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "20H2"
	write-host "We will first check if there are any apps already availeble in Intune with the same DisplayName" -ForegroundColor Green ; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green ; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be availeble in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
	
	if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		
		foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
		{
			write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
			$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
			$evtvversie = $vorigeversie.DisplayVersion
			
			if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
			else
			{
				write-host ""; Write-host "`r`n"; Write-host "`r`n"
				$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
					try
					{
						Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
					}
					catch
					{
						Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
					}
				}
			}
		}
		
		foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
		{
			$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
			$niksdoen = $response -eq "q"
			if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
			else
			{
				write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
				Write-host "We will fix superseedence for:" -ForegroundColor Green
				$vorigeversie.displayVersion
				
				$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
				$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
				if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
				Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
			}
		}
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE? ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}

$upload_dep_textbox1_TextChanged={
	#TODO: Place custom script here
	
}





$config_panel_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged={
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged={
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername 
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget ; 
			$config_packagefolder_textbox.text = $cis.packagefolder ; 
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click={
	#TODO: Place custom script here
	$config_customername_textbox.text = "'Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click={
	#TODO: Place custom script here
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_search_string = $tools_search_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe search $tools_winget_search_string
	
	}
	catch
	{
		$tools_winget_id = winget search $tools_winget_search_string
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_button_Click={
	#TODO: Place custom script here
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_show_winget.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string
		
	}
	catch
	{
		$tools_winget_id = winget show $tools_winget_show_string
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged={
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click={
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string --versions
		
	}
	catch
	{
		$tools_winget_id = winget show $tools_winget_show_string --versions
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="False">1688</Line>
    <Line Disabled="False">2568</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>