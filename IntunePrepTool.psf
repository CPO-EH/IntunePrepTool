<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>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</Preview>
  <Form>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
4QtTaUTOb3G1hTDJzfr8r/6H/wcxxGG085QBAA==</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	Set-Location $PSScriptRoot
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {
	#TODO: Place custom script here
	
	#$showurl = winget show $wgid
	
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Expecting Winget in: C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$wgid = $winget_WingetID_textbox1.text
	try
	{
		$showurl = & $winget_exe show $wgid
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
	}
	catch
	{
		
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	}
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
	}
	$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
	
	[string]$exe_org_path = $exe_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
		$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
		$exe_panel1.Enabled = $true
		$exe_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
	}
	$exe_open_sourcedir_button1.Enabled = $true
	$exe_open_sourcedir_button1.Visible = $true
}

$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	
	
	$exe_installFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	
	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information';  remove-item $regkeyApp  }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
	}
	$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
	[string]$msi_org_path = $msi_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
		$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
		$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
		$msi_panel1.Enabled = $true
		$msi_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
	}
	$appNaam = $msipnaam
	$versie = $msiversie
	$MSIbestand = $msi_openfiledialog1.SafeFileName
	#klant variabelen
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	#Dyn vars
	$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
	$filenaamMSILog = $appNaam + $versie + "MSI"
	$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
	$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
	$msi_OpenSourceDir_button1.Enabled = $true
	$msi_OpenSourceDir_button1.Visible = $true
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
    write-host $startPMSI
	$msilog = get-content $logfileMSI
    if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
    Else {
    foreach ($ml in $msilog) {
    if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*"){ 
    $msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
    }
    }
    write-host "Product installation success" -ForegroundColor yellow -BackgroundColor black
    write-host "Possible uninstall command is:" -ForegroundColor yellow -BackgroundColor black
    write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
    }

	
	$excode = 0
}
catch
{
	Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
    write-host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "See what this meens: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
    write-host $startPMSI
	write-host "Unistall done!" -ForegroundColor yellow -BackgroundColor black
   

	
	$excode = 0
}
catch
{
	Write-Host "Uninstall failed" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	$config_csv_openfiledialog1.ShowDialog()
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	#Write-Host $ConfigCSVImport
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$itwnffilepath = $filepath + $itwnf
	$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
	$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
	$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
	$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
	$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
	$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
	$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
	$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
	
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IntuneWin32App -Force }

Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "20H2"
	write-host "We will first check if there are any apps already availeble in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be availeble in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE? ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}

$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "'Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_search_string = $tools_search_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe search $tools_winget_search_string
	
	}
	catch
	{
		$tools_winget_id = winget search $tools_winget_search_string
		
		
	}
	#>
	$tools_winget_search_string = $tools_search_winget_textbox.text
	$tools_winget_id = winget search $tools_winget_search_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string --versions
		
	}
	catch
	{
	#>
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkName\$weblinkVersion\Output\$weblinkName.intunewin"
	
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkName.intunewin"
			DisplayName   = $weblinkName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>


$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile ="!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$Name$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$Name"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{

	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun



	
	
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>


$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile ="!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$Name$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$Name"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{

	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun



	
	
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1" -force
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	
	$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	12/05/2023 14:36
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget Is niet geinstalleerd" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun

'@
	$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
	$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
	$installfile = $installfile.Replace('!!logdir!!', $logdir)
	$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$installfile = $installfile.Replace('!!versie!!', $versie)
	if ($wlo -ne $null)
	{
		$installfile = $installfile.Replace('!!locale!!', $wlo)
		$installfile = $installfile.Replace("!!localeSelected!!", $true)
	}
	else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
	if ($wve -ne $null)
	{
		$installfile = $installfile.Replace('!!versionWinget!!', $wve)
		$installfile = $installfile.Replace("!!versionSelected!!", $true)
	}
	else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
	
	
	if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
	}
	
	
	$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
	$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
	$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
	$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
	$winget_test_install_button1.Enabled = $true
	$winget_test_install_button1.Visible = $true
	$winget_uninstall_test_button.Enabled = $true
	$winget_uninstall_test_button.Visible = $true
	$winget_maakPackage_button1.Enabled = $true
	$winget_maakPackage_button1.Visible = $true
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">559</Line>
    <Line Disabled="False">1528</Line>
    <Line Disabled="False">2465</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>