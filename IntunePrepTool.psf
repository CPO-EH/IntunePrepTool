<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAGdYAABnWARjRyu0AAFgnSURBVHhe7d3njxtpwi32hYH70X+B/wAb/uav
99oGbODiNfxeXO++u7NZM7MTpZnRjKSW1Gq11FLnnHPOOeecc84558zOORw/T5GUWj1UanGkknh+
wgFTsVhVpPgcssni74iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiOgq/tN/+h++umfxKCIhLTciMi6VYRiGYZiPOIlpeRF/
/8e1CN0w/3I3b5ml9M9uondmC91TGoZhGIZhPuL0z+2gsWccumH+5VIzCyIG53dR0z2JWoZhGIZh
UNszhfre6SulTly3zsD5bxLlule87breKWXZ5XjeM7n2+gIQm5gRMTC3/exG63rkAsgZ6Q6fHddf
zjAMwzCfbuRgWtM5gZLGwSulWly3rHnI4GWvzgCq2sdQ0TZq4DKRJl0MXSZS3jIsll2sg1j+rrHl
KxQA0RzqusbE4RSqu+ZQ3b2I2t4l1Ctl4PkGYhiGYZhPMQ19Myiq60OhiByU3ybF9f3IKmtHYW2v
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
ubO7q/x/fa8F4Ey8QpA3yjDMpxdZAuSfAeQrC4Zh1Bv5/1T+f30vBaB/dhuLq5vY3dlWbpBhGIZh
mA+Xra0tgwP9y/JOBWBpbQtbmxvY2GAYhmEY5kPH0ED/srxzAZAzMDRjhmEYhmHUGxYAhmEYhjHB
sAAwDMMwjAmGBYBhGIZhTDAsAAzDMAxjgmEBYBiGYRgTDAsAwzAMw5hgWAAYhmEYxgTDAsAwDMMw
Jph3KgDL61vY3dbOhGEYhmGYjydy/J65SgEYmNvGxOI2Zle2lBkwDMMwDPPxRI7fowvbGFx4wwKQ
nJEbsXIIDIkrDIrWIJsDwzAMwzAfX+Q4Pry0j+n149cXgJiE1JTtcyhtgWEYhmGYjzty8F/ewesL
ABERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERH97ne/+93/D1/ZuZ90zyBfAAAAAElFTkSuQmCC</Preview>
  <Form>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
fOt9/H9bp+rlx4MBAA==</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	<#
	$regkeyRootCSN = "HKLM:\Software\CSN_Package"
	try
	{
		[string]$klnm = $klantnaam_textbox1.text
		[string]$ldir = $logfoldertarget_textbox2.text
		[string]$sdir = $packacgedir_textbox3.text
		
		$vvcld = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigLogDir -ErrorAction Stop
		$vvck = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigKlant -ErrorAction Stop
		$vvcsd = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigSourceDir -ErrorAction Stop
		$klantnaam_textbox1.text = $vvck.ConfigKlant
		$logfoldertarget_textbox2.text = $vvcld.ConfigLogDir
		$packacgedir_textbox3.text = $vvcsd.ConfigSourceDir
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Je hebt nog geen Klantnaam, Log en/of Source Dir opgegeven.. Ga naar Config', 'Configureren') # Casting the method to [void] suppresses the output. 
	}
	#>
	Set-Location $PSScriptRoot
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername  -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
		
	}
	
	
}


$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }

	
	$WinGetID = $wid
			$regApp1 = $WinGetID.Split(".")[1]
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
	
		$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	08/03/2023 12:15
	 Created by:   	Rink Turksma
	 Organization: 	CSN Groep B.V.
	 Filename:     	Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
$WinGetID = "!!WinGetID!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"

#Dyn vars
$regApp1 = $WinGetID.Split(".")[1]
$logfile = $(Join-Path $logdir  "$WinGetID$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget Is niet geinstalleerd" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
		$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
		$installfile = $installfile.Replace('!!logdir!!', $logdir)
		$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
		$installfile = $installfile.Replace('!!versie!!', $versie)
		if ($wlo -ne $null)
		{
		$installfile = $installfile.Replace('!!locale!!', $wlo)
		$installfile = $installfile.Replace("!!localeSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
		if ($wve -ne $null)
		{
		$installfile = $installfile.Replace('!!versionWinget!!', $wve)
		$installfile = $installfile.Replace("!!versionSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
	
	
	if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
		}
	
		
		$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
		$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
	
	
		Set-Location $PSScriptRoot
		
		
		& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
		
		Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
		$winget_output_textbox3.Text = "`nNew intunewin package created: `r`n"
	
		$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
		$winget_output_textbox3.AppendText("`r`n")
		$winget_output_textbox3.AppendText("Version: $Versie `r`n")
		$winget_output_textbox3.AppendText("Install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
		$winget_output_textbox3.AppendText("un-install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
		$winget_output_textbox3.AppendText("Detection registry is: `r`n")
		$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
		$regkeyApp = "$regkeyRoot$regApp1\"
		$regkeyApp
		$winget_output_textbox3.AppendText("$regkeyApp `r`n")
		$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
		$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
		$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
		
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName = $wingetID
			Publisher = $config_customername_textbox.Text
			AppVersion = $versie;
			reglocation = $regkeyApp
			regValue = 'Versie'
			installCMD = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD = "powershell -executionpolicy bypass -file uninstall.ps1"			
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
	}
	
	

$winget_WingetID_textbox1_TextChanged={
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null) { #Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage2_Click={
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click={
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click={
	#TODO: Place custom script here
	
	#$showurl = winget show $wgid
	
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Expecting Winget in: C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}

		$wgid = $winget_WingetID_textbox1.text
	try
	{
		$showurl = & $winget_exe show $wgid
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
	}
	catch
	{
		
		$showurl = winget show $wgid
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	}
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_save_button_Click={
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text

	
	$config_customerinfo += @([config_customerinfo]@{
			customername =  $c_customername
			logfoldertarget   = $c_logfoldertarget
			packagefolder	  = $c_packagefolder
			tenanturl   = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tabcontrol1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click={
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click={
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder;  $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
	}
	$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
	
	[string]$exe_org_path = $exe_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
		$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
		$exe_panel1.Enabled = $true
		$exe_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
	}
	$exe_open_sourcedir_button1.Enabled = $true
	$exe_open_sourcedir_button1.Visible = $true
}

$exe_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage5_Click={
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click={
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file  "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" 
	}
	

}

$exe_radiobuttonUninstallEXEPath_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click={
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click={
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click={
	#TODO: Place custom script here


	
	$exe_installFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	

	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information';  remove-item $regkeyApp  }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$exe_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click={
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click={
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
	}
	$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
	[string]$msi_org_path = $msi_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nMSI file copy failed `r`n")
		$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
		$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
		$msi_panel1.Enabled = $true
		$msi_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
	}
	$appNaam = $msipnaam
	$versie = $msiversie
	$MSIbestand = $msi_openfiledialog1.SafeFileName
	#klant variabelen
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	#Dyn vars
	$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
	$filenaamMSILog = $appNaam + $versie + "MSI"
	$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
	$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
	$msi_OpenSourceDir_button1.Enabled = $true
	$msi_OpenSourceDir_button1.Visible = $true
}

$labelInstallParametersadj_Click={
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click={
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'

	$msi_installFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
    write-host $startPMSI
	$msilog = get-content $logfileMSI
    if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
    Else {
    foreach ($ml in $msilog) {
    if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*"){ 
    $msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
    }
    }
    write-host "Product installation success" -ForegroundColor yellow -BackgroundColor black
    write-host "Possible uninstall command is:" -ForegroundColor yellow -BackgroundColor black
    write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
    }

	
	$excode = 0
}
catch
{
	Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
    write-host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "See what this meens: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$msi_install_par_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click={
	#TODO: Place custom script here
	$msi_uninstallFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
    write-host $startPMSI
	write-host "Unistall done!" -ForegroundColor yellow -BackgroundColor black
   

	
	$excode = 0
}
catch
{
	Write-Host "Uninstall failed" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
	
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	
}

$msi_button4TestUninstallPowers_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click={
	#TODO: Place custom script here
	Clear-Host
}

$tabpage1_Click={
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click={
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click={
	#TODO: Place custom script here
	$config_csv_openfiledialog1.ShowDialog()
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	#Write-Host $ConfigCSVImport
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$itwnffilepath = $filepath + $itwnf
	$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
	$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
	$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
	$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
	$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
	$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
	$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
	$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD

}

$upload_IntuneWinFile_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click={
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IntuneWin32App -Force }

Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "20H2"
	write-host "We will first check if there are any apps already availeble in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be availeble in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE? ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}

$upload_dep_textbox1_TextChanged={
	#TODO: Place custom script here
	
}





$config_panel_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged={
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged={
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername 
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget ; 
			$config_packagefolder_textbox.text = $cis.packagefolder ; 
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click={
	#TODO: Place custom script here
	$config_customername_textbox.text = "'Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click={
	#TODO: Place custom script here
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_search_string = $tools_search_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe search $tools_winget_search_string
	
	}
	catch
	{
		$tools_winget_id = winget search $tools_winget_search_string
		
		
	}
	#>
	$tools_winget_search_string = $tools_search_winget_textbox.text
	$tools_winget_id = winget search $tools_winget_search_string
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_button_Click={
	#TODO: Place custom script here
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged={
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string --versions
		
	}
	catch
	{
	#>
	$tools_winget_id = winget show $tools_winget_show_string --versions
		
		
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click={
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click={
	#TODO: Place custom script here
	
}

$deP_label3_Click={
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click={
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged={
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged={
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged={
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click={
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkName\$weblinkVersion\Output\$weblinkName.intunewin"
	
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkName.intunewin"
			DisplayName   = $weblinkName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click={
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
	
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click={
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click={
	#TODO: Place custom script here
$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>


$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile ="!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$Name$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$Name"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{

	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun



	
	
'@
$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>


$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile ="!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$Name$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$Name"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{

	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun



	
	
'@

	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1" -force
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged={
	#TODO: Place custom script here
	
}

$weblink_test_uninstall_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkName\$weblinkVersion\source\uninstall.ps1"
	}
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">762</Line>
    <Line Disabled="False">1729</Line>
    <Line Disabled="False">2667</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>