<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAGdYAABnWARjRyu0AAGVESURBVHhe7b1lcxxZg7Y5sb9nv23EflqId+LF
mdmZeZ5+mtnudneb2ZYsZmYGi8FiZmZmZmZmvvecLJVdVpdasi3b5dJ9RVxRVQknT0LluTMrK/Of
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgg5m//tn/7p
l1v3HoZGxqaEBofHUkoppfQTNiouJfQ//vb30ONm/nSu/XYzoW1kEe1jq2gdWaKUUkrpJ2zn5AbK
Gntw3MyfTmxCWmi3HLhlCGWtw5RSSumltbxtBBVvabky/rDWfudRGV+ord95lNNWz0fb8MLZASA0
Ki60a2JNa2GUUkrpZbGyfRQlTYMoqOtFYX3fGynHKWsZRmnz0DuMLw7E32H80uZBZR4qhM39M28b
AMZQ3j6uWPHSsRPDUEoppfqhbDhlA5xe3ILsig5kl7e/sWnFzcfja+//l4px0oteHz/r5DBa1BxG
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
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCHk8vFP//T/A4NHc6hGbxizAAAAAElFTkSuQmCC</Preview>
  <Form>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
p/XX/wfrMeNjtgoCAA==</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {
	#TODO: Place custom script here
	
	#$showurl = winget show $wgid
	
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Expecting Winget in: C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$wgid = $winget_WingetID_textbox1.text
	try
	{
		$showurl = & $winget_exe show $wgid
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
	}
	catch
	{
		
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	}
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
		{
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	
	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	
	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:04
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			$MSIbestand = $msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Product installation success" -ForegroundColor yellow -BackgroundColor black
		write-host "Possible uninstall command is:" -ForegroundColor yellow -BackgroundColor black
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
	}
	
	
	$excode = 0
	
}
catch
{
	Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
	$startPMSI
	write-host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
	write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "See what this meens: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:



<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor yellow -BackgroundColor black
	
	
	
	$excode = 0
}
catch
{
	Write-Host "Uninstall failed" -ForegroundColor Red -BackgroundColor Blue
	$startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}



'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already availeble in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be availeble in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkName\$weblinkVersion\Output\$weblinkName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkName.intunewin"
			DisplayName   = $weblinkName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>


$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$Name$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$Name"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>


$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$Name$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$Name"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget Is niet geinstalleerd" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_basic_template_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$global_selected_customer_textbox1.Text = "Selected customer: " + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">560</Line>
    <Line Disabled="False">1894</Line>
    <Line Disabled="False">3209</Line>
    <Line Disabled="False">4724</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>