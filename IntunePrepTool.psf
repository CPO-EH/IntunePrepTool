<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGsSSURBVHhe7b1Vdx1Zuqbbv+WM/hXn5ozR56LP
XY/evHvvXbChqrKyqpzsrExTmllmWczMzMzMvMTMzJLf831zKaQlecmWDLKl9T4ej1fADA7F/CLm
jBn/jRBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghZ5C//M//+f+Fe3gHhrt7+oW/8PChlFJK6SlU8/LHz9zD
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
a2tmWlXnY6n9K7vD9pajy7CWpfN3nMZS0+oJPL+4JNuj6VYcplkx061oty7D9Mv4nV9rHtqv6ff6
99JubG1hfV3GyfRmPXeG25dh/zUuLWJubs4sa1XGW/Par+wj2a9T09NYlX1hzcc+T/s6Wuum81lb
W5WTYM4ch9XVNbySf0sy/aLMZ21neutXx1vzc1SHzclJNDklf+izc06m0+Vo9/5pLHU9rTSWq7Je
+ru+bh+396vnlLXf96vbMiN/7MuynjrtxuamDJdjumxflzWZhzX/9Y0NbMi8rHlay5+VP5hl6dZx
Zlma1ureHbYu5/yGGafTnTatffAptPblp1KPm6u6KX8Pn9Ituc59Kre3t13WV6/kqv4mt7cwNbeI
jtHV4wcAqWlp8oe9ajImVS+y5dkp8A6OQkFOPprbe81FVTO3ga4WZGcWYHZ5DRNDXcguLMfi3DgS
IgIRHpeCiZk5c3eoGcT45BRGe5vx7PEz1DR3S8YyIxn8hGRuC5ifn9/nxuY6SlJjcefmbSRnl0tG
OY/RsQmZjz1D1IxxRiLgWQkmSjMz0NjWZ+5GNFjRjHJ9cwu2xnKkJOZjRf5QHIOZpaUVzI71wvP+
ffiGxmNsag4LGkBI0DLQ3YKMxGyMzyzIneckliQTnZmSO51pyaRl2bOSGWpwohn8nAwfGpkwf4gr
S1PIS8nF8IREp/MzqCstRnPngGTqGuAsYVruVCZnZiWjW5bAQ/edBiGrWJydQntbJ6ZlnSdkuAYE
juuqbmyuITcuHNev3kN1az/WJRhbknUwd8ayzTPzEqAtL0rwpcHMDFIjo1Fa0Sz7YVb27RTK8gvR
0NQumfmM3FFLQCUZht416jbP6B2UbJPuT8fgSzOVga5a3L5yDakFVbJ+M7Kda7IfZtDdXIu8nApZ
npwfsmxdFxOw7QQsW9sbckwy0dDQjJyUbEzN67xnkJuUhv5RiUzlPNDjOCvHefvVNmqLslFQWI/N
7c3deahrG1sYbK/Dw2s3EZmUj/XtV5gd7cHL5x7oHtF9tST7R4JQ2Y6JYRuSo5IxPr9iMoWFqWEU
lNVgcrgHz2/dRlB0OpY3tjE/3o9MOU6zMt2MRMgaZC4ur2J7S/ZxYiKa2oblwrYXcJ4WnQVPJ+XB
YOSkdRaUuIoHg6GT9mBAcpI6C0hcRWcB0T7lpvyDBQD6R95SU4K4xBjc/OkiIuIy8OT+DXh6BsDt
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
2bB3SWP1n2Qaq/8k0jgbdlg/07w5jdX/pjTOhp2FNFb/+6ZxNuxd0hzsf1MaZ8PeJY3VfxJpnA07
rP8k0jgbdu7cOfk9h47uvuM/Aai3jeHSpUuIiIhAcnIyEhMTKaWUUnoKTE1NhbeXJxpbOtA7vX28
AKCuaxRXr15DQkKCmVFKSgqllFJKT4Hp6ekICQ5CU2vnuwUAv/xyFXFxcWZm+hSAUkoppZ+/aWlp
CAoMeP8AQGeWlJREKaWU0lOgPrl/9wCgcxQXLlxAVFQkUlIkokhKpJRSSukpME0CAF9vTzS1tB8v
ABhfAVr6ZtAgE/b0D2FgeAz9Q6OUUkopPQVqvt1p68XQ+Cw6x1aPFgB4+wWZJwA6Qd/MNronN2Gb
3KCUUkrpaXFiw7z+1zW+ZrptIwtvDwAeP3NPnljaNNECpZRSSk+3mvl3Dky+PQAghBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCyOfNf/tv/z/8S/fngR9IuQAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolderImport
	[string]$tenanturl
	[string]$downloadpath
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		else
		{
			if (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
			{
				[void][System.Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
			}
		
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	$config_tabcontrol2.Dock = 'Fill'
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Enabled = $true
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_intunewin_tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {

	$wgid = $winget_WingetID_textbox1.text

	
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	[string]$c_downloadfolder = $config_download_folder_textbox3.Text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
			downloadpath    = $c_downloadfolder;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
			{
				Unblock-File -Path $exe_org_path -Confirm:$false 
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_intunewin_tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$argList2 = $exe_parsUnInstall_textbox1.text
		if ($exe_openfiledialog1.SafeFileName -like "*.exe")
		{
			
			$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
		}
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	
	$exe_parsUnInstall_textbox1.Enabled = $true
	$exe_parsUnInstall_textbox1.Visible = $true
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true


	
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $true
		$exe_parsUnInstall_textbox1.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $true
		$exe_parsUnInstall_textbox1.Visible = $true
		$argList2 = $exe_parsUnInstall_textbox1.text
		if ($exe_openfiledialog1.SafeFileName -like "*.exe")
		{
			
			$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
		}
		
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	

}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		
	}
	$exe_labelVoorbeeldUninstall.Visible = $true
	$exe_labelVoorbeeldUninstall.Enabled = $true
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	$exe_UnlInstallParameters.Visible = $true
	$exe_UnlInstallParameters.Enabled = $true
	$exe_radiobuttonUninstallEXEPath.Visible = $true
	$exe_radiobuttonUninstallEXEPath.Enabled = $true
	$exe_install_test_button1.Enabled = $true
	$exe_install_test_button1.Visible = $true
	$exe_radiobuttonGebruikZelfdeEXEAlsB.Enabled = $true
	$exe_radiobuttonGebruikZelfdeEXEAlsB.Visible = $true
	$exe_radiobutton3.Enabled = $true
	$exe_radiobutton3.Visible = $true

	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$exeFile = "!!ExeFile!!"
$exeParameters = "!!ExeParams!!" ## Check EXE Params.. 
# Customer variables
$logDir = "!!LogDir!!"
$registerDetectionRoot = "!!RegisterDetectionRoot!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
try
{
	Start-Process -FilePath $exeFile -ArgumentList $exeParameters -ErrorAction Stop -wait
	write-host "Installation completed of $exeFile" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
	write-host "Error executing $exeFile" -ForegroundColor Yellow
	Write-Host "installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:









Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	$exe_installFile = $exe_installFile.Replace('"!!AppName!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!LogDir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionRoot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!Version!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!ExeFile!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!ExeParams!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Unblock-File -Path $msi_org_path -Confirm:$false
				$MSINewname = $msi_openfiledialog1.FileName
				
				$MSINewname = $MSINewname.Split("\")[$MSINewname.Split("\").Count - 1]
				$MSINewname = $MSINewname.Replace(" ", "")
				$MSIbestand = "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname"
				#Write-Host $MSIbestand
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			 #$msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v $logfileMSI /i $MSINewname"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### This function handles the detection method in the registry.
	### It will create a key in the registry with the name of the application. 
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
#Start; Write Log file
Start-Transcript -Path $logfile
Set-Location $PSScriptRoot
try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Can't read MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Script started i.cmd" -ForegroundColor Green
		write-host "Possible uninstall command is:" -ForegroundColor Green
		write-host ""
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
		write-host ""
		Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
		write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green

	}
	
	if ($msiuninstallcode -eq $null) { $excode = 1 ; write-error "Can't find uninstall code in MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
    Else
    {
        write-host "Script started i.cmd" -ForegroundColor Green
        write-host "Possible uninstall command is:" -ForegroundColor Green
        write-host ""
        write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
        write-host ""
        Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
        write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
        $excode = 0
    }
   
	
	
}
catch
{
    Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "MSIEXEC Log start:.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
    $MSILOGS = get-content $logfileMSI 
    $MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue


    $excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}

write-host "Possible uninstall command is:" -ForegroundColor Green
write-host ""
write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
write-host ""

### Place extra actions here:







<#----Enf of extra actions--#>
#Stop; Write Log file
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { fDetectionInRegistry -succes $true 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1.Text + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$config_tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already available in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be available in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
<#
	.SYNOPSIS
		Sets the emulation of the WebBrowser control for the application.
	
	.DESCRIPTION
		Sets the emulation of the WebBrowser control for the application using the installed version of IE.
		This improves the WebBrowser control compatibility with newer html features.
	
	.PARAMETER ExecutableName
		The name of the executable E.g. PowerShellStudio.exe.
		Default Value: The running executable name.
	
	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation

	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation PowerShell.exe
#>
function Set-WebBrowserEmulation
{
	param
	(
		[ValidateNotNullOrEmpty()]
		[string]
		$ExecutableName = [System.IO.Path]::GetFileName([System.Diagnostics.Process]::GetCurrentProcess().MainModule.FileName)
	)
	
	#region Get IE Version
	$valueNames = 'svcVersion', 'svcUpdateVersion', 'Version', 'W2kVersion'
	
	$version = 0;
	for ($i = 0; $i -lt $valueNames.Length; $i++)
	{
		$objVal = [Microsoft.Win32.Registry]::GetValue('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer', $valueNames[$i], '0')
		$strVal = [System.Convert]::ToString($objVal)
		if ($strVal)
		{
			$iPos = $strVal.IndexOf('.')
			if ($iPos -gt 0)
			{
				$strVal = $strVal.Substring(0, $iPos)
			}
			
			$res = 0;
			if ([int]::TryParse($strVal, [ref]$res))
			{
				$version = [Math]::Max($version, $res)
			}
		}
	}
	
	if ($version -lt 7)
	{
		$version = 7000
	}
	else
	{
		$version = $version * 1000
	}
	#endregion
	
	[Microsoft.Win32.Registry]::SetValue('HKEY_CURRENT_USER\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION', $ExecutableName, $version)
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	}
	catch
	{
		#Error handling here
	}
	
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			$config_download_folder_textbox3.Text = $cis.downloadpath
			
			if ($cis.downloadpath -like 'Enter UNC or local path for the download Package folder. (Evergreen / Winget)')
			{
				#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
				[void][System.Windows.Forms.MessageBox]::Show('Download folder was added to config. Please use this tool or edit "C:\Program Files\IntunePrepTool\config_customerinfo.csv" ', 'Please add Download folder') # Casting the method to [void] suppresses the output. 
			}
			
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
			try
			{
				New-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
	$config_download_folder_textbox3.Text = "Enter UNC or local path for the download Package folder. (Evergreen / Winget)"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkPackageName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkPackageName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkPackageName.intunewin"
			DisplayName   = $weblinkPackageName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create extra folder in startmenu (when needed)"
  if (!(Test-Path -Path $location))
{
	
	New-Item -ItemType Directory -Path $location
}

	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!packagename!!", $weblinkPackageName)
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!packagename", $weblinkPackageName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_packagename.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force }

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget not installed" $excode = 1 }
else { $excode = 0 }

try
{
	
	$install = "!!WingetCommand!!"
if ($install -like "!!doe*")
{
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		<#
		try
		{
			#install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
			
		}
		catch
		{
			
		}
		#>
	}
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale

		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
		}
		catch
		{
			
			
		}
		#>
	}
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
	{

		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
			
		}
		catch
		{
			
		}
		#>
	}
	
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
		}
		catch
		{
			
		}
		#>
	}
}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	#$excode = 0;
	
}
catch
{
	#$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error';  }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_Empty_Scheduled_Task_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}

$winget_remediations_createscripts_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile| Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Upload not yet available for Remediations.. For now use the Intune Admin Portal")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Please reopen IntunePrepTool to create more Remediations scripts")
				
				
			}
		}
		
		
	}
	
	
	
	
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
	
	
	
}

$configToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $true
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_winget_tabcontrol2.Enabled = $true
	$package_winget_tabcontrol2.Visible = $true
	$package_winget_tabcontrol2.Dock = 'Fill'
}
$scheduledTaskToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	$package_ScheduledTask_tabcontrol2.Dock = 'Fill'
	$package_ScheduledTask_tabcontrol2.Enabled = $true
	$package_ScheduledTask_tabcontrol2.Visible = $true
}


$mSIToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $true
	$package_msi_tabcontrol2.Visible = $true
	$package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $true
	$package_exe_tabcontrol2.Visible = $true
	$package_exe_tabcontrol2.Dock = 'Fill'
}

$main_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$wingetUpdateToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false

	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Dock = 'Fill'
	$Remediations_winget_tabcontrol2.Enabled = $true
	$Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Dock = 'Fill'
	$package_weblink_tabcontrol2.Visible = $true
	$package_weblink_tabcontrol2.Enabled = $true
}



$intunewinToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	
	
	$upload_intunewin_tabcontrol2.Dock = 'Fill'
	$upload_intunewin_tabcontrol2.Enabled = $true
	$upload_intunewin_tabcontrol2.Visible = $true
	
}

$wingetSearchShowVersionToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Enabled = $true
	$tools_winget_searchtabcontrol1.Visible = $true
	
}

$findUninstallStringsToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'Fill'
	$tools_uninstallstring_tabcontrol1.Enabled = $true
	$tools_uninstallstring_tabcontrol1.Visible = $true
	
}

$sourceFromWingetToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $true
	$download_tabcontrol1.Visible = $true
	$download_tabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	
}


$Weblink_intunewin_tabpage6_Click={
	#TODO: Place custom script here
	
}

$weblink_packagename_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	
}

$remediations_winget_maxversion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_remediations_maxversion_checkbox_CheckedChanged={
	#TODO: Place custom script here
	
}

$remediate_winget_version_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_wingetid_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$remadiations_winget_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$remediations_winget_upload_button1_Click={
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				
				
			
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				
			
				
				$encoding = [System.Text.Encoding]::UTF8
				$bytes = $encoding.GetBytes($remediate_detectFile)
				$Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
				$Bytes2 = $encoding.GetBytes($remediate_remediateFile)
				$Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
				$UploadRemediationsFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/5/2023 3:38 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	upload.ps1
	===========================================================================
	.DESCRIPTION
		Part of IntunePrepTool
		https://github.com/rink-turksma/IntunePrepTool
		Upload Remediations to Intune
#>
	Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
	if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
	else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
	$displayName = "!!displayName!!"
	$publisher = "!!publisher!!"
	$detectionScriptContent = '!!detectionScriptContent!!'
	$remediationScriptContent = '!!remediationScriptContent!!'
	$tenantID = "!!tenantid!!"
	$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"; $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	$MsalToken = Get-MsalToken -TenantId $tenantID -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
	$uri = "https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts"
	$createdPolicy = Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{ Authorization = $MsalToken.CreateAuthorizationHeader() } -ContentType 'application/json'
	Write-Host "Remediationa policy created successfully with ID: $($createdPolicy.id)" -ForegroundColor Green
	Write-Host "Please assign and schedule with MS Intune Admin console" -ForegroundColor Green
	
'@
				$displayName = $winget_remediations_name_textbox1.Text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!publisher!!", $config_customername)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!displayName!!", $displayName)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!detectionScriptContent!!", $Encoded_remediate_detectFile)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!remediationScriptContent!!", $Encoded_remediate_remediateFile )
				$tenatURL = $upload_tenantURL_textbox.text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!tenantid!!", $tenatURL)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"
				}
				$UploadRemediationsFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1" -Force
				$remadiations_winget_textbox2.AppendText("Created Upload.ps1")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule")
				
				if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					
					
					
					powershell_ise -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
				}
			}
		}
	}
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
}

$remediations_winget_open_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
	$remediate_winget_version = $remediate_winget_version_textbox1.Text
	Invoke-Item "$config_packagefolder\$winget_remediations_name\$remediate_winget_version"
}

$powershell_scheduledtask_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	if ($powershell_scheduledtask_radiobutton.Checked -eq $true)
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $true
		$package_scheduled_task_WingetID_textbox.Visible = $true
		$package_scheduled_task_WingetID_label3.Enabled = $true
		$package_scheduled_task_WingetID_label3.Visible = $true
		$package_ScheduledTask_create_scripts_button1.Enabled = $true
		$package_ScheduledTask_create_scripts_button1.Visible = $true
		
		
	}
	else
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $false
		$package_scheduled_task_WingetID_textbox.Visible = $false
		$package_scheduled_task_WingetID_label3.Enabled = $false
		$package_scheduled_task_WingetID_label3.Visible = $false
	
	}
}

$powershell_Empty_Scheduled_Task_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	$package_ScheduledTask_create_scripts_button1.Enabled = $true
	$package_ScheduledTask_create_scripts_button1.Visible = $true
}



$package_scheduledtasK_option_weekly_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
	{
		$package_scheduledtask_combobox1.Enabled = $true
		$package_scheduledtask_combobox1.Visible = $true
		$package_scheduledtask_time_combobox1.Enabled = $true
		$package_scheduledtask_time_combobox1.Visible = $true
		$package_scheduledtask_am_radiobutton1.Enabled = $true
		$package_scheduledtask_am_radiobutton1.Visible = $true
		$package_scheduledtask_pm_radiobutton.Enabled = $true
		$package_scheduledtask_pm_radiobutton.Visible = $true
		
	}
	else
	{
		$package_scheduledtask_combobox1.Enabled = $false
		$package_scheduledtask_combobox1.Visible = $false
		$package_scheduledtask_time_combobox1.Enabled = $false
		$package_scheduledtask_time_combobox1.Visible = $false
		$package_scheduledtask_am_radiobutton1.Enabled = $false
		$package_scheduledtask_am_radiobutton1.Visible = $false
		$package_scheduledtask_pm_radiobutton.Enabled = $false
		$package_scheduledtask_pm_radiobutton.Visible = $false
	
	}
}

$package_scheduledtask_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$datetimepicker1_ValueChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_time_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_am_radiobutton1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_pm_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_winget_max_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_label3_Click={
	#TODO: Place custom script here
	
}

$package_scheduled_Task_maxVersion_label4_Click={
	#TODO: Place custom script here
	
}

$powershell_create_package_dir_button1_Click={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	else
	{
		if ($powershell_package_name_textbox1.Text -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package name textbox', 'Select Package Name')
		}
		else
		{
			if ($powershell_package_version_textbox1.Text -like $null)
			{
				[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package version textbox', 'Select Package Version')
			}
			else
			{
				$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
				$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
				$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
				$package_scheduledTask_name = $powershell_package_name_textbox1.Text
				$package_scheduledTask_version = $powershell_package_version_textbox1.text
			
			
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"
				}
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"
				}
				$package_ScheduledTask_output_textbox1.Text = "`nNew package direcotory created: `r`n"
				$package_ScheduledTask_output_textbox1.AppendText("$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$powershell_open_package_directory_button1.Enabled = $true
				$powershell_open_package_directory_button1.Visible = $true
				$package_ScheduledTask_create_scripts_button1.Enabled = $true
				$package_ScheduledTask_create_scripts_button1.Visible = $true
				
				
				
			}
		}
	}
}

$powershell_package_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_open_package_directory_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	
	Invoke-Item "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\"
}

$package_ScheduledTask_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_ScheduledTask_create_scripts_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	$package_scheduledtask_system_panel3.Visible = $true
	$package_scheduledtask_system_panel3.Enabled = $true
	

				
				$ScheduledTaskFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	"!!ps1name!!"
	===========================================================================
	.DESCRIPTION
		Please place your script between:
        "Place your Powershell code here" and "End of your Powershell script"
        When done. Save script and close Powershell_ISE
#>
#App Params
$package_scheduledTask_name  = "!!package_scheduledTask_name!!"
$package_scheduledTask_version = "!!package_scheduledTask_version!!"
#Customer vars
$logdir = "!!logdir!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$package_scheduledTask_name $package_scheduledTask_version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$package_scheduledTask_name"
$excode = $null;
#create log directory in programdata when needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates dll directory in logdir when needed.
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates scheduledTasks directory in logdir when needed.
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
#Create registry key when needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application key in registry when needed
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  This is saved in $logdir. Also used in EventViewer
Start-Transcript -Path $logfile
<# Place your Powershell code here#>






















<# End of your Powershell script#>
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
if ($excode -eq 1) { $warning = 'Error'; }
else { $warning = 'Information'; }

if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs")
{
	if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) { remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false }
	copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
			$logdir = "$config_logfoldertarget\scheduledTasks"
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!ps1name!!", "scheduledTask_$package_scheduledTask_name.ps1")
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_name!!", $package_scheduledTask_name)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_version!!", $package_scheduledTask_version)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!logdir!!", $logdir)
				$ScheduledTaskFile | Out-File  "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\scheduledTask_$package_scheduledTask_name.ps1" -Force -Confirm:$false -ErrorAction SilentlyContinue
				copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\IntunePrepTool_msgfile.dll" -Confirm:$false
				$package_ScheduledTask_output_textbox1.AppendText("Template script to be scheduled created")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Please add your Powershell code between 'Place your Powershell code here' and 'End of your Powershell script'")
			$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
			$package_ScheduledTask_output_textbox1.AppendText("Save when done")
				
				
	
		$package_scheduledTask_Edit_script_button1.Enabled = $true
		$package_scheduledTask_Edit_script_button1.Visible = $true
		$package_scheduledtasK_option_startup_checkbox1.Enabled = $true
		$package_scheduledtasK_option_startup_checkbox1.Visible = $true
		$package_scheduledtasK_option_weekly_checkbox1.Enabled = $true
		$package_scheduledtasK_option_weekly_checkbox1.Visible = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Enabled = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Visible = $true
	}
	


$package_scheduledTask_Edit_script_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('Powershell_ISE will open now. Please place powershell code between "Place your Powershell code here" and "End of your Powershell script"; Save when done', 'Powershell_ISE') # Casting the method to [void] suppresses the output. 
	
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\scheduledTask_$package_scheduledTask_name.ps1"
	
	
	
}

$package_scheduledtasK_option_startup_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_createIntunewin_scripts_button1_Click={
	#TODO: Place custom script here

	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	
	if (($package_scheduledtasK_option_startup_checkbox1.Checked -eq $false) -and ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $false))
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Weekly or at startup', 'Please select at least one option when to run') # Casting the method to [void] suppresses the output. 
	}
	else
	{
		$package_scheduledTask_Edit_script_test_install_button1.Enabled = $true
		$package_scheduledTask_Edit_script_test_install_button1.Visible = $true
		$package_scheduledTask_Edit_script_test_uninstall_button1.Enabled = $true
		$package_scheduledTask_Edit_script_test_uninstall_button1.Visible = $true
		$package_scheduledTask_Edit_script_createIntuneWin_button1.Visible = $true
		$package_scheduledTask_Edit_script_createIntuneWin_button1.Enabled = $true
		
		
		$ScheduledTaskInstall = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.232
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
		When needed you can edit the creation of the scheduled task below
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$psFile = "!!psFile!!"
$StartupTask = "!!StartupTask!!"
$WeeklyTask = "!!WeeklyTask!!"
$WeeklyTaskDay = "!!WeeklyTaskDay!!" 
$WeeklyTaskHour = "!!WeeklyTaskHour!!"
$WeeklyTaskAMPM = "!!WeeklyTaskAMPM!!"
$registerDetectionRoot = "!!registerDetectionRoot!!"

# Customer variables
$logDir = "!!LogDir!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $version) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $version }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
write-host "Script will copy the powershell script to be scheduled now" -ForegroundColor Green
if ( test-path "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -PathType Leaf ) { remove-item "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force  } 
write-host "Script will copy the powershell script to be scheduled now" -ForegroundColor Green
copy-item $psFile -Destination "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force

#Below the code to set the permissions on the scripts folder
write-host "Script will setup NTFS filepermissions for the directory $logdir\scheduledTasks" -ForegroundColor Green
# BEGIN: 3d5f4a6gch7
#Below the code to set the permissions on the scripts folder
write-host "Script will setup NTFS filepermissions for the directory $logdir\scheduledTasks" -ForegroundColor Green
$Acl = Get-Acl "$logdir\scheduledTasks"
$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrators","Modify","Allow")
$System = New-Object System.Security.Principal.NTAccount("SYSTEM")
$Ar2 = New-Object System.Security.AccessControl.FileSystemAccessRule($System,"Modify","Allow")
$Acl.SetAccessRule($Ar)
$Acl.SetAccessRule($Ar2)
Set-Acl "$logdir\scheduledTasks" $Acl
# END: 3d5f4a6gch7

try
{
	
	write-host "Scheduled Task created for $psFile" -ForegroundColor Green
	# Creates the scheduled task
	

$action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-NoProfile -WindowStyle Hidden -Command `"& '$logdir\scheduledTasks\scheduledTask_$appName.ps1'`""
if ($StartupTask -eq $true) {
	$trigger1 = New-ScheduledTaskTrigger -AtStartup -RandomDelay 00:00:30
}
else {
	$trigger1 = $null
}
if ($WeeklyTask -eq $true) {
	$trigger2 = New-ScheduledTaskTrigger -Weekly -DaysOfWeek $WeeklyTaskDay -At $WeeklyTaskHour$WeeklyTaskAMPM
}
else {
	$trigger2 = $null
}
if (($trigger1 -eq $null) -and ($trigger2 -ne $null)) {
    $triggers = @($trigger2)
}
if (($trigger1 -ne $null) -and ($trigger2 -eq $null)) {
    $triggers = @($trigger1)
}
if (($trigger1 -ne $null) -and ($trigger2 -ne $null)) {
    $triggers = @($trigger1, $trigger2)
}
$principal = New-ScheduledTaskPrincipal -UserID "SYSTEM" -LogonType ServiceAccount -RunLevel Highest
Register-ScheduledTask -Action $action -Trigger $triggers -Principal $principal -TaskName $appName -Description "Scheduled Task for $appName" -Force -ErrorAction Stop
write-host "Scheduled Task created for $psFile" -ForegroundColor Green

	$excode = 0;
	
}
catch
{
	write-host "Error creating scheduled task" -ForegroundColor Yellow
	Write-Host "installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}



Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
		
		$ScheduledTaskUnInstall = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.232
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
		When needed you can edit the deletion of the scheduled task below
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$psFile = "!!psFile!!"
$StartupTask = "!!StartupTask!!"
$WeeklyTask = "!!WeeklyTask!!"
$WeeklyTaskDay = "!!WeeklyTaskDay!!" 
$WeeklyTaskHour = "!!WeeklyTaskHour!!"
$WeeklyTaskAMPM = "!!WeeklyTaskAMPM!!"
$registerDetectionRoot = "!!registerDetectionRoot!!"

# Customer variables
$logDir = "!!LogDir!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
write-host "Script will delete the powershell script used by the task" -ForegroundColor Green
if ( test-path "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -PathType Leaf ) { remove-item "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force  } 


try
{
	# Script deletes the scheduled task here
	write-host "Script will delete the scheduled task" -ForegroundColor Green
	Unregister-ScheduledTask -TaskName $appName -Confirm:$false -ErrorAction Stop
	write-host "Scheduled Task deleted" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
	write-host "Error with deleting scheduled task" -ForegroundColor Yellow
	Write-Host "Uninstallation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}



Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { [System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)  }
else {
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
remove-item $regKeyApp -Confirm:$false -force }
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
		
		$RegisterDetectionroot = "Intune_" + $config_customername
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!registerDetectionRoot!!", $RegisterDetectionroot )
		
		$psfile = "scheduledTask_$package_scheduledTask_name.ps1"
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!AppName!!", $package_scheduledTask_name)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!Version!!", $package_scheduledTask_version)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!psFile!!", $psfile)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!LogDir!!", $config_logfoldertarget)
		

		if ($package_scheduledtasK_option_startup_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $true)
		}
		else
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $false)
		}
		if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTask!!", $true)
			$WeeklyTaskDay = $package_scheduledtask_combobox1.Text
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskDay!!", $WeeklyTaskDay)
			$weeklyTaskHour = $package_scheduledtask_time_combobox1.Text
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskHour!!", $weeklyTaskHour)
			if ($package_scheduledtask_am_radiobutton1.Checked -eq $true)
			{
				$WeeklyTaskAMPM = "AM"
			}
			else
			{
				$WeeklyTaskAMPM = "PM"
			}
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskAMPM!!", $WeeklyTaskAMPM )
			
		}
		else
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTask!!", $false)
		}
		$ScheduledTaskInstall | Out-File "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\install.ps1" -force
	
		$psfile = "scheduledTask_$package_scheduledTask_name.ps1"
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!AppName!!", $package_scheduledTask_name)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!Version!!", $package_scheduledTask_version)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!psFile!!", $psfile)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!LogDir!!", $config_logfoldertarget)
		$RegisterDetectionroot = "Intune_" + $config_customername
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!registerDetectionRoot!!", $RegisterDetectionroot)
		
		if ($package_scheduledtasK_option_startup_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $true)
		}
		else
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!StartupTask!!", $false)
		}
		if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTask!!", $true)
			$WeeklyTaskDay = $package_scheduledtask_combobox1.Text
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTaskDay!!", $WeeklyTaskDay)
			$weeklyTaskHour = $package_scheduledtask_time_combobox1.Text
			$ScheduledTaskUnInstall= $ScheduledTaskUnInstall.Replace("!!WeeklyTaskHour!!", $weeklyTaskHour)
			if ($package_scheduledtask_am_radiobutton1.Checked -eq $true)
			{
				$WeeklyTaskAMPM = "AM"
			}
			else
			{
				$WeeklyTaskAMPM = "PM"
			}
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTaskAMPM!!", $WeeklyTaskAMPM)
			
		}
		else
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTask!!", $false)
		}
		$ScheduledTaskUnInstall | Out-File "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\uninstall.ps1" -force
		
		$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
		$package_ScheduledTask_output_textbox1.AppendText("Install and uninstall.ps1 created'")
		$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
		$package_ScheduledTask_output_textbox1.AppendText("Please test. When ready click on create Intunewin file")
		
		

		
	}
	
	
	
	
}

$windowsFirewallToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$config_InstallRequriedPSmodules_Click={
	#TODO: Place custom script here
	$config_install_required_ps_modules = @'
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

Write-Host "Script will install Evergreen powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Evergreen) { Import-Module -Name Evergreen -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Evergreen -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Evergreen -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

'@
	if (!(Test-Path "C:\Program Files\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1" -PathType Leaf))
		{
			$config_install_required_ps_modules | Out-File "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		else
		{
			Remove-Item -Path "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1" -Confirm:$false -Force
			$config_install_required_ps_modules | Out-File "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		
		powershell_ise -file "C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1"
	}
}

$downloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$wingetToolStripMenuItem1_Click={
	#TODO: Place custom script here
	
}

$config_download_folder_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$config_downloadFolderBrowse_Click={
	#TODO: Place custom script here
	if ($config_download_folderbrowsermoderndialog2.ShowDialog() -eq 'OK')
	{
		$config_download_folder_textbox3.Text = $config_download_folderbrowsermoderndialog2.SelectedPath
	}
}

$download_winget_tab_Click={
	#TODO: Place custom script here
	
}

$download_winget_search_button1_Click={
	
	$downloadWingetSearchText = $download_winget_search_textbox5.Text
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$download_winget_output_textbox3.Text = $null
	
	$download_winget_listbox1.Items.Clear()
	$download_winget_version_listbox1.Items.Clear()
	
	
	$table_download_winget = New-Object System.Data.DataTable;
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "ID";
	$table_download_winget.Columns.Add($column_download_winget);
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "Name";
	$table_download_winget.Columns.Add($column_download_winget);
	
	

	foreach ($wsearch_l in $downloadwingetsearch)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row_download_winget = $table_download_winget.NewRow();
			$download_winget_extraStrip = $wsearch_l.substring(0, $wsearch_IdStart)
			$download_winget_extraStrip = $download_winget_extraStrip.TrimEnd()
			$row_download_winget["Name"] = $download_winget_extraStrip
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row_download_winget["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			if ($row_download_winget["ID"] -notlike $null)
			{
				$table_download_winget.Rows.Add($row_download_winget);
				$download_winget_listboxInput = $row_download_winget| Select Name,ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
				$download_winget_listbox1.Items.Add($download_winget_listboxInput)
			}
			## - Save changes to the table:
			$table_download_winget.AcceptChanges();
			
			#$download_datagridview1.DataSource = $table_download_winget
			
			#$download_winget_listboxInput = $table_download_winget | Select Name, ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
			#$download_winget_listbox1.DataSource = $download_winget_listboxInput
			
			
			
		}
		
	}
	
	
	
}

$download_winget_search_textbox5_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 

}

$download_winget_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_version_listbox1.Items.Clear()
	
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	
	
	foreach ($wsearch_55 in $downloadwingetsearchversionselected)
	{
		
		
		if (($wsearch_55 -notlike "Found*") -and ($wsearch_55 -notlike "*-*") -and ($wsearch_55 -notlike "*Version*") -and ($wsearch_55 -notlike $null) -and ($wsearch_55 -notlike "* *"))
		{
			
			$download_winget_version_listbox1.Items.Add($wsearch_55)
			
			
		}
		
	}
	
	
	
	
}

$download_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	#Write-Host $download_datagridview1.SelectedRows.Item.ToString()
}

$download_winget_version_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_download_and_add_button1.Visible = $true
	$download_winget_download_and_add_button1.Enabled = $true
}

$download_winget_download_and_add_button1_Click={
	#TODO: Place custom script here
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	$download_winget_explorer_button1.Enabled = $true
	$download_winget_explorer_button1.Visible = $true
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	if (!(Test-Path -Path $download_winget_path))
	{
		
		New-Item -ItemType Directory -Path $download_winget_path
	}
	#$downloadWingetToLib = winget download --download-directory $download_winget_path --id $winget_download_selected_id --accept-package-agreements --accept-source-agreements
	
	#$download_winget_output_textbox3.Text = $downloadWingetToLib
	#$config_downloadpath
	#Write-Host $download_winget_version_listbox1.SelectedItem
	$download_winget_selectedversion = $download_winget_version_listbox1.SelectedItem
	$download_winget_package = @'
winget download --download-directory !!@download_winget_path@!! --id !!@winget_download_selected_id@!! --accept-package-agreements --accept-source-agreements --version !!@download_winget_selectedversion@!!
'@
	
	$download_winget_package = $download_winget_package.Replace("!!@winget_download_selected_id@!!", $winget_download_selected_id)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_selectedversion@!!", $download_winget_selectedversion)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_path@!!", $download_winget_path)
	if (!(Test-Path "C:\Program Files\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -PathType Leaf))
		{
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		else
		{
			Remove-Item -Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -Confirm:$false -Force
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		
		powershell_ise 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1'
	}
	
}


$download_winget_explorer_button1_Click={
	#TODO: Place custom script here
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	explorer $download_winget_path
}

$config_help_button1_Click={
	#TODO: Place custom script here
	
}

$config_exit_help_button1_Click={
	#TODO: Place custom script here
	
}

$exe_maak_uninstall_script_button1_Click={
	#TODO: Place custom script here
	$exe_maak_intuneWIN_button1.Enabled = $true
	$exe_maak_intuneWIN_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	
	$exe_uninstallFile = @'
<#	
    .NOTES
    ===========================================================================
     Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
     Created on:   	21-5-2023 18:04
     Created by:   	Rink Turksma
     Organization: 	
     Filename:     	uninstall.ps1
    ===========================================================================
    .DESCRIPTION
        Parameters will be filled by IntunePrepTool.
#>
#App Parameters
$appName = "!!AppName!!"
$version = "!!version!!"
$exeFile = "!!EXEFile!!"
$exeParameters = "!!EXEPARMS!!" ##Check EXE PARAMETERS.. 
#Customer variables
$logDir = "!!logdir!!"
$registerDetectionRoot = "!!RegisterDetectionroot!!"
#Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
#Create log directory in programdata if it does not exist.
if (!(Test-Path -Path $logDir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
    New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application Key in the Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
    New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Function ensures successful or unsuccessful execution..
	### Eventually you will have, for example:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  
#The code you provided is a comment in PowerShell. It indicates that the following code block is related to a transcript that will be saved in a text file under the $logdir directory and will also be available in the event viewer.
Start-Transcript -Path $logfile
#Start; Write Log file
try
{
	Start-Process -FilePath $EXEFile -ArgumentList $exeParameters -ErrorAction Stop -wait
	write-host "Uninstall completed" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
    write-host "Error executing $EXEbestand" -ForegroundColor Yellow
	Write-Host "Uinstallation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}
### Place extra actions here:





<#----Below is the end of the installation script---#>
#Now the Transcript logging is started
Stop-Transcript
#After this command, the log is automatically saved in the $logdir location
#Here is a way to split the log so that we only have the last run.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
    $lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try / catch block in the execution, we set $excode to 0 or 1
# Based on this, the Log in the Event viewer is set to Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful application message or an unsuccessful one.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		$versie = $exe_versie_textbox1.text
		$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
		$MSIPARSInput = '"' + $exe_msiexecuninstall.Text + '"'
		
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
		
		try
		{
			$exepnaam = $exe_packagenaam_textbox1.text
			$exeversie = $exe_versie_textbox1.text
			$outputDirectory = $config_packagefolder
			$jjmsii = $exe_msiexecuninstall.text
			
			$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
			$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
			$exe_output_textbox1.AppendText("`nu.cmd created `r`n")
			$exe_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
			
			
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
		}
		
		
	}
	else
	{
		
		if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
		{
			$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
			
		}
		else
		{
			$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
		}
	
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	#$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppName!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!version!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEFile!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nUbinstall.ps1 NIET created `r`n")
	}
	}
}

$exe_radiobutton3_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	
	
}

$exe_msiexecuninstall_TextChanged={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_search_button1_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Searching: `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	$wattezoeken = $tools_uninstallstring_search_textbox3.Text
	$InstallsUninstallString = $InstallsUninstallString | where-object { $_.DisplayName -contains $wattezoeken -or $_.DisplayName -match $wattezoeken } 
	
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_uninstallstring_search_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$buttonSearch32Bit_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Searching: `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	$wattezoeken = $tools_uninstallstring_search_textbox3.Text
	$InstallsUninstallString = $InstallsUninstallString | where-object { $_.DisplayName -contains $wattezoeken -or $_.DisplayName -match $wattezoeken }
	
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}




$package_scheduledTask_Edit_script_test_install_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\install.ps1"
}

$package_scheduledTask_Edit_script_test_uninstall_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\uninstall.ps1"
}

$package_scheduledTask_Edit_script_createIntuneWin_button1_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $powershell_package_name_textbox1.Text
	$msiversie = $powershell_package_version_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$package_ScheduledTask_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$package_ScheduledTask_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$package_ScheduledTask_output_textbox1.AppendText("`r`n")
	
	$package_ScheduledTask_output_textbox1.AppendText("Install command is: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("un-install command is: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$package_ScheduledTask_output_textbox1.AppendText("$regkeyApp `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Please reopen tool to make another Intunewin package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$package_ScheduledTask_output_textbox1.AppendText("Config.csv written to: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$package_ScheduledTask_output_textbox1.AppendText("  `r`n")
	$package_scheduledTask_Edit_script_UploadLogo_button1.Enabled = $true
	$package_scheduledTask_Edit_script_UploadLogo_button1.Visible = $true
	$package_ScheduledTask_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$package_scheduledTask_Edit_script_UploadLogo_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $powershell_package_name_textbox1.text
	$exeversie = $powershell_package_version_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	if([System.Windows.Forms.MessageBox]::Show("Click yes to open the upload screen. Then load the $outputDirectory\$exepnaam\$exeversie\output\config.csv file there", 'Upload Now?',[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$package_ScheduledTask_tabcontrol2.Enabled = $false
		$package_ScheduledTask_tabcontrol2.Visible = $false
	
		
		$upload_intunewin_tabcontrol2.Enabled = $true
		$upload_intunewin_tabcontrol2.Visible = $true
		$upload_intunewin_tabcontrol2.Dock = 'Fill'
	}
	
}

$reloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}


$reopenIntunePrepToolToolStripMenuItem_Click={
	#TODO: Place custom script here
$ReloadIntunePrepTool = @'
	Set-Location "C:\Program Files\IntunePrepTool\"
	taskkill.exe /F /IM "IntunePrepTool.exe"
	& "C:\Program Files\IntunePrepTool\IntunePrepTool.exe"
'@
	if (Test-Path "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1")
	{
		powershell.exe -file "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1"
	}
	else
	{
		$ReloadIntunePrepTool | Out-File "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1" -Confirm:$false -Force
		Start-Sleep 1
		powershell -file "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1"
	}
}

$button1_Click={
	#TODO: Place custom script here
	#$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547";
	#$RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	#$MsalToken = Get-MsalToken -TenantId 'CSNTestRink.onmicrosoft.com' -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	#$webbrowser1
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">548</Line>
    <Line Disabled="True">1336</Line>
    <Line Disabled="True">1338</Line>
    <Line Disabled="False">1796</Line>
    <Line Disabled="False">3281</Line>
    <Line Disabled="False">4860</Line>
    <Line Disabled="True">5612</Line>
    <Line Disabled="True">5614</Line>
    <Line Disabled="True">5720</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>Renci.SshNet, Version=2016.0.0.0, Culture=neutral, PublicKeyToken=1cee9f8bde3db106|..\..\..\..\..\Desktop\Renci.SshNet.dll</Assembly>
  </Assemblies>
</File>