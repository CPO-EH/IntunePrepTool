<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAHHXSURBVHhe7b11kxxJmq97Psu18ynuP9fs3DU7
186xszu7OwvDtDPTMD2tbnW3mJlKUjEzMzMzMzNnVWUWM+l3/fWsUGWVUlJBqqRS/R7ZowzwgApw
fz3CI+K/EUIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCHkM+Tv//N//n+RXr7BkR7eAZHuXn6UUkopPYVKWf7S
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
5gm0tXViemZWTTuFSZMJU6rQlXvUJZkxuHjlPoan5rG8uPc2gMxnyjSC+vpGLKysYWywB919I7qB
w5Saj1yet1gs+nfCNInpKRPaWjthmbbodZueNqO9rRXjExZVOLx5WX1+dgYzs/O6PcPIYB+GRk0w
q+W1tnaov3keoyND6u/s1ZfZE4Pdcd/JD1Mz0+js6sHcwiLW1MG/pNZ5dadNhLSBsKi/S/62acsM
TGMjGFbbpKurAwNDo2rYtL6MbpkcR1d3L6bMFn0pXP4GizSmUt1mNe2sWrbcErFd10W1HEk7OyO3
TEzo6+nG4PCY3vYW9ffLfCfHR9DTN4jhoT509Q7o2wwjwwMYHhnH+PgwhtTv3MwUOtq79N8ttxws
al5d6u+RxiJSgO4W/lZlu8l8piZG0dHZp2r6C2qbtmN6dgET6u/r7unXwdD+WwC6bcfSvNqW7Wp/
DyBY1fx7xy3q71qEWc2rq3tQ/S0W9KnjZWZ6Uh0f1nlKQfZ6Hkdwf6F4lrRXMJ+U9grlk9RewXhW
tFcon6T2CuaT0l7BeFa0W+jbetQAoKypD9k5OfryvbGhZUdvbm3rYVvqVxoZCNIYQVZG+mWh0m8c
FNYUKr0aJmxv7zTaUGl1Iwb1b2p8FFPT82r6bWzs+wNlHpJW0MvQXTvLUen1vHaU6be3d9dJMNZR
T6Om37NxtNa/Q+Zt8HqK19MK2xgfGcb80upOv2yD/fOyKtMZ7mf/cN0v//Tv7vhtO/Pd2rSZt3Vy
zethymOhprfdnrbasruc3eXZprVdn9cpZN9ubO30vJs90x9BQgghVqbnlw4fAFS3DyMoOBhlZaUo
KirSFhcXv3b/MHtpDmp5eQUqysvtjjuOJSUle7Q37DBWVlapdS070HwcleY4lpaWavf32xvmyDS2
43ctU9uu3M5wx1tWVvZOD5LmJD2N62xP2b8f04oKlY/suH+YvXTHSWP0n0Qae8Pe1v+xrKysfO3+
flHWUfI7W428Q9w/7Khp3qasQ1VV1RvrddqVv+lt6vGVFRibtKBncv1wAUBz3xQuX7qMX/ziF/j1
r39NKaWU7vFXv/rVG/22w4z+3/72t/jmm28+in/729/08o11MXzbOtsb9qHSGP1HTfMu//M//xN/
+MPv0dU3iIHp7cMFAE29k7h27Rr++Ic/4E9/+hP++Mc/fnRlPY7qf/3Xf+lfe/M9afevmz1lfeWg
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
5ORkSimllJ4C09PT4evjjea2LgxMbx8uAGjoMeH27TtISkrSM0pLS6OUUkrpKTAzMxNhoSFoae8+
WgBw69ZtJCQk6JnJVQBKKaWUfvpmZGQgJDjo+AGAzCwlJYVSSimlp0C5cn/0AKDbhKtXryImJhpp
aSqiSEmmlFJK6SkwQwUA/r7eaGnrPFwAMLkCtA3OoElN2D80iuGxCQyNmiillFJ6CpRyu7t3AKOT
s+ieWD1YAOAbEKKvAMgEgzPb6DNvote8QSmllNLT4tSGfvyvZ3JNd/eOL7w/AHjp6pE6tbSpowVK
KaWUnm6l8O8eNr8/ACCEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEELIp81/+2//P04aRPida7INAAAA
AElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	[string]$downloadpath
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		else
		{
			if (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
			{
				[void][System.Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
			}
		
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	$config_tabcontrol2.Dock = 'Fill'
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Enabled = $true
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_intunewin_tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {

	$wgid = $winget_WingetID_textbox1.text

	
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	[string]$c_downloadfolder = $config_download_folder_textbox3.Text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
			downloadpath    = $c_downloadfolder;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
			{
				Unblock-File -Path $exe_org_path -Confirm:$false 
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_intunewin_tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$argList2 = $exe_parsUnInstall_textbox1.text
		if ($exe_openfiledialog1.SafeFileName -like "*.exe")
		{
			
			$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
		}
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	
	$exe_parsUnInstall_textbox1.Enabled = $true
	$exe_parsUnInstall_textbox1.Visible = $true
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true


	
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $true
		$exe_parsUnInstall_textbox1.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $true
		$exe_parsUnInstall_textbox1.Visible = $true
		$argList2 = $exe_parsUnInstall_textbox1.text
		if ($exe_openfiledialog1.SafeFileName -like "*.exe")
		{
			
			$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
		}
		
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	

}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		
	}
	$exe_labelVoorbeeldUninstall.Visible = $true
	$exe_labelVoorbeeldUninstall.Enabled = $true
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	$exe_UnlInstallParameters.Visible = $true
	$exe_UnlInstallParameters.Enabled = $true
	$exe_radiobuttonUninstallEXEPath.Visible = $true
	$exe_radiobuttonUninstallEXEPath.Enabled = $true
	$exe_install_test_button1.Enabled = $true
	$exe_install_test_button1.Visible = $true
	$exe_radiobuttonGebruikZelfdeEXEAlsB.Enabled = $true
	$exe_radiobuttonGebruikZelfdeEXEAlsB.Visible = $true
	$exe_radiobutton3.Enabled = $true
	$exe_radiobutton3.Visible = $true

	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$exeFile = "!!ExeFile!!"
$exeParameters = "!!ExeParams!!" ## Check EXE Params.. 
# Customer variables
$logDir = "!!LogDir!!"
$registerDetectionRoot = "!!RegisterDetectionRoot!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
try
{
	Start-Process -FilePath $exeFile -ArgumentList $exeParameters -ErrorAction Stop -wait
	write-host "Installation completed of $exeFile" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
	write-host "Error executing $exeFile" -ForegroundColor Yellow
	Write-Host "installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:









Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	$exe_installFile = $exe_installFile.Replace('"!!AppName!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!LogDir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionRoot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!Version!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!ExeFile!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!ExeParams!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Unblock-File -Path $msi_org_path -Confirm:$false
				$MSINewname = $msi_openfiledialog1.FileName
				
				$MSINewname = $MSINewname.Split("\")[$MSINewname.Split("\").Count - 1]
				$MSINewname = $MSINewname.Replace(" ", "")
				$MSIbestand = "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname"
				#Write-Host $MSIbestand
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			 #$msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v $logfileMSI /i $MSIbestand"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### This function handles the detection method in the registry.
	### It will create a key in the registry with the name of the application. 
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
#Start; Write Log file
Start-Transcript -Path $logfile
Set-Location $PSScriptRoot
try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Can't read MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Script started i.cmd" -ForegroundColor Green
		write-host "Possible uninstall command is:" -ForegroundColor Green
		write-host ""
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
		write-host ""
		Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
		write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green

	}
	
	if ($msiuninstallcode -eq $null) { $excode = 1 ; write-error "Can't find uninstall code in MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
    Else
    {
        write-host "Script started i.cmd" -ForegroundColor Green
        write-host "Possible uninstall command is:" -ForegroundColor Green
        write-host ""
        write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
        write-host ""
        Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
        write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
        $excode = 0
    }
   
	
	
}
catch
{
    Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "MSIEXEC Log start:.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
    $MSILOGS = get-content $logfileMSI 
    $MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue


    $excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}

write-host "Possible uninstall command is:" -ForegroundColor Green
write-host ""
write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
write-host ""

### Place extra actions here:







<#----Enf of extra actions--#>
#Stop; Write Log file
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1.Text + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$config_tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already available in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be available in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	}
	catch
	{
		#Error handling here
	}
	
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			$config_download_folder_textbox3.Text = $cis.downloadpath
			
			if ($cis.downloadpath -like 'Enter UNC or local path for the download Package folder. (Evergreen / Winget)')
			{
				#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
				[void][System.Windows.Forms.MessageBox]::Show('Download folder was added to config. Please use this tool or edit "C:\Program Files\IntunePrepTool\config_customerinfo.csv" ', 'Please add Download folder') # Casting the method to [void] suppresses the output. 
			}
			
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
			try
			{
				New-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
	$config_download_folder_textbox3.Text = "Enter UNC or local path for the download Package folder. (Evergreen / Winget)"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkPackageName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkPackageName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkPackageName.intunewin"
			DisplayName   = $weblinkPackageName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create extra folder in startmenu (when needed)"
  if (!(Test-Path -Path $location))
{
	
	New-Item -ItemType Directory -Path $location
}

	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!packagename!!", $weblinkPackageName)
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!packagename", $weblinkPackageName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_packagename.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force }

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget not installed" $excode = 1 }
else { $excode = 0 }

try
{
	
	$install = "!!WingetCommand!!"
if ($install -like "!!doe*")
{
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		<#
		try
		{
			#install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
			
		}
		catch
		{
			
		}
		#>
	}
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale

		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
		}
		catch
		{
			
			
		}
		#>
	}
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
	{

		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
			
		}
		catch
		{
			
		}
		#>
	}
	
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
		}
		catch
		{
			
		}
		#>
	}
}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	#$excode = 0;
	
}
catch
{
	#$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error';  }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_Empty_Scheduled_Task_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}

$winget_remediations_createscripts_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile| Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Upload not yet available for Remediations.. For now use the Intune Admin Portal")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Please reopen IntunePrepTool to create more Remediations scripts")
				
				
			}
		}
		
		
	}
	
	
	
	
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
	
	
	
}

$configToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $true
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_winget_tabcontrol2.Enabled = $true
	$package_winget_tabcontrol2.Visible = $true
	$package_winget_tabcontrol2.Dock = 'Fill'
}
$scheduledTaskToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	$package_ScheduledTask_tabcontrol2.Dock = 'Fill'
	$package_ScheduledTask_tabcontrol2.Enabled = $true
	$package_ScheduledTask_tabcontrol2.Visible = $true
}


$mSIToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $true
	$package_msi_tabcontrol2.Visible = $true
	$package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $true
	$package_exe_tabcontrol2.Visible = $true
	$package_exe_tabcontrol2.Dock = 'Fill'
}

$main_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$wingetUpdateToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false

	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Dock = 'Fill'
	$Remediations_winget_tabcontrol2.Enabled = $true
	$Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Dock = 'Fill'
	$package_weblink_tabcontrol2.Visible = $true
	$package_weblink_tabcontrol2.Enabled = $true
}



$intunewinToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	
	
	$upload_intunewin_tabcontrol2.Dock = 'Fill'
	$upload_intunewin_tabcontrol2.Enabled = $true
	$upload_intunewin_tabcontrol2.Visible = $true
	
}

$wingetSearchShowVersionToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Enabled = $true
	$tools_winget_searchtabcontrol1.Visible = $true
	
}

$findUninstallStringsToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'Fill'
	$tools_uninstallstring_tabcontrol1.Enabled = $true
	$tools_uninstallstring_tabcontrol1.Visible = $true
	
}

$sourceFromWingetToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $true
	$download_tabcontrol1.Visible = $true
	$download_tabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	
}


$Weblink_intunewin_tabpage6_Click={
	#TODO: Place custom script here
	
}

$weblink_packagename_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	
}

$remediations_winget_maxversion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_remediations_maxversion_checkbox_CheckedChanged={
	#TODO: Place custom script here
	
}

$remediate_winget_version_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_wingetid_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$remadiations_winget_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$remediations_winget_upload_button1_Click={
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				
				
			
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				
			
				
				$encoding = [System.Text.Encoding]::UTF8
				$bytes = $encoding.GetBytes($remediate_detectFile)
				$Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
				$Bytes2 = $encoding.GetBytes($remediate_remediateFile)
				$Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
				$UploadRemediationsFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/5/2023 3:38 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	upload.ps1
	===========================================================================
	.DESCRIPTION
		Part of IntunePrepTool
		https://github.com/rink-turksma/IntunePrepTool
		Upload Remediations to Intune
#>
	Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
	if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
	else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
	$displayName = "!!displayName!!"
	$publisher = "!!publisher!!"
	$detectionScriptContent = '!!detectionScriptContent!!'
	$remediationScriptContent = '!!remediationScriptContent!!'
	$tenantID = "!!tenantid!!"
	$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"; $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	$MsalToken = Get-MsalToken -TenantId $tenantID -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
	$uri = "https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts"
	$createdPolicy = Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{ Authorization = $MsalToken.CreateAuthorizationHeader() } -ContentType 'application/json'
	Write-Host "Remediationa policy created successfully with ID: $($createdPolicy.id)" -ForegroundColor Green
	Write-Host "Please assign and schedule with MS Intune Admin console" -ForegroundColor Green
	
'@
				$displayName = $winget_remediations_name_textbox1.Text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!publisher!!", $config_customername)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!displayName!!", $displayName)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!detectionScriptContent!!", $Encoded_remediate_detectFile)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!remediationScriptContent!!", $Encoded_remediate_remediateFile )
				$tenatURL = $upload_tenantURL_textbox.text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!tenantid!!", $tenatURL)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"
				}
				$UploadRemediationsFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1" -Force
				$remadiations_winget_textbox2.AppendText("Created Upload.ps1")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule")
				
				if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					
					
					
					powershell_ise -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
				}
			}
		}
	}
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
}

$remediations_winget_open_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
	$remediate_winget_version = $remediate_winget_version_textbox1.Text
	Invoke-Item "$config_packagefolder\$winget_remediations_name\$remediate_winget_version"
}

$powershell_scheduledtask_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	if ($powershell_scheduledtask_radiobutton.Checked -eq $true)
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $true
		$package_scheduled_task_WingetID_textbox.Visible = $true
		$package_scheduled_task_WingetID_label3.Enabled = $true
		$package_scheduled_task_WingetID_label3.Visible = $true
		$package_ScheduledTask_create_scripts_button1.Enabled = $true
		$package_ScheduledTask_create_scripts_button1.Visible = $true
		
		
	}
	else
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $false
		$package_scheduled_task_WingetID_textbox.Visible = $false
		$package_scheduled_task_WingetID_label3.Enabled = $false
		$package_scheduled_task_WingetID_label3.Visible = $false
	
	}
}

$powershell_Empty_Scheduled_Task_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	$package_ScheduledTask_create_scripts_button1.Enabled = $true
	$package_ScheduledTask_create_scripts_button1.Visible = $true
}



$package_scheduledtasK_option_weekly_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
	{
		$package_scheduledtask_combobox1.Enabled = $true
		$package_scheduledtask_combobox1.Visible = $true
		$package_scheduledtask_time_combobox1.Enabled = $true
		$package_scheduledtask_time_combobox1.Visible = $true
		$package_scheduledtask_am_radiobutton1.Enabled = $true
		$package_scheduledtask_am_radiobutton1.Visible = $true
		$package_scheduledtask_pm_radiobutton.Enabled = $true
		$package_scheduledtask_pm_radiobutton.Visible = $true
		
	}
	else
	{
		$package_scheduledtask_combobox1.Enabled = $false
		$package_scheduledtask_combobox1.Visible = $false
		$package_scheduledtask_time_combobox1.Enabled = $false
		$package_scheduledtask_time_combobox1.Visible = $false
		$package_scheduledtask_am_radiobutton1.Enabled = $false
		$package_scheduledtask_am_radiobutton1.Visible = $false
		$package_scheduledtask_pm_radiobutton.Enabled = $false
		$package_scheduledtask_pm_radiobutton.Visible = $false
	
	}
}

$package_scheduledtask_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$datetimepicker1_ValueChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_time_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_am_radiobutton1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_pm_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_winget_max_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_label3_Click={
	#TODO: Place custom script here
	
}

$package_scheduled_Task_maxVersion_label4_Click={
	#TODO: Place custom script here
	
}

$powershell_create_package_dir_button1_Click={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	else
	{
		if ($powershell_package_name_textbox1.Text -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package name textbox', 'Select Package Name')
		}
		else
		{
			if ($powershell_package_version_textbox1.Text -like $null)
			{
				[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package version textbox', 'Select Package Version')
			}
			else
			{
				$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
				$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
				$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
				$package_scheduledTask_name = $powershell_package_name_textbox1.Text
				$package_scheduledTask_version = $powershell_package_version_textbox1.text
			
			
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"
				}
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"
				}
				$package_ScheduledTask_output_textbox1.Text = "`nNew package direcotory created: `r`n"
				$package_ScheduledTask_output_textbox1.AppendText("$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$powershell_open_package_directory_button1.Enabled = $true
				$powershell_open_package_directory_button1.Visible = $true
				$package_ScheduledTask_create_scripts_button1.Enabled = $true
				$package_ScheduledTask_create_scripts_button1.Visible = $true
				
				
				
			}
		}
	}
}

$powershell_package_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_open_package_directory_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	
	Invoke-Item "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\"
}

$package_ScheduledTask_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_ScheduledTask_create_scripts_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	

				
				$ScheduledTaskFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	"!!ps1name!!"
	===========================================================================
	.DESCRIPTION
		Please place your script between:
        "Place your Powershell code here" and "End of your Powershell script"
        When done. Save script and close Powershell_ISE
#>
#App Params
$package_scheduledTask_name  = "!!package_scheduledTask_name!!"
$package_scheduledTask_version = "!!package_scheduledTask_version!!"
#Customer vars
$logdir = "!!logdir!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$package_scheduledTask_name_$package_scheduledTask_version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$package_scheduledTask_name"
$excode = $null;
#create log directory in programdata when needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates dll directory in logdir when needed.
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates scheduledTasks directory in logdir when needed.
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
#Create registry key when needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application key in registry when needed
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  This is saved in $logdir. Also used in EventViewer
Start-Transcript -Path $logfile
<# Place your Powershell code here#>






















<# End of your Powershell script#>
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
if ($excode -eq 1) { $warning = 'Error'; }
else { $warning = 'Information'; }

if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs")
{
	if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) { remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false }
	copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
			$logdir = "$config_logfoldertarget\scheduledTasks"
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!ps1name!!", "scheduledTask_$package_scheduledTask_name.ps1")
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_name!!", $package_scheduledTask_name)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_version!!", $package_scheduledTask_version)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!logdir!!", $logdir)
				$ScheduledTaskFile | Out-File  "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\scheduledTask_$package_scheduledTask_name.ps1" -Force -Confirm:$false -ErrorAction SilentlyContinue
				copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\IntunePrepTool_msgfile.dll" -Confirm:$false
				$package_ScheduledTask_output_textbox1.AppendText("Template script to be scheduled created")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Please add your Powershell code between 'Place your Powershell code here' and 'End of your Powershell script'")
			$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
			$package_ScheduledTask_output_textbox1.AppendText("Save when done")
				
				
	
		$package_scheduledTask_Edit_script_button1.Enabled = $true
		$package_scheduledTask_Edit_script_button1.Visible = $true
		$package_scheduledtasK_option_startup_checkbox1.Enabled = $true
		$package_scheduledtasK_option_startup_checkbox1.Visible = $true
		$package_scheduledtasK_option_weekly_checkbox1.Enabled = $true
		$package_scheduledtasK_option_weekly_checkbox1.Visible = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Enabled = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Visible = $true
	}
	


$package_scheduledTask_Edit_script_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('Powershell_ISE will open now. Please place powershell code between "Place your Powershell code here" and "End of your Powershell script"; Save when done', 'Powershell_ISE') # Casting the method to [void] suppresses the output. 
	
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\scheduledTask_$package_scheduledTask_name.ps1"
	
	
	
}

$package_scheduledtasK_option_startup_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_createIntunewin_scripts_button1_Click={
	#TODO: Place custom script here
	$package_scheduledTask_Edit_script_test_install_button1.Enabled = $true
	$package_scheduledTask_Edit_script_test_install_button1.Visible = $true
	$package_scheduledTask_Edit_script_test_uninstall_button1.Enabled = $true
	$package_scheduledTask_Edit_script_test_uninstall_button1.Visible = $true
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	
	
	
	$ScheduledTaskInstall = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.232
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
		When needed you can edit the creation of the scheduled task below
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$psFile = "!!psFile!!"

# Customer variables
$logDir = "!!LogDir!!"
$registerDetectionRoot = "!!RegisterDetectionRoot!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
write-host "Script will copy powershell file to be used to run in the scheduled task" -ForegroundColor Green




try
{
	
	write-host "Scheduled Task created for $psFile" -ForegroundColor Green
	# Creates the scheduled task
	##HIER NOG EEN GEPLANDE TAAK AANMAKEN
	$excode = 0;
	
}
catch
{
	write-host "Error creating scheduled task" -ForegroundColor Yellow
	Write-Host "installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}










Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
	$ScheduledTaskUninstall = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	"!!ps1name!!"
	===========================================================================
	.DESCRIPTION
		Please place your script between:
        "Place your Powershell code here" and "End of your Powershell script"
        When done. Save script and close Powershell_ISE
#>
#App Params
$package_scheduledTask_name  = "!!package_scheduledTask_name!!"
$package_scheduledTask_version = "!!package_scheduledTask_version!!"
#Customer vars
$logdir = "!!logdir!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$package_scheduledTask_name_$package_scheduledTask_version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$package_scheduledTask_name"
$excode = $null;
#create log directory in programdata when needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates dll directory in logdir when needed.
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates scheduledTasks directory in logdir when needed.
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
#Create registry key when needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application key in registry when needed
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  This is saved in $logdir. Also used in EventViewer
Start-Transcript -Path $logfile
<# Place your Powershell code here#>






















<# End of your Powershell script#>
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
if ($excode -eq 1) { $warning = 'Error'; }
else { $warning = 'Information'; }

if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs")
{
	if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) { remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false }
	copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	
	
	
}

$windowsFirewallToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$config_InstallRequriedPSmodules_Click={
	#TODO: Place custom script here
	$config_install_required_ps_modules = @'
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

Write-Host "Script will install Evergreen powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Evergreen) { Import-Module -Name Evergreen -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Evergreen -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Evergreen -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -PathType Leaf))
		{
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		else
		{
			Remove-Item -Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -Confirm:$false -Force
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
	}
}

$downloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$wingetToolStripMenuItem1_Click={
	#TODO: Place custom script here
	
}

$config_download_folder_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$config_downloadFolderBrowse_Click={
	#TODO: Place custom script here
	if ($config_download_folderbrowsermoderndialog2.ShowDialog() -eq 'OK')
	{
		$config_download_folder_textbox3.Text = $config_download_folderbrowsermoderndialog2.SelectedPath
	}
}

$download_winget_tab_Click={
	#TODO: Place custom script here
	
}

$download_winget_search_button1_Click={
	
	$downloadWingetSearchText = $download_winget_search_textbox5.Text
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$download_winget_output_textbox3.Text = $null
	
	$download_winget_listbox1.Items.Clear()
	$download_winget_version_listbox1.Items.Clear()
	
	
	$table_download_winget = New-Object System.Data.DataTable;
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "ID";
	$table_download_winget.Columns.Add($column_download_winget);
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "Name";
	$table_download_winget.Columns.Add($column_download_winget);
	
	

	foreach ($wsearch_l in $downloadwingetsearch)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row_download_winget = $table_download_winget.NewRow();
			$download_winget_extraStrip = $wsearch_l.substring(0, $wsearch_IdStart)
			$download_winget_extraStrip = $download_winget_extraStrip.TrimEnd()
			$row_download_winget["Name"] = $download_winget_extraStrip
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row_download_winget["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			if ($row_download_winget["ID"] -notlike $null)
			{
				$table_download_winget.Rows.Add($row_download_winget);
				$download_winget_listboxInput = $row_download_winget| Select Name,ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
				$download_winget_listbox1.Items.Add($download_winget_listboxInput)
			}
			## - Save changes to the table:
			$table_download_winget.AcceptChanges();
			
			#$download_datagridview1.DataSource = $table_download_winget
			
			#$download_winget_listboxInput = $table_download_winget | Select Name, ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
			#$download_winget_listbox1.DataSource = $download_winget_listboxInput
			
			
			
		}
		
	}
	
	
	
}

$download_winget_search_textbox5_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 

}

$download_winget_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_version_listbox1.Items.Clear()
	
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	
	
	foreach ($wsearch_55 in $downloadwingetsearchversionselected)
	{
		
		
		if (($wsearch_55 -notlike "Found*") -and ($wsearch_55 -notlike "*-*") -and ($wsearch_55 -notlike "*Version*") -and ($wsearch_55 -notlike $null) -and ($wsearch_55 -notlike "* *"))
		{
			
			$download_winget_version_listbox1.Items.Add($wsearch_55)
			
			
		}
		
	}
	
	
	
	
}

$download_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	#Write-Host $download_datagridview1.SelectedRows.Item.ToString()
}

$download_winget_version_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_download_and_add_button1.Visible = $true
	$download_winget_download_and_add_button1.Enabled = $true
}

$download_winget_download_and_add_button1_Click={
	#TODO: Place custom script here
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	$download_winget_explorer_button1.Enabled = $true
	$download_winget_explorer_button1.Visible = $true
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	if (!(Test-Path -Path $download_winget_path))
	{
		
		New-Item -ItemType Directory -Path $download_winget_path
	}
	#$downloadWingetToLib = winget download --download-directory $download_winget_path --id $winget_download_selected_id --accept-package-agreements --accept-source-agreements
	
	#$download_winget_output_textbox3.Text = $downloadWingetToLib
	#$config_downloadpath
	#Write-Host $download_winget_version_listbox1.SelectedItem
	$download_winget_selectedversion = $download_winget_version_listbox1.SelectedItem
	$download_winget_package = @'
winget download --download-directory !!@download_winget_path@!! --id !!@winget_download_selected_id@!! --accept-package-agreements --accept-source-agreements --version !!@download_winget_selectedversion@!!
'@
	$download_winget_package = $download_winget_package.Replace("!!@winget_download_selected_id@!!", $winget_download_selected_id)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_selectedversion@!!", $download_winget_selectedversion)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_path@!!", $download_winget_path)
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -PathType Leaf))
		{
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		else
		{
			Remove-Item -Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -Confirm:$false -Force
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		
		powershell_ise 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1'
	}
	
}


$download_winget_explorer_button1_Click={
	#TODO: Place custom script here
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	explorer $download_winget_path
}

$config_help_button1_Click={
	#TODO: Place custom script here
	
}

$config_exit_help_button1_Click={
	#TODO: Place custom script here
	
}

$exe_maak_uninstall_script_button1_Click={
	#TODO: Place custom script here
	$exe_maak_intuneWIN_button1.Enabled = $true
	$exe_maak_intuneWIN_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	
	$exe_uninstallFile = @'
<#	
    .NOTES
    ===========================================================================
     Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
     Created on:   	21-5-2023 18:04
     Created by:   	Rink Turksma
     Organization: 	
     Filename:     	uninstall.ps1
    ===========================================================================
    .DESCRIPTION
        Parameters will be filled by IntunePrepTool.
#>
#App Parameters
$appName = "!!AppName!!"
$version = "!!version!!"
$exeFile = "!!EXEFile!!"
$exeParameters = "!!EXEPARMS!!" ##Check EXE PARAMETERS.. 
#Customer variables
$logDir = "!!logdir!!"
$registerDetectionRoot = "!!RegisterDetectionroot!!"
#Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
#Create log directory in programdata if it does not exist.
if (!(Test-Path -Path $logDir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
    New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application Key in the Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
    New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Function ensures successful or unsuccessful execution..
	### Eventually you will have, for example:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  
#The code you provided is a comment in PowerShell. It indicates that the following code block is related to a transcript that will be saved in a text file under the $logdir directory and will also be available in the event viewer.
Start-Transcript -Path $logfile
#Start; Write Log file
try
{
	Start-Process -FilePath $EXEFile -ArgumentList $exeParameters -ErrorAction Stop -wait
	write-host "Uninstall completed" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
    write-host "Error executing $EXEbestand" -ForegroundColor Yellow
	Write-Host "Uinstallation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}
### Place extra actions here:





<#----Below is the end of the installation script---#>
#Now the Transcript logging is started
Stop-Transcript
#After this command, the log is automatically saved in the $logdir location
#Here is a way to split the log so that we only have the last run.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
    $lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try / catch block in the execution, we set $excode to 0 or 1
# Based on this, the Log in the Event viewer is set to Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful application message or an unsuccessful one.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		$versie = $exe_versie_textbox1.text
		$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
		$MSIPARSInput = '"' + $exe_msiexecuninstall.Text + '"'
		
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
		
		try
		{
			$exepnaam = $exe_packagenaam_textbox1.text
			$exeversie = $exe_versie_textbox1.text
			$outputDirectory = $config_packagefolder
			$jjmsii = $exe_msiexecuninstall.text
			
			$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
			$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
			$exe_output_textbox1.AppendText("`nu.cmd created `r`n")
			$exe_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
			
			
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
		}
		
		
	}
	else
	{
		
		if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
		{
			$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
			
		}
		else
		{
			$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
		}
	
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	#$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppName!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!version!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEFile!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nUbinstall.ps1 NIET created `r`n")
	}
	}
}

$exe_radiobutton3_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	
	
}

$exe_msiexecuninstall_TextChanged={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_search_button1_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Searching: `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	$wattezoeken = $tools_uninstallstring_search_textbox3.Text
	$InstallsUninstallString = $InstallsUninstallString | where-object { $_.DisplayName -contains $wattezoeken -or $_.DisplayName -match $wattezoeken } 
	
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_uninstallstring_search_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$buttonSearch32Bit_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Searching: `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	$wattezoeken = $tools_uninstallstring_search_textbox3.Text
	$InstallsUninstallString = $InstallsUninstallString | where-object { $_.DisplayName -contains $wattezoeken -or $_.DisplayName -match $wattezoeken }
	
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">548</Line>
    <Line Disabled="True">1336</Line>
    <Line Disabled="True">1338</Line>
    <Line Disabled="False">1796</Line>
    <Line Disabled="False">3215</Line>
    <Line Disabled="False">4794</Line>
    <Line Disabled="True">5546</Line>
    <Line Disabled="True">5548</Line>
    <Line Disabled="True">5654</Line>
    <Line Disabled="False">7172</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>