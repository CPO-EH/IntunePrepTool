<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>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</Preview>
  <Form>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</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	<#
	$regkeyRootCSN = "HKLM:\Software\CSN_Package"
	try
	{
		[string]$klnm = $klantnaam_textbox1.text
		[string]$ldir = $logfoldertarget_textbox2.text
		[string]$sdir = $packacgedir_textbox3.text
		
		$vvcld = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigLogDir -ErrorAction Stop
		$vvck = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigKlant -ErrorAction Stop
		$vvcsd = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigSourceDir -ErrorAction Stop
		$klantnaam_textbox1.text = $vvck.ConfigKlant
		$logfoldertarget_textbox2.text = $vvcld.ConfigLogDir
		$packacgedir_textbox3.text = $vvcsd.ConfigSourceDir
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Je hebt nog geen Klantnaam, Log en/of Source Dir opgegeven.. Ga naar Config', 'Configureren') # Casting the method to [void] suppresses the output. 
	}
	#>
	Set-Location $PSScriptRoot
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername  -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	
}


$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }

	
	$WinGetID = $wid
			$regApp1 = $WinGetID.Split(".")[1]
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
	
		$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	08/03/2023 12:15
	 Created by:   	Rink Turksma
	 Organization: 	CSN Groep B.V.
	 Filename:     	Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
$WinGetID = "!!WinGetID!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"

#Dyn vars
$regApp1 = $WinGetID.Split(".")[1]
$logfile = $(Join-Path $logdir  "$WinGetID$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget Is niet geinstalleerd" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
		$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
		$installfile = $installfile.Replace('!!logdir!!', $logdir)
		$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
		$installfile = $installfile.Replace('!!versie!!', $versie)
		if ($wlo -ne $null)
		{
		$installfile = $installfile.Replace('!!locale!!', $wlo)
		$installfile = $installfile.Replace("!!localeSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
		if ($wve -ne $null)
		{
		$installfile = $installfile.Replace('!!versionWinget!!', $wve)
		$installfile = $installfile.Replace("!!versionSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
	
	
	if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
		}
	
		
		$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
		$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
	
	
		Set-Location $PSScriptRoot
		
		
		& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
		
		Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
		$winget_output_textbox3.Text = "`nNiew package aangemaakt: `r`n"
	
		$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
		$winget_output_textbox3.AppendText("`r`n")
		$winget_output_textbox3.AppendText("Versie is: $Versie `r`n")
		$winget_output_textbox3.AppendText("Install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
		$winget_output_textbox3.AppendText("un-install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
		$winget_output_textbox3.AppendText("Detection registry is: `r`n")
		$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
		$regkeyApp = "$regkeyRoot$regApp1\"
		$regkeyApp
		$winget_output_textbox3.AppendText("$regkeyApp `r`n")
		$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
		$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName = $wingetID
			Publisher = $config_customername_textbox.Text
			AppVersion = $versie;
			reglocation = $regkeyApp
			regValue = 'Versie'
			installCMD = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD = "powershell -executionpolicy bypass -file uninstall.ps1"			
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$winget_output_textbox3.AppendText("Config.csv weggeschreven naar: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
	}
	
	

$winget_WingetID_textbox1_TextChanged={
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null) { #Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage2_Click={
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click={
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click={
	#TODO: Place custom script here
	
	#$showurl = winget show $wgid
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Expecting Winget in: C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}

		$wgid = $winget_WingetID_textbox1.text
		try
		{
			$showurl = & $winget_exe show $wgid
			foreach ($l in $showurl)
			{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
			}
		}
	catch
	{
		$showurl = winget show $wgid
		foreach ($l in $showurl)
		{
			if ($l -like "*Download Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
		
	}
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_save_button_Click={
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text

	
	$config_customerinfo += @([config_customerinfo]@{
			customername =  $c_customername
			logfoldertarget   = $c_logfoldertarget
			packagefolder	  = $c_packagefolder
			tenanturl   = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_import_csv = Import-Csv config_customerinfo.csv -ErrorAction Stop
	$config_listbox = $null;
	foreach ($cis in $config_import_csv)
	{
		Update-ListBox $config_listbox $cis.customername -Append
	}
	
	
	
}

$tabcontrol1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click={
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click={
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder;  $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
	}
	$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
	
	[string]$exe_org_path = $exe_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nEXE file copy failed `r`n")
		$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
		$exe_panel1.Enabled = $true
		$exe_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
	}
	$exe_open_sourcedir_button1.Enabled = $true
	$exe_open_sourcedir_button1.Visible = $true
}

$exe_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage5_Click={
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click={
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file  "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" 
	}
	

}

$exe_radiobuttonUninstallEXEPath_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click={
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click={
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click={
	#TODO: Place custom script here


	
	$exe_installFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	

	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information';  remove-item $regkeyApp  }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$exe_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	
}

$msi_buttonOpenMSIFile_Click={
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click={
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
	}
	$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
	[string]$msi_org_path = $msi_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nMSI file copy failed `r`n")
		$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
		$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
		$msi_panel1.Enabled = $true
		$msi_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
	}
	$appNaam = $msipnaam
	$versie = $msiversie
	$MSIbestand = $msi_openfiledialog1.SafeFileName
	#klant variabelen
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	#Dyn vars
	$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
	$filenaamMSILog = $appNaam + $versie + "MSI"
	$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
	$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
	$msi_OpenSourceDir_button1.Enabled = $true
	$msi_OpenSourceDir_button1.Visible = $true
}

$labelInstallParametersadj_Click={
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click={
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'

	$msi_installFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
    write-host $startPMSI
	$msilog = get-content $logfileMSI
    if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
    Else {
    foreach ($ml in $msilog) {
    if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*"){ 
    $msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
    }
    }
    write-host "Product succesvol geinstalleerd" -ForegroundColor yellow -BackgroundColor black
    write-host "Mogelijke uninstall commando is:" -ForegroundColor yellow -BackgroundColor black
    write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
    }

	
	$excode = 0
}
catch
{
	Write-Host "Installatie mislukt" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
    write-host "Zie log file v.d. MSI waarom dit niet werkt:" -ForegroundColor Red -BackgroundColor Blue
    write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "Zie wat dit betekent: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$msi_install_par_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	
}

$msi_OpenSourceDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click={
	#TODO: Place custom script here
	$msi_uninstallFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
    write-host $startPMSI
	write-host "Unistall uitevoerd" -ForegroundColor yellow -BackgroundColor black
   

	
	$excode = 0
}
catch
{
	Write-Host "Deinstallatie mislukt" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
	
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	
}

$msi_button4TestUninstallPowers_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click={
	#TODO: Place custom script here
	Clear-Host
}

$tabpage1_Click={
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click={
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Lentis"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click={
	#TODO: Place custom script here
	$config_csv_openfiledialog1.ShowDialog()
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	#Write-Host $ConfigCSVImport
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$itwnffilepath = $filepath + $itwnf
	$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
	$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
	$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
	$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
	$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
	$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
	$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
	$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD

}

$upload_IntuneWinFile_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click={
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IntuneWin32App -Force }

Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "20H2"
	write-host "We will first check if there are any apps already availeble in Intune with the same DisplayName" -ForegroundColor Green ; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green ; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be availeble in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
	
	if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		
		foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
		{
			write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
			$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
			$evtvversie = $vorigeversie.DisplayVersion
			
			if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
			else
			{
				write-host ""; Write-host "`r`n"; Write-host "`r`n"
				$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
					try
					{
						Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
					}
					catch
					{
						Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
					}
				}
			}
		}
		
		foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
		{
			$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
			$niksdoen = $response -eq "q"
			if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
			else
			{
				write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
				Write-host "We will fix superseedence for:" -ForegroundColor Green
				$vorigeversie.displayVersion
				
				$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
				$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
				if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
				Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
			}
		}
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE? ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}

$upload_dep_textbox1_TextChanged={
	#TODO: Place custom script here
	
}





$config_panel_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged={
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged={
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername 
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget ; 
			$config_packagefolder_textbox.text = $cis.packagefolder ; 
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click={
	#TODO: Place custom script here
	$config_customername_textbox.text = "'Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click={
	#TODO: Place custom script here
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_search_string = $tools_search_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe search $tools_winget_search_string
	
	}
	catch
	{
		$tools_winget_id = winget search $tools_winget_search_string
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_button_Click={
	#TODO: Place custom script here
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_show_winget.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string
		
	}
	catch
	{
		$tools_winget_id = winget show $tools_winget_show_string
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged={
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click={
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string --versions
		
	}
	catch
	{
		$tools_winget_id = winget show $tools_winget_show_string --versions
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="False">1688</Line>
    <Line Disabled="False">2568</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>