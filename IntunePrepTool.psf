<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>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
AABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	<#
	$regkeyRootCSN = "HKLM:\Software\CSN_Package"
	try
	{
		[string]$klnm = $klantnaam_textbox1.text
		[string]$ldir = $logfoldertarget_textbox2.text
		[string]$sdir = $packacgedir_textbox3.text
		
		$vvcld = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigLogDir -ErrorAction Stop
		$vvck = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigKlant -ErrorAction Stop
		$vvcsd = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigSourceDir -ErrorAction Stop
		$klantnaam_textbox1.text = $vvck.ConfigKlant
		$logfoldertarget_textbox2.text = $vvcld.ConfigLogDir
		$packacgedir_textbox3.text = $vvcsd.ConfigSourceDir
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Je hebt nog geen Klantnaam, Log en/of Source Dir opgegeven.. Ga naar Config', 'Configureren') # Casting the method to [void] suppresses the output. 
	}
	#>
	Set-Location $PSScriptRoot
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername  -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	
}


$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }

	
	$WinGetID = $wid
			$regApp1 = $WinGetID.Split(".")[1]
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
	
		$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	08/03/2023 12:15
	 Created by:   	Rink Turksma
	 Organization: 	CSN Groep B.V.
	 Filename:     	Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
$WinGetID = "!!WinGetID!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"

#Dyn vars
$regApp1 = $WinGetID.Split(".")[1]
$logfile = $(Join-Path $logdir  "$WinGetID$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget Is niet geinstalleerd" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
		$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
		$installfile = $installfile.Replace('!!logdir!!', $logdir)
		$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
		$installfile = $installfile.Replace('!!versie!!', $versie)
		if ($wlo -ne $null)
		{
		$installfile = $installfile.Replace('!!locale!!', $wlo)
		$installfile = $installfile.Replace("!!localeSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
		if ($wve -ne $null)
		{
		$installfile = $installfile.Replace('!!versionWinget!!', $wve)
		$installfile = $installfile.Replace("!!versionSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
	
	
	if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
		}
	
		
		$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
		$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
	
	
		Set-Location $PSScriptRoot
		
		
		& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
		
		Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
		$winget_output_textbox3.Text = "`nNew intunewin package created: `r`n"
	
		$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
		$winget_output_textbox3.AppendText("`r`n")
		$winget_output_textbox3.AppendText("Version: $Versie `r`n")
		$winget_output_textbox3.AppendText("Install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
		$winget_output_textbox3.AppendText("un-install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
		$winget_output_textbox3.AppendText("Detection registry is: `r`n")
		$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
		$regkeyApp = "$regkeyRoot$regApp1\"
		$regkeyApp
		$winget_output_textbox3.AppendText("$regkeyApp `r`n")
		$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
		$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName = $wingetID
			Publisher = $config_customername_textbox.Text
			AppVersion = $versie;
			reglocation = $regkeyApp
			regValue = 'Versie'
			installCMD = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD = "powershell -executionpolicy bypass -file uninstall.ps1"			
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
	}
	
	

$winget_WingetID_textbox1_TextChanged={
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null) { #Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage2_Click={
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click={
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click={
	#TODO: Place custom script here
	
	#$showurl = winget show $wgid
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Expecting Winget in: C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}

		$wgid = $winget_WingetID_textbox1.text
		try
		{
			$showurl = & $winget_exe show $wgid
			foreach ($l in $showurl)
			{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
			}
		}
	catch
	{
		$showurl = winget show $wgid
		foreach ($l in $showurl)
		{
			if ($l -like "*Download Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
		
	}
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_save_button_Click={
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text

	
	$config_customerinfo += @([config_customerinfo]@{
			customername =  $c_customername
			logfoldertarget   = $c_logfoldertarget
			packagefolder	  = $c_packagefolder
			tenanturl   = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	Start-Sleep 5
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	$config_listbox = $null;
	foreach ($cis in $config_import_csv)
	{
		Update-ListBox $config_listbox $cis.customername -Append
	}
	
	
	
}

$tabcontrol1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click={
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click={
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder;  $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
	}
	$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
	
	[string]$exe_org_path = $exe_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
		$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
		$exe_panel1.Enabled = $true
		$exe_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
	}
	$exe_open_sourcedir_button1.Enabled = $true
	$exe_open_sourcedir_button1.Visible = $true
}

$exe_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage5_Click={
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click={
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file  "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" 
	}
	

}

$exe_radiobuttonUninstallEXEPath_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click={
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click={
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click={
	#TODO: Place custom script here


	
	$exe_installFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	

	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information';  remove-item $regkeyApp  }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$exe_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	
}

$msi_buttonOpenMSIFile_Click={
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click={
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
	}
	$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
	[string]$msi_org_path = $msi_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nMSI file copy failed `r`n")
		$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
		$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
		$msi_panel1.Enabled = $true
		$msi_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
	}
	$appNaam = $msipnaam
	$versie = $msiversie
	$MSIbestand = $msi_openfiledialog1.SafeFileName
	#klant variabelen
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	#Dyn vars
	$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
	$filenaamMSILog = $appNaam + $versie + "MSI"
	$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
	$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
	$msi_OpenSourceDir_button1.Enabled = $true
	$msi_OpenSourceDir_button1.Visible = $true
}

$labelInstallParametersadj_Click={
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click={
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'

	$msi_installFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
    write-host $startPMSI
	$msilog = get-content $logfileMSI
    if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
    Else {
    foreach ($ml in $msilog) {
    if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*"){ 
    $msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
    }
    }
    write-host "Product succesvol geinstalleerd" -ForegroundColor yellow -BackgroundColor black
    write-host "Mogelijke uninstall commando is:" -ForegroundColor yellow -BackgroundColor black
    write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
    }

	
	$excode = 0
}
catch
{
	Write-Host "Installatie mislukt" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
    write-host "Zie log file v.d. MSI waarom dit niet werkt:" -ForegroundColor Red -BackgroundColor Blue
    write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "Zie wat dit betekent: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$msi_install_par_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	
}

$msi_OpenSourceDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click={
	#TODO: Place custom script here
	$msi_uninstallFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
    write-host $startPMSI
	write-host "Unistall uitevoerd" -ForegroundColor yellow -BackgroundColor black
   

	
	$excode = 0
}
catch
{
	Write-Host "Deinstallatie mislukt" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
	
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	
}

$msi_button4TestUninstallPowers_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click={
	#TODO: Place custom script here
	Clear-Host
}

$tabpage1_Click={
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click={
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click={
	#TODO: Place custom script here
	$config_csv_openfiledialog1.ShowDialog()
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	#Write-Host $ConfigCSVImport
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$itwnffilepath = $filepath + $itwnf
	$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
	$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
	$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
	$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
	$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
	$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
	$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
	$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD

}

$upload_IntuneWinFile_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click={
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IntuneWin32App -Force }

Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "20H2"
	write-host "We will first check if there are any apps already availeble in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be availeble in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE? ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}

$upload_dep_textbox1_TextChanged={
	#TODO: Place custom script here
	
}





$config_panel_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged={
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged={
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername 
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget ; 
			$config_packagefolder_textbox.text = $cis.packagefolder ; 
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click={
	#TODO: Place custom script here
	$config_customername_textbox.text = "'Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click={
	#TODO: Place custom script here
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_search_string = $tools_search_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe search $tools_winget_search_string
	
	}
	catch
	{
		$tools_winget_id = winget search $tools_winget_search_string
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_button_Click={
	#TODO: Place custom script here
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_show_winget.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string
		
	}
	catch
	{
		$tools_winget_id = winget show $tools_winget_show_string
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged={
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click={
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string --versions
		
	}
	catch
	{
		$tools_winget_id = winget show $tools_winget_show_string --versions
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click={
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click={
	#TODO: Place custom script here
	
}

$deP_label3_Click={
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click={
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged={
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged={
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged={
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="False">1695</Line>
    <Line Disabled="False">2633</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>