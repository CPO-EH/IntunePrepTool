<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>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
7hcqqHuHAaClPbgh7+p6t7q7uxe0np4e39bb27tgPX/+fMHq6+vzbf39/QvaixcvFqyBgQHf9vLl
ywVtcHBwwRoaGvJtw2YgGZ9VVNehnTeeKiardmxgGFVLFwOA7/LaMM9XXhvm+cprw+iXvDbK85nX
hnm+8tow+iWvjfJ85rVhnq+8Nox+6fWN/6gqm7r1v1be0X/6xyX9l39e1tnEMmcoYADwYV4b5vnK
a8M8X3ltGP2S10Z5PvPaMM9XXhtGv+S1UZ7PvDbM85XXhtEvvT4ASJcfVTob/39delP/dVG0Pt6d
5Jze1j3AAOC3vDbM85XXhnm+8tow+iWvjfJ85rVhnq+8Nox+yWujPJ95bZjnK68No196fQAYVWl9
l/7Hslv6z59ecjp+v8QZADgGwId5bZjnK68N83zltWH0S14b5fnMa8M8X3ltGP2S10Z5PvPaMM9X
XhtGvzR+AAgOAVJuRat+upCryymVGh47WHFGTwHYI6u97uSnk9cd9HzmdSfpl7zuoOcrrzvo+Wri
nZPXHeZkTVx2Yl7LvC2vdYzPa5m35bUON3u+1x3kfOZ1JzVfTbwz9FMj5o5+IRsdHV2wwpH9nc3G
v9mJ/x9sr3F+PzM6CLBblRXlKi0tVVlZ2ZTZy43P6zLve+Xl5ZPmdfm35bWOiXkt55XXshML9fJz
VUVFxau8zg+18et713VOXMfEvJZ5W17rcPO6/FR5rcfmddnJ8lo+1GZrPaFWWVnpefp0s8tPp3dd
brLman1e50VqVVVVnqdPJ7vsuzQb63Abv66p1mdvX21tbc4DJa8HrbORfdDufm7/PLihrVeFgech
DgCBHtU3taustMR5ROm1m5nIL832U0qzub53XZf7VJlXXpefKq/1vK3ZWAdRuGQ3yLW1tc4QYPeQ
d3Z2znndXZ0KtHS/wwBQZweANtVUVzm7Wrx2+REREdHU2V30ra2tzp4AOwx4HTc32/V0d818ALBX
3Ot5RyIiIpo6+7x9S0tLeA0A1VWVDABEREQzKLwGAOcYAAYAIiKimeYOAPZAQQYAIiIin8QAEGHZ
v+UMHuBhXwwjnLN/wz3o+TMSEdHMi9BjAAaDLzpg2LdLdE8fGbWvQ/DmckPmMsPDQ68u45p4OZv9
hQ2bjazXeQuZ3WDaF15paGhSY1OLmponr7W13fxPb33j9ObmVnN6m5rHnRc87c3LznX2Z6g3P8uL
sReT8fqZiYjo3Yu8YwDsI0fzCDIj6b5OnTqn6vrWsc251FBTqepA89hX9vWIggYH+tXX3+8MAu0N
1Tp17JjiH2U65018ZacXfb3qH3g59tWbXr+0nPeH9ryes5zdSNr/gXbj7V6HyV6V6qX9eV8MjH0V
vFwwmd/doAbNgDOeu5rJ1vfL8rNbS2ubes3PxABARDT7RdwAYF94MFCWqy8//0qXzp9XWk6BSnLT
dCv2vmKvXdG12/d0/9Y15RZVqL68QKdOnNLGVUu1Zf9ZjY4MaOfG9YqNi9exo8eU9ChN9fUBlZaW
6HHiA12PidOeDau15+h53bl+SXcT01Scn6njJ07qyuXLepz5TM01pbpyJVrVZti4cvGimtp7nN3y
Xtd1NnMHgNb2Tmej3NTU5Hzs7mjTi0H7WxlRe0eHOhqr9Nk//q6sohr19XarvavbuZxVX12s85eu
KNDU6rwoRFNDneJuRuvStZvqfv7CuYz9x2L3kow4u1NGzLAQfL3nudDW3sEAQEQ0R0XcAGA3tt3t
zYq5Ea2Tx6N05eoV/fVPv9NfPvxIGzfv0NKvF+l3v/+DFn25SGvWbVZW7hMd2L5BF24laqC9Vjt2
Hxnb/EgXjx9Q8uPHOnPyqH5ctUwrNm7XkQN7tfyHZTpx9rLOHN2jRYu+1MqlP2jlspXatm2z/v63
j833+lCLv/tOm7btV99A8Dl5r+s6mwUHgD71Pe9RzJUz2rZ7j27cuKatm9br6IkzOrR3m75f/oN+
XL1MH/z+L7p8Ndr8LLv19fKVqm3rc37e2rIn2rVvn86fitJXi77Rhs0b9fFHH+n77xdr96GjunDh
nDZu3KDzV67r2oXT2rz9oDp7f9mTMNsYAIiI5q7I2wNgTq8pzdeevbt17uQhbdqwQT8s+14bft6s
01EntGr5Un319WLzqP20dm/foYuXo3Uqao+OnLkiDb/U4V1bdfLkWe3afVjnzp7S6jWrtOLHDbpx
/bwWff61tu/crlWrftDO3fu0f/c2rd+0XdcvX9XVc2bgiDqobxcv1o8/rdeRvft0PSbB2ZB5Xc/Z
zhkA+vrV192qPWYQycx/okN7tujs5euK2rdNy9duVE5ejtauXmOu936tW7dSl67f0O5dO1Xa0ONc
z8bqIv24bq2OHI0yg8IP+mHNGm1et04HzNdXLhzTh3/7TPfj72vvvv3m59uiT79bqxeD7AEgIgrH
wmsAmOZBgCMjwyrMS1dM7F0NDA2rua5Mycmpamxsln0r4ezUZBWX16q3vUn3zGVqamv05GmBszt7
oLdDcXdu60lxtYaHBpSYmKDisiqVPM3T4/QctbU2qbikRJlpKcovKlNHW6saGhrVaGtuUXtLvZIS
ElVf3+g8Hz9fG6/gHoDn6u59rrqypzp4+IjKKmt06XSU4lMynTdQamxuVlZGpnKyc1VRXqyjZjD4
/YefKD2/1Hmzj9KSYmXnZKuw4KkuXbygrOwcxd28oahjB3QjLtH8rE06fOiQsvMLVFhUqLz8XOcp
jrnCAEBENHdF3kGAY7nsQW3uoWt2GVvQaPC9ie1no8FL2OWGXj2nbd9r4PWD4axflg+yX9vlR+yB
a3b9Y9/MOc0MIhOv11zlDgD2wLlpGXyhE0cP6uyV26qqrFBRUZHqGlrGznw/MAAQEc1d7gDA6wCE
ee4A0NrWPrb5DH8MAEREc1d4DQC8F8CkMQAQEVEoheUAwLsBvhkDABERhVJYHgTIAPBmDABERBRK
PAUQITEAEBFRKDEAREgMAEREFEocAxAhMQAQEVEoMQBESAwAREQUSmF5ECBPAbwZAwAREYVSeO0B
4IWAJo0BgIiIQokBIEJiACAiolAKy2MAGADejAGAiIhCKbyOAWAPwKQxABARUSgxAERIDABERBRK
DAAREgMAERGFEgNAhMQAQEREoRReAwAHAU4aAwAREYUSewAiJAYAIiIKJQaACIkBgIiIQskdAHgh
oDCPAYCIiEIpvAYAjgGYNAYAIiIKpbA8CJB3A3wzBgAiIgqlsBwA2APwZgwAREQUSjwFECExABAR
USgxAERIDABERBRKYTkAcAzAmzEAEBFRKHEQYITEAEBERKEUXgMArwMwaQwAREQUSuH1FAADwKQx
ABARUSgxAERIDABERBRKYXkMAAPAmzEAEBFRKHEMQITEAEBERKHEABAhMQAQEVEoMQBESAwAREQU
SgwAERIDABERhRIHAUZIDABERBRK7AGIkBgAiIgolBgAIiQGACIiCiV3AOCFgMI8BgAiIgql8BoA
OAZg0hgAiIgolMLyIEDeDfDNGACIiCiU2AMQITEAEBFRKDEAREgMAEREFEphOQDwFMCbMQAQEVEo
MQBESAwAREQUShwEGCExABARUSiF1x4AXgdg0hgAiIgolDgIMEJiACAiolBiAIiQGACIiCiUwvIY
AAaAN2MAICKiUAqvAYBjACaNAYCIiEKJASBCYgAgIqJQCq9jABgAJo0BgIiIQoljACIkBgAiIgol
ngKIkBgAiIgolBgAIiQGACIiCiUGgAiJAYCIiEKJgwAjJAYAIiIKpfAaADgIcNIYAIiIKJR4CiBC
YgAgIqJQYgCIkBgAiIgolHgKIEJiACAiolAKywGgprqKAWBCDABERBRK4fUUAAPApDEAEBFRKIXl
AMBTAG/GAEBERKEUXk8BcBDgpDEAEBFRKHEQYITEAEBERKHEABAhuQNAS2vb2OYz/NlhhgGAiGhu
4hiACMluJF+8eKH6hkY1NbeouaU1rLM/g/1Z7M/EAEBENPtxDECEZTeWAwMDEREbfiKiuSviBgD7
Aw0NDRER0TRz7ze97lMpcouoAcA+YrQ/SGlpqcrLy4koDCorK/M8/V2bzfW9r+uyzdb6KioqVFBQ
oPb2doYAn+UOABFxDIDdbVxSUqL+/n4iIppG9r6zoaFBNTU1PLXqs8JrAJhiD4A9YMxOszx3TEQ0
vexGoLW1VXV1dQwAPiuiBgC7B4ABgIho+jEA+LeI2wNgn9NiACAiml4MAP6NAYCIyMcxAPi38BoA
pjgIkAGAiCi0GAD8G3sAiIh8HAOAf3MHgIh4HQAOAiQiCi0GAP8WXgPA2FMANdVV7AEgIpqFGAD8
GwMAEZGPYwDwb+4AEFYHATIAEBHNTgwA/i0s9wBwDAAR0ezEAODfGACIiHwcA4B/C8sBYLKnABgA
iIhCiwHAv7EHgIjIxzEA+Dd3AIiIFwJiACAiCi0GAP8WXnsAGACIiGY1BgD/xgBAROTjGAD8W3gN
AFMcA8DrABARhRYDgH9zBwCOASAi8mHuABAIBBgAfBYDQIQ1PDykoSEiojez9w8T7x/ZA+DfGAAi
KPvzNze3qMnU3NxKRDSuFjU2Nau/v/+1+0gGAP8WUQPAbBwDMDg4JNfgJOcPm0l64ukLnf2Z7f9A
ewO315GIaGKtre3q6Oh09ga49x0MAP4tvAaAuT4I0Cw3PDig+3du6G7iIw2OmClgdNR8r9HgRGCM
Dg9pwFzWNWLOH29o2C5kjJ0+OjKswaFh53PLvfjohOXs/wiX53WbIncAaG1rH1sLALyuu7tHnZ1d
ngMAxwD4L/YAjMtsrXXtbJT2Hjipw/v3KyY+RU3NzaqvD6isuFD34+N158pprdu4W09yM3Qz9oFa
m+t1/epVPXgQr+SULA309Sg+Llb1zS16lHBf5XXNet7VqmtXLysrv1ANdeWKiYlRk3mk/iDutu6a
dd69+0A9z/uVlRyvnGcl77SHgQEAwFS6uronHQDYA+C/ImoAmNkxAIPm4ftzbd+4We5j8cyE27p+
J07x927rp9Ur9I+vFuv40SNauXSJduw7otMnjum7r7/UssWLtXTxUm3etkPLlnyvDz74QIuXLNHS
pStV39ajnIRrWrz0O+3cf0CXz5/Rr//vv2vljz/pp5XL9N13y7Tqxw1au3a1fv/b3+gPf/1UdW29
5ucLbQhgAAAwFQYAGp87AETECwHNxh6AyycP6/CxCzoZdVynT53W9u2btGLNj7p47aqWL/lW6zds
0cafV2nr7sNmADiqb7/+Trdv3tCV05d1NfqC/v7pZ2Zjv0pH9u/T4aPnnRtdSly04hOTdPXyaTMs
LNdnn36uf37xla7fvKnLZrnrN27p26++1GfmtK079qu1uz/kvQAMAACmwgBA4wuvAWCOjwFwDpQZ
6NOdq2ajHJOg/hcDSoiP1f3EVJUWPtXtW3dUVx9QdnamMlJTdDM2Xo2NDeb6VKm6slpV1TVqaqpX
3K1bKiwuU1VVjXNDa2msU6C+wbmBFTzJ042bMcp78ky1tbXB5UwNjU3KSLqvlNRs51gEr+v3ttwB
oKm51fndEBFNrL29g4MA6VXuABBWBwFO9nbAs/JXAOaG4bLrmWjiwXv2a3uKc6r9/LWzR511Do+Y
08319Vo2uKRd7pfzJl6n6WafAmlsbObPAInIoxY1NDSpr6/vtftIBgD/FpYDwJz9FUAEZCd7+/MT
EU3MvX8Yf5/BAODf3AEgIp4C4JUAiYhCiwHAv0XUAMAeACKi0GIA8G9hOQDM5TEARER+igHAv7kD
QEQcBMhTAEREocUA4N/CawDgzYCmjHcDJKLJ4t0AaXzuABARLwQ04wHALGf/js/zvHFZ9jX+7edD
Q8Ovrot9X4Ahj+9tr890r5O9kXqdPp3sz9/SEvyTH/uRiMit2WT/RJh3AyQ3BoBXDWqg/7kC9fUa
MJ/bdQS39KPO3/E7n5qNvn2zn1rz/Zvau53T+nu61NjU4nze2d6qnr4B53P7d//Bj8NmXUPO9XWN
+5N/h/2f4LKfz+S9ABqams3X5ue3vwMiIjdzv9Da2qaODl4JkIK5A0BEvA7ATAaAwaER9bXVaNP2
7eo32+qR4ZeKvxcbfDOf1kbdvH1bdS2dGuis1+9/82vFJafrYUKinmU91oWLN1SQk6mlK1eruKpe
OZlpauvqVn5Wmhrbu/Tw+hntPnxaT59k61lhmRrrqpSX/1QFudm6E5/gvDBHTka6ArUV+nHFclU0
dr/zSwG3tXeMjRIA8Lq3vRsgA4D/Cq8BYA73ADgDQGuNtu3e49xQkmKjtXHrLu3eukGbtu3Rpi3r
dfD8bQ31NWvxV59qzYbtOnhgvzas+1mb16/X/kNHzPCwVWtWr9Rvf/1rLV2xQku+/0F1rV26e/Go
NmzZpY2rv9XvPv6HtmzcpPU/b9DefQe0fstGrV2zWr8zQ8Wir77UV19+p6qWXt4LAMCs470AaHwM
AGPZAeBFZ0DfLf5G2VlZOnF4r46fvqjd61do2fqtunj+lA6euW5uQgOKOrRD67fu07Xoy1qxZImW
fPutjp0/p717tuufixZp8bI1OrBrpw4ePufc6PIe39WaVT9o1ZJl+mTR5/rx5x2Ki72lqFMndPpk
lL748gt98c0yHTt2XFu2blK1MwCE9jMwAACYCgMAjY8BwG3QHiX7QjevnNORI0dUXFah86eOK+tp
qbKTY/XRn3+r/edum5vQsEpKS1Ve/ExHoo6pvLJa1RXlunvros5G31JTc72iL1xQXn6BiotLnRta
R0utbt+6ods3burqrbvKy3uqttZmnT60Tf/xwZ+UVVCq21cv60lhmdIePVRRReC1G+h0YgAAMBUG
ABpfRA0AM38hoDff/MdKS4zVrl17VdvY5vzC3mbiAX52vcPDE040Bvt7zYBxWMfPXNWLwV8OEHSM
Bv/CIJTcAcAe6Tti33zIXBEiIjf7V0r2nQAnezfAQCDAAOCzwmsAWKCXAna5f/o3G9m/DHANDnpf
JpTsz2z3gNh3+7J/lWD/3IeI6FXmfqG+vtHc0Xu/GyADgP9iD0CEZSd7+/MTEU3MvX8Yf5/hDgA8
BeC/3AGA1wEgIvJhDAD+LbwGAN4NkIhoVmMA8G8MAEREPo4BwL+5A0BYHQTI2wETEc1ODAD+jT0A
REQ+jgHAv0XUAMBBgMG/AiAimqyJ9xkMAP4tLAeAuXwKYMj8QuyLZkz2Wvz2BjTocfpk2V+we/lB
u+zYdfO6Ic5G9lW+2to61N5ORPRL9o3C2js6nAdK4+8zGAD8GwPAhHq6OlRh1tHV028GgeAr9NkX
6rFvA2wHA/vOffZlg+2AYL7UiPkF2rfatOxpwcsFr5t9Rb6uzk4NmMvb0/r7+/TC3Pjsepz35B4K
Dhv2+gY/el+n6WTXYa9boL5BPb3P1UtENKHGxiZeCphe5Q4AHARoshvp/dvXadf+g9q4dYdqGppV
V1vjbNy725rMDaRe1y6dV1lNk/ND1NVWm0GhTxoaVGlJiXr6X6qvu0ONza3OMpX5j7Tom2Wqrm9U
Y0ubHt29rfS8UgUqn2pf1GkNvBxUvdlgj44OK1BXq94+MxS843W3y9n/gbwdMIDJ9PT0MgDQq8Jr
D8AcvxCQeTyvLT8v19lLV7V5wxbnHQD/8MH/09HT53Vg+xYdOHRS2zev0ZoN2/QkN1fff/6Rvl25
TtEXL+n7H5Zo6/4D2rhysT74w4cqrm1RZtwFffTJ37Rt2w5t2LRZB/cd1O4du7X2x9X6Yd0G7du2
QX/841+0a/dOrVz1k9p7XrzzUwPuAMCbAQGYDG8GRONjABiXHQA2rPleR85cUUVdk07v36XPP/tc
f/roIx2IuqAWcyPZuOozffTVEsXcuK7l336tv/7tIy1eu0mP0x5r+ZJv9McP/6q1q1crpySglupn
Wrd2uQ6fua7E2Gh9vegr/e2fi5TwKEWbf16p35mN/7qf12vNDyt0LTbZuYF6Xa/pxAAAYCoMADS+
8BoA5vivAEZGhvQg/q66BoLv3hd/K1pbNu9QXOJj3Tp/Ujt3H1LSozTl5+bo8oVzOrB7v46cvqyk
B7H6+vNP9PPeKCXEXtORwyfV/XxAzbVlSs/KUvTZ49q257CyMrOV9PCeNm9Yo5NXbirj0QMdOnBE
qSmPlZ1XMKMbHwMAgKkwAND43AEgIt4NcDb+DNAaGgouP105j+5p1YoVSskuHjvFHhBo33jj7W8d
PJ574OC7xgAAYCrd3T2Tvh0wA4D/Cq8B4D19MyB79P7zPnMFDa/z5yP7M9uDIAOBBvM/tM3coImI
fqnFZO8f7IGA4+8jGQD8GwPArBR8m03v8+Y3+zuwf2JIRDQx+yBh4v0jA4B/cwcADgIkIvJhDAD+
Lbz2AExxDMBsvBAQEZGfcgeAQCDAAOCzwmsAmGIPAAMAEVFoMQD4t4gaAHgKgIgotNwBgKcA/BcD
QIRlD0YkIpqsifcZDAD+zR0AIuKFgHgK4KX5BXervaPT+VtfIqLXsm9OZh4ojb/PYADwb+G1B2Ae
BgC7XvvOfDav8yfNfE93urYf7S/WrmN42L4F8C9vAzxX2fW/ejfAnl7nHQGJiF5l7hcaGpvMnXD3
a3sCGAD8W3gNAHN8EKBdLlBTrZqaWlVUVOrFyyHnxX3s6fatfYOv1jf+rX+DG/kRk2V/gXY99u9t
u7s6VFpaovbOHrO8/dv8F699r9nOXkf7/Xk3QACT4d0AaXzuAMDrAJgNu/1lxF49qz/+8XfatOe4
+gcGVV9XqyGz8W9pDKg20GBuOC/NL6vCPNoeUE9XuzmtXuXPsnX8yCGdvnjZGQiioy9qx7aN2nvg
kHZt36Oo41FKzSsOfa9CCLkDAC8FDGAyvBcAjS+8BoA5fwog+Oj+wP6d6jMfr5/cqw9++xvt3n9A
P67+VkvX/qTExIf69KPf6uft+7Vnxzp9s2ypfl79gz7/+z908NRZZ/nTp6L000+rdfr8RR09bIaA
3TuUnFPknOf9fWceAwCAqTAA0PjCcgCoqa6auwFgZECbN69Te2+/ln7xiZauWqetG9bp/NUbSki4
p+XLVmrF4q/1t0VfaP+RE0pNT9OaVSt16eIpbd25R2VlZdq7e6e2bF6vQ0cOa8/+Qzp57IAu3UlQ
V0+vx/ecnRgAAEyFAYDG5w4AYXUQ4FwOACNDA7p3L1ZdL4ZU9ixDe3ftU3pqunLz8lRUVKDbN65r
j9nQnzx/RY/T0lVSWqqHD+7qytVoJd6/qzUr1+jBo2zlZqVpYETKSU1W9OWLWvPjTzpz+abzCx/0
/N4zyx0AOAYAwGR4N0AaX1gOAHNzDMAvWXYjPZ5zsN9I8GC/8ez1mMyQuR6vm9tjAOzBh3WBevM/
1PvdwIjIv9l3A7T3D/ZAQAYAsrkDAAcBRkh2L4j9c0AioonZBwkT7zMYAPxbeA0A87QHINwbHDTZ
j0REbuZ+wev+ggHAvzEAEBH5OAYA/+YOABwDQETkwxgA/Ft47QHgGAAiolmNAcC/MQAQEfk4BgD/
FlEDwMxfB4CIyF+5A0AgEGAA8FnuAMC7ARIR+TAGAP8WXgMAewCIiGY1dwDgKQD/FVEDAMcAEBGF
FgOAf2MPABGRj2MA8G8MAEREPo4BwL+F1wDAQYBERLMaA4B/Yw8AEZGPYwDwb+4AwAsBEc0g+29u
oXsfr5fXdaL3KwYA/xZeA8DYUwA11VXsAaD3Jvvvzb7Nand3t3p6euY9+33t95/4795+bd8CdiGv
l71Njr9O9P7FAODfGACIZpjd89TZ2el53nw02fe3twd7g1uo24MdShby+9P0YgDwb+4AEFYHATIA
0PuU/XdnH+1ao6OjThO5p3s1domxj6/zurxX9vvbQWD89bIb4N7e3mmvZzyv80PN3kbtDX78daL3
LwYA/xaWewA4BoDep9wBwN3o2Y+PkxPU0v1CdZUlaup8PrZZfZO9bG11hXr6X2pk8IVuXDilk+ej
VV9fr9LSyrFLebPfy22qAWD8ZT0zdwTZjx7q2LGTKqlqcJZ5G891TMjeudgb/PjrRO9fDAD+jQGA
aIZNHACsFV/8UesPXNC92Kt6mJatm5fOKyEpWSWlpcrLydWzZwUqKKowlxzVpQsXNDA8ojsXT+j4
2WuKj72jk1FROn8hWmkP43T7XpJamut06uQxPS0sVcy1S8oprHz1/WwzGQCszsYKffPFV7p88bIe
ZeQrO/W+zp67qNy8PDW2tKqstEj5mak6e/acOnr7X/vek8UAEB4xAPi3sBwAJnsKgAGAFiKvASD6
wjHt3btPP23apFUrluiPf/5Qn33+ubZt36HPPvunvv1+uVJyS/W8tUY34x44yxzcvk1tg86nqirM
1Zrvv9EHv/+9/vr3z3TixEl9/vEf9MXiJVr/00bVtffM2gBg19Pf06mEe3d05tRxXYt9oBMHduo3
v/21Nu7Yq2OHDyrq8H59/NGH+ujDv+j8rYQp12ljAAiPGAD8W1gOAOwBoPcprwHg1MkjCtTX6+M/
/1bbdu/VN18v1sWrcTq+f7s2bNqir83X5p+0ch8/UHaB3RMgpT+8rU2btmv/rn06fvys9u/YosVL
vteO3Yd0cOcOLfrsC339/VKdORMt+11Gxza0tpkNAFJbfYX27Nquc2ePa/vWrVq/eq0+/uTviknO
0MYfFisuKUPbN6zS2rXrlFvw+t6HyWIACI8YAPybOwBExAsBMQDQQjRxALC1tbU4h/W1tzZr4OWA
CnKyVNvQor5e++dxPWpva7MHADg3hsGhYWcZqyg/U6lZTzX4clDP+/rUUF2mpwUl6u/rUVZmlqrr
GtTR0anhse/jNpMBwGY11JQqMTFJg8OjaqyrVEZWrvoGBtXV3qZBc5G+zmZlpmeqf2DIcx0TYwAI
jxgA/Js7AITHHgAGAHoPcwcAyw4BtiDvI/tdv1zu9c+nZez7uMtNNgDYG7XlXvZthcJrea/sDX78
daL3LwYA/8YAQDTD7L87+3f4doO7ENkX+5nsdQAW8nq5dyjcHt/vGAD8W3gNAFMcA2Dv8HgdAJrv
7L83uxFub29XR0fHvGe/r93gTvx3b7+2N+qFuF7u97S3SW6P73cMAP7NHQB4MyCiGWT/zQ0NDS1Y
k/2bX+jr5XWd6P3KHQACgQADgM+KqAGApwCIiEKLPQD+jQGAiMjHMQD4t4gaAHgKgIgotBgA/Ft4
DQAcBEhENKsxAPg39gAQEfk4BgD/FlEDAMcAEBGFFgOAf3MHgIh4ISD2ABARhRYDgH8LrwGAYwCI
iGY1BgD/5g4AYXUQ4GRvB8wAQEQUWgwA/i0sBwCOASAimp0YAPybOwBExFMADABERKHFAODfImoA
4CkAIqLQYgDwb2E5AHAMABHR7MQA4N/cAYBjAIiIfBgDgH8Lrz0AvBAQEdGsxgDg3xgAiIh8HAOA
f2MAICLycQwA/s0dACLiGAAOAiQiCi0GAP8WXgMAewCIiGY1BgD/xgBAROTjGAD8GwMAEZGPYwDw
bxE1AHAMABFRaLkDQCAQYADwWeE1AHAQIBHRrMYeAP/GHgAiIh/HAODf3AGA1wEgIvJhDAD+LbwG
AJ4CICKa1RgA/BsDABGRj2MA8G/uABBWBwHydsBERLMTA4B/i7g9ABwDQEQ0/RgA/FvEDQClpaXO
5/aAQCIientDQ0Nqbm5WbW0tA4DPCssBYLKnAOwj/6KiImcIsE8F2MrKyibNvUwoea3Hzevyb8tr
HePzWmayvJafmNdyk+W1/MS8lvPKa1mvvJb1ymvZiXkt55XXshPzWm6yvJafmNdyk+W1/Pi8lnlb
XusYn9cyb8trHW5el58qr/W4eV1+Onmty+Z12ek0m+uyzea6bO+yvsLCQmdDYDcIE+9XKXKLqAHA
/YG8TiciIu/sgyeeOvVf7gAQEQcBEhER0fQKrz0AU7wQEBEREU0vBgAiIiIfFpbHADAAEBERzazw
OgaAPQBERESzEgMAERGRD2MAICIi8mEMAERERD4svAYADgIkIiKaldgDQERE5MMYAIiIiHyYOwDw
QkBEREQ+Kiz3AFRWlDtX3OutLYmIiGjq7FtBNzU1qaKiIjwOAmxu61JZSfGrt7mc+NaX75r7tphe
54Wau67ZWuf7vj6bn9c3G+t839dnm8112eZifV6nv2uzvT6i9y37b9y+FXR9fb16e3s9N9iz3YwG
gJb2Lj3v7fFcMREREU2/7u5uJ6/z5qIZDwDdZgVeKyYiIqL3NwYAIiIiH8YAQERE5MMYAIiIiHwY
AwAREZEPYwAgIiLyYQwAREREPowBgIiIyIfNaABo6+hSb09wJURERBQ+PTfb7/p3HQBqmrtV39rt
TBBEREQUPtntd2Vjt4qmOwBciL4Z1TIgFTc8V2G9ySxIRERE4VeR2Y6XNPartmNo6gHg1NlLF3sl
Z1ogIiKi8K62fUitfZp6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhbv/rV/wdokHOkdBrJ
FwAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	<#
	$regkeyRootCSN = "HKLM:\Software\CSN_Package"
	try
	{
		[string]$klnm = $klantnaam_textbox1.text
		[string]$ldir = $logfoldertarget_textbox2.text
		[string]$sdir = $packacgedir_textbox3.text
		
		$vvcld = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigLogDir -ErrorAction Stop
		$vvck = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigKlant -ErrorAction Stop
		$vvcsd = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigSourceDir -ErrorAction Stop
		$klantnaam_textbox1.text = $vvck.ConfigKlant
		$logfoldertarget_textbox2.text = $vvcld.ConfigLogDir
		$packacgedir_textbox3.text = $vvcsd.ConfigSourceDir
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Je hebt nog geen Klantnaam, Log en/of Source Dir opgegeven.. Ga naar Config', 'Configureren') # Casting the method to [void] suppresses the output. 
	}
	#>
	Set-Location $PSScriptRoot
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername  -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	
}


$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }

	
	$WinGetID = $wid
			$regApp1 = $WinGetID.Split(".")[1]
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
	
		$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	08/03/2023 12:15
	 Created by:   	Rink Turksma
	 Organization: 	CSN Groep B.V.
	 Filename:     	Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
$WinGetID = "!!WinGetID!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"

#Dyn vars
$regApp1 = $WinGetID.Split(".")[1]
$logfile = $(Join-Path $logdir  "$WinGetID$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget Is niet geinstalleerd" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
		$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
		$installfile = $installfile.Replace('!!logdir!!', $logdir)
		$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
		$installfile = $installfile.Replace('!!versie!!', $versie)
		if ($wlo -ne $null)
		{
		$installfile = $installfile.Replace('!!locale!!', $wlo)
		$installfile = $installfile.Replace("!!localeSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
		if ($wve -ne $null)
		{
		$installfile = $installfile.Replace('!!versionWinget!!', $wve)
		$installfile = $installfile.Replace("!!versionSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
	
	
	if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
		}
	
		
		$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
		$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
	
	
		Set-Location $PSScriptRoot
		
		
		& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
		
		Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
		$winget_output_textbox3.Text = "`nNew intunewin package created: `r`n"
	
		$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
		$winget_output_textbox3.AppendText("`r`n")
		$winget_output_textbox3.AppendText("Version: $Versie `r`n")
		$winget_output_textbox3.AppendText("Install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
		$winget_output_textbox3.AppendText("un-install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
		$winget_output_textbox3.AppendText("Detection registry is: `r`n")
		$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
		$regkeyApp = "$regkeyRoot$regApp1\"
		$regkeyApp
		$winget_output_textbox3.AppendText("$regkeyApp `r`n")
		$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
		$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName = $wingetID
			Publisher = $config_customername_textbox.Text
			AppVersion = $versie;
			reglocation = $regkeyApp
			regValue = 'Versie'
			installCMD = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD = "powershell -executionpolicy bypass -file uninstall.ps1"			
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
	}
	
	

$winget_WingetID_textbox1_TextChanged={
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null) { #Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage2_Click={
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click={
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click={
	#TODO: Place custom script here
	
	#$showurl = winget show $wgid
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Expecting Winget in: C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}

		$wgid = $winget_WingetID_textbox1.text
		try
		{
			$showurl = & $winget_exe show $wgid
			foreach ($l in $showurl)
			{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
			}
		}
	catch
	{
		$showurl = winget show $wgid
		foreach ($l in $showurl)
		{
			if ($l -like "*Download Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
		
	}
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_save_button_Click={
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text

	
	$config_customerinfo += @([config_customerinfo]@{
			customername =  $c_customername
			logfoldertarget   = $c_logfoldertarget
			packagefolder	  = $c_packagefolder
			tenanturl   = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_import_csv = Import-Csv config_customerinfo.csv -ErrorAction Stop
	$config_listbox = $null;
	foreach ($cis in $config_import_csv)
	{
		Update-ListBox $config_listbox $cis.customername -Append
	}
	
	
	
}

$tabcontrol1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click={
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click={
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder;  $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
	}
	$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
	
	[string]$exe_org_path = $exe_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
		$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
		$exe_panel1.Enabled = $true
		$exe_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
	}
	$exe_open_sourcedir_button1.Enabled = $true
	$exe_open_sourcedir_button1.Visible = $true
}

$exe_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage5_Click={
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click={
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file  "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" 
	}
	

}

$exe_radiobuttonUninstallEXEPath_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click={
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click={
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click={
	#TODO: Place custom script here


	
	$exe_installFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	

	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information';  remove-item $regkeyApp  }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$exe_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	
}

$msi_buttonOpenMSIFile_Click={
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click={
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
	}
	$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
	[string]$msi_org_path = $msi_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nMSI file copy failed `r`n")
		$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
		$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
		$msi_panel1.Enabled = $true
		$msi_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
	}
	$appNaam = $msipnaam
	$versie = $msiversie
	$MSIbestand = $msi_openfiledialog1.SafeFileName
	#klant variabelen
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	#Dyn vars
	$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
	$filenaamMSILog = $appNaam + $versie + "MSI"
	$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
	$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
	$msi_OpenSourceDir_button1.Enabled = $true
	$msi_OpenSourceDir_button1.Visible = $true
}

$labelInstallParametersadj_Click={
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click={
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'

	$msi_installFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
    write-host $startPMSI
	$msilog = get-content $logfileMSI
    if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
    Else {
    foreach ($ml in $msilog) {
    if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*"){ 
    $msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
    }
    }
    write-host "Product succesvol geinstalleerd" -ForegroundColor yellow -BackgroundColor black
    write-host "Mogelijke uninstall commando is:" -ForegroundColor yellow -BackgroundColor black
    write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
    }

	
	$excode = 0
}
catch
{
	Write-Host "Installatie mislukt" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
    write-host "Zie log file v.d. MSI waarom dit niet werkt:" -ForegroundColor Red -BackgroundColor Blue
    write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "Zie wat dit betekent: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$msi_install_par_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	
}

$msi_OpenSourceDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click={
	#TODO: Place custom script here
	$msi_uninstallFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Lentis\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
    write-host $startPMSI
	write-host "Unistall uitevoerd" -ForegroundColor yellow -BackgroundColor black
   

	
	$excode = 0
}
catch
{
	Write-Host "Deinstallatie mislukt" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
	
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	
}

$msi_button4TestUninstallPowers_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click={
	#TODO: Place custom script here
	Clear-Host
}

$tabpage1_Click={
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click={
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Lentis"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click={
	#TODO: Place custom script here
	$config_csv_openfiledialog1.ShowDialog()
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	#Write-Host $ConfigCSVImport
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$itwnffilepath = $filepath + $itwnf
	$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
	$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
	$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
	$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
	$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
	$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
	$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
	$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD

}

$upload_IntuneWinFile_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click={
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IntuneWin32App -Force }

Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "20H2"
	write-host "We will first check if there are any apps already availeble in Intune with the same DisplayName" -ForegroundColor Green ; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green ; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be availeble in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
	
	if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		
		foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
		{
			write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
			$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
			$evtvversie = $vorigeversie.DisplayVersion
			
			if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
			else
			{
				write-host ""; Write-host "`r`n"; Write-host "`r`n"
				$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
					try
					{
						Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
					}
					catch
					{
						Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
					}
				}
			}
		}
		
		foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
		{
			$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
			$niksdoen = $response -eq "q"
			if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
			else
			{
				write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
				Write-host "We will fix superseedence for:" -ForegroundColor Green
				$vorigeversie.displayVersion
				
				$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
				$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
				if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
				Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
			}
		}
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE? ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}

$upload_dep_textbox1_TextChanged={
	#TODO: Place custom script here
	
}





$config_panel_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged={
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged={
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername 
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget ; 
			$config_packagefolder_textbox.text = $cis.packagefolder ; 
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click={
	#TODO: Place custom script here
	$config_customername_textbox.text = "'Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click={
	#TODO: Place custom script here
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_search_string = $tools_search_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe search $tools_winget_search_string
	
	}
	catch
	{
		$tools_winget_id = winget search $tools_winget_search_string
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_button_Click={
	#TODO: Place custom script here
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_show_winget.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string
		
	}
	catch
	{
		$tools_winget_id = winget show $tools_winget_show_string
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged={
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click={
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string --versions
		
	}
	catch
	{
		$tools_winget_id = winget show $tools_winget_show_string --versions
		
		
	}
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="False">1688</Line>
    <Line Disabled="False">2568</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>