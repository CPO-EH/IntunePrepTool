<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAGdYAABnWARjRyu0AAD0pSURBVHhe7d1pV5Rpvu/5Wr3WeXheQb+A7tXP
ztM+fZ72tPvss86uvU/tqqzMqsrMqpwq0xzUdJ4AFRxxAmVQAVHBCcQBFJnneRTFGZB5nsdfX9cN
YZJmmInmXRi3fD9rfRcxxx2Bcv0jCCJ+AwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgDfxH/7D//ThmvWbYhMvXI09mZBMRERE
Hu7shbTYP7z3fuzCMv9qX379XVJDy4Dqng2q5kkfERERebiG1mEV1T7UwjL/asmXr8febRtRbs1j
5REREZHyap+ooO7pG5Vvzpvv5/Cl5Jz3Da87v+6Js+12Pa993PPLA0D82Uuxja1DL640v9ZugL2g
ha8vdvuOJyIienezi2lu1SNlFN19o3LMeW+XNPk97udrVHbFA90pb/ZznKl4IX/HmTJL75ltN7fB
bH/1g843GADM5JBf/cB8faKc6lbl1LQrr65DBc4w8MMdRERE9C5WWP9MN/PrdcNkF+XXKb2gQVdu
V+hGXp3Zbxdm/6fz1y1T6p0qXc2qdnanF9oaFr6a0yz66tv94jhz+rTsamVXPlSB2f4lDwB324YX
nkJ4orzqZuXe61FBWa5aGyPVUbtdDTc/VnZJtQobnps7pmXhtK/bMxU1tqmo4ZfPb09XbLLfBH/H
Fy7hMoiIiN4ku07ZRdU+ks8zD4Zfq+rHSsmsVHb5A/PA+Zl5MG0ePJvsGphd+Vi3y5pN9lG+WajN
Yb7jbXbNu5Zdq5tmiLDH5S663GyzLXcqHjrr421z2YuPs9nT3zIDh30Gwa6R1Q+7XnMAaGxVUXaB
Si+lq+jSYQ2W/3+ayPqfdf/0f1RmYaUKG58rp+K+MwT4FnO7wXa/vUJnt/3aYC5nYQG3++1iXlD7
WLfyK3WruGHh+NYXlzN/ulYV3zWnqzOnK6hSel6FsiqazWF26LDX8cy5nKKGZ8osqVNerbmzXvqm
ERER/dpeDADm0XRetVlgF5pfpM3aVfdDi493qvrpAFBQ26LM0vu6eadYRaW1phrdySvTjdwaFZnL
ezEAmEXcDgD2WQS7oNuF3R6eYy73RlapbueU6UxKjrILKpSSUWjWwfnT/KoBoOn5iLPA5t7vVFNK
qno/+6tyvvy/1H75N+o7/RtVh/9GmUVmQ80ifS2zSLlVD3WrsNr5eiOrQNdzKs0Nf6R8s8jnVjUr
p/yuOb5m/gZU39edsiZll9UrNSNf1+4UKqOwVndK6s1xD81Xs5ibiSmnwpynoMbckMdKN0PIpetZ
5obcd4YBO+kU1D5Shhkg8msemW3IN4c9M3fc/GBARETkVsWNLbJP3+eaxTzfLuKmwroWsyY9NOtd
lW6ahftGbrWzgOfZBd4c5zudXbBT71SbNe2huawWZwgoamgzj+obVVFZp1vZxUpNz1d1Va2uZVWY
B7ntzmmc05nTX8utc57et+e1r8Gb//X7M7N+FunZ0xY1NT3QvXsPdObKbeeBs++1evb0t4ubnKGl
2DzArnnU/XoDQOHDHhXGxinz//jfdebzv+hW6kZdjV+juMj1yiptMDfiqW5kl+r6nXxdvV2oNLOY
p5nF+IaZSq5nl5mJp9FZnFMz8sxCX2RuXLGupmfp4rXb5vhipd0qMOcvU9rtXF1JzzWXU6CLaem6
eivPnCfX3KnlSjNTTl7VPd3Mr1J6TqnS8yrNdRSYzOBgBoBrZvc1M0UxABAR0T8i3wBgH9Hbxd1W
crdDqZnlys7KNYt3jWqqa3U1LUM3zMJe1Pj8xensQu4MAJWPnAXaHmYHgIzie7rjPLjN1YUbhbqd
meMMAPZyfed1HmQvDAB2t/OMhFnc7bPfF64XqKSkXG0tZttuZyvZXIZ9htw+0LbZ098uufd6A0DC
+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
8Kh5hD5tTj+qsf5Ohe7coTWbd2nMbJY9vc/Tu5W6fP32jxZ0e3vtfbZYV1eX87Wy4LZySuafqfGd
3ma/1wwA71YMAIA3BOwAYBe3lcz+rf/PDQC+4cIfu8i7ce/NzU6purpCnT3+f5DbP1VcqpFXnNZ+
rxkA3q0YAABvCLgBwG7QiyswG7MSswtrX1+f33fKs/vtaezfz9vTvXxe29jYuDnup4e/fsPmH8aM
JsbHfnqcuW47pPzk8FdkT/vy9tpBxt6Ol28jeTsGAMAbAm4AsNlHhHZx8HelKyG7KNoF8+cWxtf5
RgVyPPp/92IAALwhIAcAm92gldwvPSq2x/s7n9fyd9vI29nvKwMAEPgCdgAgIm/GAAB4AwMAEbka
AwDgDQwARORqDACANzAAEJGrMQAA3sAAQESuxgAAeAMDABG5GgMA4A0MAETkagwAgDcwABCRqzEA
AN7AAEBErsYAAHgDAwARuRoDAOANDABE5GoMAIA3MAAQkasxAADewABARK7GAAB4AwMAEbkaAwDg
DQwARORqDACANzAAEJGrMQAA3sAAQESuxgAAeAMDABG5GgMA4A0MAETkagwAgDcwABCRqzEAAN7A
AEBErsYAAHgDAwARuRoDAOANDABE5GoMAIA3MAAQkasxAADewABARK7GAAB4AwMAEbkaAwDgDQwA
RORqDACANzAAEJGrMQAA3sAAQESuxgAAeAMDABG5GgMA4A0MAETkagwAgDcwABCRqzEAAN7AAEBE
rsYAAHgDAwARuRoDAOANDABE5GoMAIA3MAAQkasxAADewABARK7GAAB4AwMAEbkaAwDgDQwARORq
DACANzAAEJGrMQAA3sAAQESuxgAAeAMDABG5GgMA4A0MAETkagwAgDcwABCRqzEAAN7AAEBErsYA
AHgDAwARuRoDAOANDABE5GoMAIA3MAAQkasxAADewABARK7GAAB4AwMAEbkaAwDgDQwARORqDACA
NzAAEJGrMQAA3sAAQESuxgAAeAMDABG5GgMA4A0MAETkagwAgDcwABCRqzEAAN7AAEBErsYAAHgD
AwARuRoDAOANDABE5GoMAIA3MAAQkasxAADewABARK7GAAB4AwMAEbkaAwDgDQwARORqDACANzAA
EJGrMQAA3sAAQESuxgAAeAMDABG5GgMA4A0MAETkagwAgDcwABCRqzEAAN7AAEBErsYAAHgDAwAR
uRoDAOANDABE5GoMAIA3MAAQkasxAADewABARK7GAAB4AwMAEbkaAwDgDQwARORqDACANzAAEJGr
MQAA3sAAQESuxgAAeAMDABG5GgMA4A0MAETkagwAgDcwABCRqzEAAN7AAEBErsYAAHgDAwARuRoD
AOANDABE5GoMAIA3MAAQkasxAADewABARK7GAAB4AwMAEbkaAwDgDQwARORqDACANzAAEJGrMQAA
3sAAQESuxgAAeAMDABG5GgMA4A0MAETkagwAgDcwABCRqzEAAN7AAEBErsYAAHgDAwARuRoDAOAN
DABE5GoMAIA3MAAQkasxAADewABARK7GAAB4AwMAEbkaAwDgDQwARORqDACANzAAEJGrMQAA3sAA
QESuxgAAeAMDABG5GgMA4A0MAETkagwAgDcwABCRqzEAAN7AAEBErsYAAHgDAwARuRoDAOANDABE
5GoMAIA3MAAQkasxAADewABARK7GAAB4AwMAEbkaAwDgDQwARORqDACANzAAEJGrMQAA3sAAQESu
xgAAeAMDABG5GgMA4A0MAETkagwAgDcwABCRqzEAAN7AAEBErsYAAHgDAwARuRoDAOANDABE5GoM
AIA3MAAQkasxAADewABARK5mf5j09PZpmAEACGj2/2p7RycDABG5k/1hMjg4pJbW5+rs7FZnFxEF
Ys+fd6iru4cBgIjcyz61ODExofHxcSIK4Oz/Vd//WwYAIiKiFdiyDgCzM9PO9EFERERvt2UZABpa
htTePaCR4SHnComIiOjtNTg46Hehf1W/agDo6BnU4EC/+vuJiIjobedvoX9Vv3oAsBfg74KJiIgo
cGMAICIiWoExABAREa3AGACIiIhWYAwAREREKzAGACIiohUYAwAREdEKjAGAiIhoBcYAQEREtAL7
VQNAZ++gRobmL4SIiIi8k12/n73JANDYOqRH7UNq6Rp0LoCIiIi8k12/m58P6e7zJQ4A5y9dje2a
kJrMGe6aqcFODkREROS97Dp+r2NMT3unfnkAiEtMThqakzMtEBERkbezi3/nsH55AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAMBvfvOb3/z/k1zgnTm49QwAAAAASUVORK5CYII=</Preview>
  <Form>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
fOt9/H9bp+rlx4MBAA==</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	<#
	$regkeyRootCSN = "HKLM:\Software\CSN_Package"
	try
	{
		[string]$klnm = $klantnaam_textbox1.text
		[string]$ldir = $logfoldertarget_textbox2.text
		[string]$sdir = $packacgedir_textbox3.text
		
		$vvcld = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigLogDir -ErrorAction Stop
		$vvck = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigKlant -ErrorAction Stop
		$vvcsd = Get-ItemProperty -Path $regkeyRootCSN -Name ConfigSourceDir -ErrorAction Stop
		$klantnaam_textbox1.text = $vvck.ConfigKlant
		$logfoldertarget_textbox2.text = $vvcld.ConfigLogDir
		$packacgedir_textbox3.text = $vvcsd.ConfigSourceDir
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Je hebt nog geen Klantnaam, Log en/of Source Dir opgegeven.. Ga naar Config', 'Configureren') # Casting the method to [void] suppresses the output. 
	}
	#>
	Set-Location $PSScriptRoot
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername  -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
		
	}
	
	
}


$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }

	
	$WinGetID = $wid
			$regApp1 = $WinGetID.Split(".")[1]
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
	
		$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	08/03/2023 12:15
	 Created by:   	Rink Turksma
	 Organization: 	CSN Groep B.V.
	 Filename:     	Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
$WinGetID = "!!WinGetID!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"

#Dyn vars
$regApp1 = $WinGetID.Split(".")[1]
$logfile = $(Join-Path $logdir  "$WinGetID$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget Is niet geinstalleerd" }

try
{
	
	$install = "!!WingetCommand!!"
	if ($install -like "!!doe*")
	{
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale
		}
		if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		}
		if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
		{
			& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		}
	}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
		$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
		$installfile = $installfile.Replace('!!logdir!!', $logdir)
		$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
		$installfile = $installfile.Replace('!!versie!!', $versie)
		if ($wlo -ne $null)
		{
		$installfile = $installfile.Replace('!!locale!!', $wlo)
		$installfile = $installfile.Replace("!!localeSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
		if ($wve -ne $null)
		{
		$installfile = $installfile.Replace('!!versionWinget!!', $wve)
		$installfile = $installfile.Replace("!!versionSelected!!", $true)
		} else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
	
	
	if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
		}
	
		
		$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
		$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
		$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
	
	
		Set-Location $PSScriptRoot
		
		
		& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
		
		Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
		$winget_output_textbox3.Text = "`nNew intunewin package created: `r`n"
	
		$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
		$winget_output_textbox3.AppendText("`r`n")
		$winget_output_textbox3.AppendText("Version: $Versie `r`n")
		$winget_output_textbox3.AppendText("Install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
		$winget_output_textbox3.AppendText("un-install command is: `r`n")
		$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
		$winget_output_textbox3.AppendText("Detection registry is: `r`n")
		$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
		$regkeyApp = "$regkeyRoot$regApp1\"
		$regkeyApp
		$winget_output_textbox3.AppendText("$regkeyApp `r`n")
		$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
		$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
		$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
		$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
		
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName = $wingetID
			Publisher = $config_customername_textbox.Text
			AppVersion = $versie;
			reglocation = $regkeyApp
			regValue = 'Versie'
			installCMD = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD = "powershell -executionpolicy bypass -file uninstall.ps1"			
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
	}
	
	

$winget_WingetID_textbox1_TextChanged={
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null) { #Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage2_Click={
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click={
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click={
	#TODO: Place custom script here
	
	#$showurl = winget show $wgid
	
	$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Expecting Winget in: C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}

		$wgid = $winget_WingetID_textbox1.text
	try
	{
		$showurl = & $winget_exe show $wgid
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
	}
	catch
	{
		
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	}
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_save_button_Click={
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text

	
	$config_customerinfo += @([config_customerinfo]@{
			customername =  $c_customername
			logfoldertarget   = $c_logfoldertarget
			packagefolder	  = $c_packagefolder
			tenanturl   = $c_tenanturl;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tabcontrol1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click={
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click={
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder;  $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
	}
	$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
	
	[string]$exe_org_path = $exe_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
		$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
		$exe_panel1.Enabled = $true
		$exe_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
	}
	$exe_open_sourcedir_button1.Enabled = $true
	$exe_open_sourcedir_button1.Visible = $true
}

$exe_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tabpage5_Click={
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click={
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file  "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" 
	}
	

}

$exe_radiobuttonUninstallEXEPath_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		
	}
}

$exe_parsUnInstall_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click={
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click={
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click={
	#TODO: Place custom script here


	
	$exe_installFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	

	
	
	
	$exe_installFile = $exe_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!logdir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!versie!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$exe_uninstallFile = @'
[CmdletBinding()]
Param ()
#App Parameters
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$EXEbestand = "!!EXEBestand!!"
$EXEparameters = "!!EXEPARMS!!" ##CHeck EXE PARMS.. 
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;
#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Start-Process -FilePath $EXEbestand -ArgumentList $EXEparameters -ErrorAction Stop -wait
	$excode = 0;
	
}
catch
{
	$excode = 1;
	
}

<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information';  remove-item $regkeyApp  }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
		
	}
	else
	{
		$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	}
	
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!versie!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEBestand!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NIET created `r`n")
	}
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$exe_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click={
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click={
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
	}
	if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
	{
		
		New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
	}
	$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
	[string]$msi_org_path = $msi_openfiledialog1.FileNames
	try
	{
		Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source" -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
		$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
		$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
		$msi_panel1.Enabled = $true
		$msi_panel1.Visible = $true
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
	}
	$appNaam = $msipnaam
	$versie = $msiversie
	$MSIbestand = $msi_openfiledialog1.SafeFileName
	#klant variabelen
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	#Dyn vars
	$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
	$filenaamMSILog = $appNaam + $versie + "MSI"
	$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
	$msi_install_par_textbox3.Text = "msiexec /qn, /l*v  $logfileMSI /i $MSIbestand"
	$msi_OpenSourceDir_button1.Enabled = $true
	$msi_OpenSourceDir_button1.Visible = $true
}

$labelInstallParametersadj_Click={
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click={
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'

	$msi_installFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
    write-host $startPMSI
	$msilog = get-content $logfileMSI
    if ($msilog -eq $null) { write-error "Kan MSI log niet uitlezen.. Gebruik: /l*v c:\blabla\MSILog.txt in msiexec commando" }
    Else {
    foreach ($ml in $msilog) {
    if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*"){ 
    $msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
    }
    }
    write-host "Product installation success" -ForegroundColor yellow -BackgroundColor black
    write-host "Possible uninstall command is:" -ForegroundColor yellow -BackgroundColor black
    write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green -BackgroundColor DarkBlue
    }

	
	$excode = 0
}
catch
{
	Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
    write-host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    write-host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	Write-Host "See what this meens: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$msi_install_par_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click={
	#TODO: Place custom script here
	$tools_Output_textbox1.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_Output_textbox1.AppendText("`r`n")
		$tools_Output_textbox1.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_Output_textbox1.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_Output_textbox1.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_Output_textbox1.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click={
	#TODO: Place custom script here
	$msi_uninstallFile = @'
[CmdletBinding()]
Param ()
$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
$MSIbestand = '"' + "!!MSIBestand!!" + '"'
$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Maak log directory aan in programdata indien nodig.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Maakt de Registry Root dictory aan indien nodig
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Maakt de applicatie Key aan in de Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functies
Hier dus nog geen script uitvoering doen
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}


<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
    write-host $startPMSI
	write-host "Unistall done!" -ForegroundColor yellow -BackgroundColor black
   

	
	$excode = 0
}
catch
{
	Write-Host "Uninstall failed" -ForegroundColor Red -BackgroundColor Blue
    $startPMSI
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun
'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1 + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
	
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	
}

$msi_button4TestUninstallPowers_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click={
	#TODO: Place custom script here
	Clear-Host
}

$tabpage1_Click={
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click={
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click={
	#TODO: Place custom script here
	$config_csv_openfiledialog1.ShowDialog()
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	#Write-Host $ConfigCSVImport
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$itwnffilepath = $filepath + $itwnf
	$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
	$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
	$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
	$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
	$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
	$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
	$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
	$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD

}

$upload_IntuneWinFile_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click={
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IntuneWin32App -Force }

Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "20H2"
	write-host "We will first check if there are any apps already availeble in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be availeble in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE? ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click={
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}

$upload_dep_textbox1_TextChanged={
	#TODO: Place custom script here
	
}





$config_panel_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged={
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged={
	#TODO: Place custom script here
	$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername 
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget ; 
			$config_packagefolder_textbox.text = $cis.packagefolder ; 
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
		}
	}
	
}



$config_new_button_Click={
	#TODO: Place custom script here
	$config_customername_textbox.text = "'Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
}

$tools_winget_search_button_Click={
	#TODO: Place custom script here
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_search_string = $tools_search_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe search $tools_winget_search_string
	
	}
	catch
	{
		$tools_winget_id = winget search $tools_winget_search_string
		
		
	}
	#>
	$tools_winget_search_string = $tools_search_winget_textbox.text
	$tools_winget_id = winget search $tools_winget_search_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_button_Click={
	#TODO: Place custom script here
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged={
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged={
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	try
	{
		$tools_winget_id = & $winget_exe show $tools_winget_show_string --versions
		
	}
	catch
	{
	#>
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
		
		
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click={
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click={
	#TODO: Place custom script here
	
}

$deP_label3_Click={
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click={
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged={
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged={
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged={
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click={
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkName\$weblinkVersion\Output\$weblinkName.intunewin"
	
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkName.intunewin"
			DisplayName   = $weblinkName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click={
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
	
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click={
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click={
	#TODO: Place custom script here
$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>


$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile ="!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$Name$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$Name"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{

	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun



	
	
'@
$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>


$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile ="!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$Name$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$Name"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile
#Stelt het script uitvoerpad in op locatie root van het script.
Set-Location $PSScriptRoot
<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{

	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
Write-EventLog -LogName 'Windows Powershell' -Source 'Powershell' -EntryType $warning -EventId 800 -Message $lastRun



	
	
'@

	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkName\$weblinkVersion\source\install.ps1" -force
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged={
	#TODO: Place custom script here
	
}

$weblink_test_uninstall_button1_Click={
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkName\$weblinkVersion\source\uninstall.ps1"
	}
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">762</Line>
    <Line Disabled="False">1729</Line>
    <Line Disabled="False">2668</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>