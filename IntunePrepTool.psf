<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAHrrSURBVHhe7f1ncxxJlq6L7t9y7PyK++WYnbvN
zrW9bc/pmT2yp9VUT0+r6u7SVWSxqLUmQQCE1lprrbXWWmsgobXme9fyRJAJMEkCJEgQzPdhPZWI
SI/IyMgI9+XhHh7/jRBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghnyB//X/+n/9fpJdvcKSnd0Ckh5cfpZRS
Sk+hWpY/euIZ+X/+n/9H5F4Z/2r+7//7/5taWN2G1pElNA/OoWmAUkoppadRLcc7xlcQFJmAvWL+
1fgGhER2jC2jsKEPRcZ+SimllB5JKT8b+1HSPHgoi5sGnM535lHS6jYUNw2hsWfizQGAt19wZMfo
klmwtFk/ZATFLRMoaZ1AadskSltGzPxS8/5hHXIyz8GWN7xPKaWUnjJLpKBOK25GSkEjUgpfobyX
WtiEgtqefWnTS1qRUdpmTC9usc8X04okbV2vvFppm5Ahae3pW2UdL9KmStrixgGUtY6grmP4zQGA
l29gZOf4iiwwLI6iurUL9Y2VqK4pRmV1McobWlHeNoZyeb9cVqpWtI+hok3/1nmiw986v0wChjIp
5J+n2Xs177XoTuqXnTXwYjnrlVJKKT2FVraPIq+6WwriBlO451V3Ib+mG/nyt1H+tuZlSsEdl1Uj
BXmLSavz4rMqEZtRjpj0UiTn18kyuqymbZG0tXtpu5Fb1YkESRuTUSFpy5BaUG//HDFVgoCcyk5U
d02gvnPkcAFAz9S6bLwU8p3z6Cl7jOW6SxjI/COqvP4/qCzLQFXXNPIqWkxBXdk+gsLqVinEB1HV
MWasaJXCXr58dcc4qtoGkVlQjrTCGinsNf2o0aST5Sta+pGalY+sshZZbhjVnRPmtbypBznlLWba
Wi+llFJ6GqyRQregtlfKtjZzlVvLyLwaqeVLwZ0mtfV8eU/nqQVSWCfk1CGvqkuCh1FklrcjOS0f
2bnFKCquQGxyHgob9KrCMPIlqEjIqTfBg15dz5FlQqNSkZNXipS0XITG58rnDZv1Zst6NAip651C
Y/fY4ZoABma3UNszhdreGfRl/glTpT+hM/8Gctz+L9S09ZiV5ZXVSsFegYyiKiRnFSGruB7FtZ3I
L69Del4Zskvr5f0ypMnfGWJWSa2kqUF2cTVSNH2JRDv55ShulJ1Q2yLv1SJb5uWW1UuaGuSUVJkA
oL5/BnU9k5RSSumpsaHPhpLGAeRUdJir5IX1AwiPTUe+lIt5+SXydyZKpECvkAK/qK4PSfkNEgj0
SPAwgazyTqSm5cA/MAqxsclITM1HcZNeNZf1SNrk/EYUSgChFW29vO8XloT62jqkpGYhMrXErKOi
bRS5EhwU1fehaXAWzb2H7AMwPL+LhoEFNHZ0oDfrKyn8b6E+6TsURv8gK5pHY/8UCivrkV/VIoV+
qym8C6qakCVfLENq+0W1HSiqakRabglytEAvqpGAYlIK+lYUVTchLb9CCvhqEyiUNvWhvLEDWUXV
Uvg3iLXIKZVIqFzWWd2JpiH9vGlKKaX01NgshW6ZFPB5Vd2o6Z4yTeoRCTlIySiQ2n0eopLyUSkF
dXXXJEobB5FS0ITi+n572pYRhEqAEJeUjej4DEQlF0q6KVR3SjkqQYW2+5fIMnW90yZtUGQqgqPT
ERSRhJi0EtT3zZhKvAYJmr5tdBGtA7bDBQBjS0CLFLytg9No6elDY2cXmroH0NQ7hpbhBXlvDs0D
M2gS9Us29k0Z67rHTNTTPGif39Rvk3nj5jaEtpEFs4wu29gnX7hOgoe6HrTqfI1OBqZR1zWO1uF5
eR2Tdes8TT9vlqGUUkpPi1rmVXWMI1dq89Xt46iUGnml1OBLGoeMlW0yT4KCKnktqu1DRmm7/QpA
+5hJV9EqaaXWXypqGpNWryRIoZ4pafW1StZbtbderfWbV/0sSatN8HmVXbKeEXROrKBjaObNAYCv
BACSFnonQPfkOjonN9E1uYWuKVH+7hxfNXZNrO354m9N/2Kefb59nuMyq/b1jq/IRr2ctlP/dliP
9XmUUvp6JU+h9KPRfkxWtU+grHkE5S2jRi3YVWvamtc2smTSlr8hrQYOmlZfy5pfzD+ovqdpWqXS
bsrVkbnDXQGwrQNNUpOPiElAdFwSouOTj92YhBTEOJlPj0fdty5rgisr5xWl9KMwVoxPTkdCypuN
TUw9XFpJc5i0+n5cUgrae0fQNy0V+MMGANMbkCikH/HxcZidsWFsdHTPEYyNjWJifAzj8vpi/gHl
PX1fnRgfx+TE+N60LvdCnT8xYV/XwfdeaF/H1OTE8899dbqxvTR2dTkzTz7HfJZ5X18t7dNTk5Oi
4/v2V+fLvFn7ckdRPuOV2+io7rMJTE1NyOvrt0vXpftM1WV0ev88nbbee532/WOzTcE2NWmmX8x3
vi5rvqrLWDrOm3KYdpzvmG6fMn962rZ/PXvbtC+dbOv03ny7U3vTU5iZmXZ4z5pvpXuhzn/Vex+7
1rafhDPy+5yks/L7uqpzszMn6vzc7Im5MD/nsi4uzL/e+VnMzC+ia3Lj6AFARmYmtrY2sbS09Ny1
tRXJ5CextrGJjfU1rKysYHl5Gatr69ja3pI0i2beorzqvLWVJYyPT2BldVWWtadflb/X19cl7QKm
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
tktLljrSlHpw3sHpN82zT2t0q9tknvonn6dP+NNCtb2jS2quY4iJjTP71dl2Wvr4+KKqusb+3a3v
+wHVSH14eExOpj4EBgYhQHS2nW9S71CIioqWKHwSCws6UpfUJFZWjSsOHpx33Gn0t9Cagd72qb/J
zOwsRscmzQmnNYTDNsto73yN5vV31lHNVHutSV/1So+9prRkak66DS/S7E9n3z5Nb6XTUcyMMl/V
S7ca1OrtQL///e/fWi1UHru5IzEpBRGR0aiVgHlgUHtJd0iQWo2GujrERMUhPiUF6Zm5SE5JRoYE
n3FhkUhOz0NSfAzS8ytkmRHTf0OXzc7JM+uKiY3/6I2IiEZeXoHUCqflNV/ygQapNNSbV+tvvSpS
J8GgFnwaFNbWyrTMN9MmjU7Xmfd0nr63L039q9LUmkJU7723CrPOvcJK5+k9/HoM6jFQWFSMkJAw
REbFvFG9zS01LUPyk3E0NrXJtmsA3frerW9oQUtrh3yHHqlhDyIhIQkenl6SX/m9UnePp8jIzDZX
FrVm3tTcglapUE5NTZsK0RuVvMPpfEedpNHP0oqFBv2hoeF46uXjdPucqWn10eCa/5VJpbdXKo76
d7dRAhd5fTHtzKOn0X2qlRQNBDR4edfB794pANAmgDNnzkgk9E+ygRqhdZtayseIdvTQzmoFBQX2
aHSvw5KjOl97m38ItJlAH92rl6MnJsZNE8CMFEB6RUEHxPnzn/+E//E//ods089e6X//7//dtC+f
JBq0aHT6s5/9v/h//+7vnG7nm/yf//N/4ne/+09TwJ0k+vlaY9MOSAsL8+Y30Ssrmrlrx6EvvvgC
//t//4Mp5F+ltntqvwzNWEYk49WmmfehZmYa0HZ326/AaGYfJZn+2xoWFiGZWBUys7JN4aGZr34H
DXwGpTAfHuqX92tNwNfS3I4RCYx6OrsxNCjbIJnS8Khsz/AoJqfsV4d02YLCIkTHxCI+QQdJ+biN
iYkzAcDQ8Ij5vhoA6uVnp8p3s/89e2DawSOnsafT400LQatpTl+1qU0DAO20dv/+/eeZ9pv87LP/
wI0bN8yxrYXd9vaBp3AekxqQav6qV37sAeyy+S4dnV0mLwsNDTVX+q5evfZKtS9ZigSX2lSh+0UH
FtJauaL9LLRpQF+1OUM10+LzaWve3vRh0yhamOpxrk1WFy9ecrp9ztS0Dx8+MpVFxb7O3WNTm7X1
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
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEPJx89/+2/8fbOfmLQQbEDAAAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[class config_customerinfo {
	[string]$customername
	[string]$logfoldertarget
	[string]$packagefolder
	[string]$tenanturl
	[string]$downloadpath
	
}
$tools_winget_label_Load = {
	Set-ControlTheme $tools_winget_label -Theme Dark
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		[void][System.Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
		
	}
	
	$rechten = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
	if ($rechten -eq $false)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
		
	}
	else
	{
		$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
		if ($winget_exe.count -gt 1)
		{
			$winget_exe = $winget_exe[-1].Path
		}
		
		if (!$winget_exe)
		{
			
			[void][System.Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }
			
		}
		else
		{
			if (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
			{
				[void][System.Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
			}
		
		}
		
		
		
	}
	$restrictionpolicy = Get-ExecutionPolicy; if ($restrictionpolicy -ne 'Unrestricted')
	{ [void][System.Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')}
	
	
	try
	{
		
		Get-ChildItem -Path "IntuneWinAppUtil.exe" -ErrorAction Stop
	}
	catch
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing') # Casting the method to [void] suppresses the output. 
	}
	#>
	$config_tabcontrol2.Dock = 'Fill'
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Enabled = $true
	
	
	
	
}


$darkToolStripMenuItem_Click = {
	#TODO: Place custom script here
	Set-ControlTheme -Control $tools_winget_label -Theme Dark
}

$lightToolStripMenuItem_Click = {
	Set-ControlTheme -Control $tools_winget_label -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$winget_maakPackage_button1_Click = {
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$fid = $config_packagefolder
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$wlo = $Winget_locale_textbox.text
		
	}
	else { $wlo = $null; }
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$wve = $winget_version_textbox1.text
	}
	else { $wve = $null; }
	
	$DisplayName = $winget_displayname_textbox1.text
	$WinGetID = $wid
	$regApp1 = $DisplayName
	$versie = $vid
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$outputDirectory = $fid
	Set-Location $PSScriptRoot
	
	$winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
	$winget_output_textbox3.AppendText("Please wait`r`n")
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
	
	Rename-Item -Path "$outputDirectory\$wingetID\$versie\output\install.intunewin" -NewName "$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin"
	
	
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Version: $Versie `r`n")
	$winget_output_textbox3.AppendText("Install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$winget_output_textbox3.AppendText("un-install command is: `r`n")
	$winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$winget_output_textbox3.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$regApp1\"
	$regkeyApp
	$winget_output_textbox3.AppendText("$regkeyApp `r`n")
	$winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
	$winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
	$winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
	$winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$wingetID.intunewin"
			DisplayName   = $DisplayName
			Publisher	  = $config_customername_textbox.Text
			AppVersion    = $versie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$wingetID\$versie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$wingetID\$versie\output\"
	$winget_output_textbox3.AppendText("Config.csv written to: `r`n")
	$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
	$winget_output_textbox3.AppendText("  `r`n")
	$winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
	$winget_upload_logo_button1.Visible = $true
	$winget_upload_logo_button1.Enabled = $true;
}



$winget_WingetID_textbox1_TextChanged = {
	#TODO: Place custom script here
	
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$versie_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$config_packagefolder_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_output_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_intunewin_tabpage2_Click = {
	#TODO: Place custom script here
	
}

$config_packagefolder_label_Click = {
	#TODO: Place custom script here
	
}

$winget_checkurl_button1_Click = {

	$wgid = $winget_WingetID_textbox1.text

	
		$showurl = winget show $wgid --accept-source-agreements
		foreach ($l in $showurl)
		{
			if ($l -like "*Installer Url*") { $url = "https:" + $l.Split(":")[2] }
		}
		
	
	
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show($URL, 'Download source URL') # Casting the method to [void] suppresses the output. 
	
}

$config_customername_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_logfoldertarger_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$config_save_button_Click = {
	#TODO: Place custom script here
	
	[string]$c_customername = $config_customername_textbox.text
	[string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
	[string]$c_packagefolder = $config_packagefolder_textbox.text
	[string]$c_tenanturl = $config_tenanturl_textbox.text
	[string]$c_downloadfolder = $config_download_folder_textbox3.Text
	
	
	$config_customerinfo += @([config_customerinfo]@{
			customername    = $c_customername
			logfoldertarget = $c_logfoldertarget
			packagefolder   = $c_packagefolder
			tenanturl	    = $c_tenanturl;
			downloadpath    = $c_downloadfolder;
		})
	
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation -Append
	$config_listbox.ResetText()
	try
	{
		$config_import_csv = $null;
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			if ($config_customerinfo.customername -eq $cis.customername)
			{
				Update-ListBox $config_listbox $cis.customername -Append
			}
			
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
	
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$exe_openexe_button1_Click = {
	#TODO: Place custom script here
	$exe_openfiledialog1.ShowDialog()
	$exe_label1.Text = $exe_openfiledialog1.SafeFileName
	$exe_label1.Visible = $true;
	
}

$exe_label1_Click = {
	#TODO: Place custom script here
	
}

$exe_maakPackageDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	if ($exepnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($exeversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else {
		
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\source"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\source"
		}
		if (!(Test-Path -Path "$outputDirectory\$exepnaam\$exeversie\output"))
		{
			
			New-Item -ItemType Directory -Path "$outputDirectory\$exepnaam\$exeversie\output"
		}
		$exe_output_textbox1.Text = "`nNew package directory created: `r`n"
		$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
		$exe_output_textbox1.AppendText("`r`n")
		$exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
		
		[string]$exe_org_path = $exe_openfiledialog1.FileNames
		try
			{
				Unblock-File -Path $exe_org_path -Confirm:$false 
			Copy-Item -Path $exe_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\source" -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
			$exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
			$exe_panel1.Enabled = $true
			$exe_panel1.Visible = $true
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
		}
		$exe_open_sourcedir_button1.Enabled = $true
		$exe_open_sourcedir_button1.Visible = $true
		}
	}
		
		
	}
	
	$exe_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$exe_versie_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_intunewin_tabpage5_Click = {
	#TODO: Place custom script here
	
}

$exe_parsInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	$argList = $exe_parsInstall_textbox1.Text
	$exebestand = $exe_openfiledialog1.SafeFileName
	$exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_output_installparameters_Click = {
	#TODO: Place custom script here
	
}

$exe_install_test_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
	}
	
	
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$argList2 = $exe_parsUnInstall_textbox1.text
		if ($exe_openfiledialog1.SafeFileName -like "*.exe")
		{
			
			$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
		}
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	
	$exe_parsUnInstall_textbox1.Enabled = $true
	$exe_parsUnInstall_textbox1.Visible = $true
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true


	
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $true
		$exe_parsUnInstall_textbox1.Visible = $true
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $true
		$exe_parsUnInstall_textbox1.Visible = $true
		$argList2 = $exe_parsUnInstall_textbox1.text
		if ($exe_openfiledialog1.SafeFileName -like "*.exe")
		{
			
			$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
		}
		
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	

}

$exe_parsUnInstall_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exebestandUninstall = $exe_openfiledialog1.SafeFileName
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		
	}
	$exe_labelVoorbeeldUninstall.Visible = $true
	$exe_labelVoorbeeldUninstall.Enabled = $true
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	
	
	
	
	$argList2 = $exe_parsUnInstall_textbox1.text
	if ($exe_openfiledialog1.SafeFileName -like "*.exe")
	{
		
		$exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
	}
}

$exe_labelVoorbeeldUninstall_Click = {
	#TODO: Place custom script here
	
}

$exe_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$outputDirectory = $config_packagefolder
		powershell_ise -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
	}
	
	
	
}

$exe_maakScripting_button1_Click = {
	#TODO: Place custom script here
	
	$exe_UnlInstallParameters.Visible = $true
	$exe_UnlInstallParameters.Enabled = $true
	$exe_radiobuttonUninstallEXEPath.Visible = $true
	$exe_radiobuttonUninstallEXEPath.Enabled = $true
	$exe_install_test_button1.Enabled = $true
	$exe_install_test_button1.Visible = $true
	$exe_radiobuttonGebruikZelfdeEXEAlsB.Enabled = $true
	$exe_radiobuttonGebruikZelfdeEXEAlsB.Visible = $true
	$exe_radiobutton3.Enabled = $true
	$exe_radiobutton3.Visible = $true

	
	$exe_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 18:02
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$exeFile = "!!ExeFile!!"
$exeParameters = "!!ExeParams!!" ## Check EXE Params.. 
# Customer variables
$logDir = "!!LogDir!!"
$registerDetectionRoot = "!!RegisterDetectionRoot!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
try
{
	Start-Process -FilePath $exeFile -ArgumentList $exeParameters -ErrorAction Stop -wait
	write-host "Installation completed of $exeFile" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
	write-host "Error executing $exeFile" -ForegroundColor Yellow
	Write-Host "installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}
### Place extra actions here:









Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	$exe_installFile = $exe_installFile.Replace('"!!AppName!!"', $appnaam)
	$exe_installFile = $exe_installFile.Replace('!!LogDir!!', $logdir)
	$exe_installFile = $exe_installFile.Replace('!!RegisterDetectionRoot!!', $RegisterDetectionroot)
	$exe_installFile = $exe_installFile.Replace('!!Version!!', $versie)
	$exe_installFile = $exe_installFile.Replace('"!!ExeFile!!"', $EXEbestand)
	$exe_installFile = $exe_installFile.Replace('"!!ExeParams!!"', $EXEPARSInput)
	
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	try
	{
		$exe_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	
	
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$exe_maak_intuneWIN_button1_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$mkiapn = $exe_packagenaam_textbox1.text
	$versie = $exe_versie_textbox1.text
	$RegisterDetectionroot = "Intune_" + $config_customername
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
	Rename-Item -Path "$outputDirectory\$exepnaam\$exeversie\output\install.intunewin" -NewName "$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin"
	$exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
	$exe_output_textbox1.AppendText("`r`n")
	
	$exe_output_textbox1.AppendText("Install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$exe_output_textbox1.AppendText("un-install command is: `r`n")
	$exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$exe_output_textbox1.AppendText("Detection in registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$mkiapn\"
	$regkeyApp
	$exe_output_textbox1.AppendText("$regkeyApp `r`n")
	$exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
	$exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$exepnaam.intunewin"
			DisplayName   = $exepnaam
			Publisher	  = $config_customername
			AppVersion    = $exeversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$exepnaam\$exeversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$exepnaam\$exeversie\output\"
	$exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
	$exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	$exe_output_textbox1.AppendText("  `r`n")
	$exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
	#TODO: Place custom script here
	$msi_openfiledialog1.ShowDialog()
	$msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
	$msi_openmsi_label1.Visible = $true;
}

$msi_openmsi_label1_Click = {
	#TODO: Place custom script here
	
}

$msi_buttonCreatePackageDirecto_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	#TODO: Place custom script here
	$fid = $config_packagefolder; $outputDirectory = $fid
	
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	
	if ($msipnaam -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
	}
	else
	{
		if ($msiversie -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
		}
		else
		{
			
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$msipnaam\$msiversie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$msipnaam\$msiversie\output"
			}
			$msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
			$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
			$msi_output_textbox1.AppendText("`r`n")
			$msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
			[string]$msi_org_path = $msi_openfiledialog1.FileNames
			try
			{
				Unblock-File -Path $msi_org_path -Confirm:$false
				$MSINewname = $msi_openfiledialog1.FileName
				
				$MSINewname = $MSINewname.Split("\")[$MSINewname.Split("\").Count - 1]
				$MSINewname = $MSINewname.Replace(" ", "")
				$MSIbestand = "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname"
				#Write-Host $MSIbestand
				Copy-Item -Path $msi_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\source\$MSINewname" -ErrorAction Stop
				$msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
				$msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
				$msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
				$msi_panel1.Enabled = $true
				$msi_panel1.Visible = $true
			}
			catch
			{
				$exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
			}
			$appNaam = $msipnaam
			$versie = $msiversie
			 #$msi_openfiledialog1.SafeFileName
			#klant variabelen
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			#Dyn vars
			$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
			$filenaamMSILog = $appNaam + $versie + "MSI"
			$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
			$msi_install_par_textbox3.Text = "msiexec /qn, /l*v $logfileMSI /i $MSIbestand"
			$msi_OpenSourceDir_button1.Enabled = $true
			$msi_OpenSourceDir_button1.Visible = $true
		}
	}
	
	
}

$labelInstallParametersadj_Click = {
	#TODO: Place custom script here
	
}

$msi_uninstall_par_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$msi_button1CreateInstallScript_Click = {
	#TODO: Place custom script here
	#'"' + $exe_openfiledialog1.SafeFileName + '"'
	
	$msi_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:53
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### This function handles the detection method in the registry.
	### It will create a key in the registry with the name of the application. 
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functions #>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}
try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
#Start; Write Log file
Start-Transcript -Path $logfile
Set-Location $PSScriptRoot
try
{
	$startPMSI = start-process i.cmd -wait -WindowStyle Hidden -erroraction stop
	write-host $startPMSI
	$msilog = get-content $logfileMSI
	if ($msilog -eq $null) { write-error "Can't read MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
	Else
	{
		foreach ($ml in $msilog)
		{
			if ($ml -like "*APPCOMPAT: looking for appcompat database entry with ProductCode*")
			{
				$msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
			}
		}
		write-host "Script started i.cmd" -ForegroundColor Green
		write-host "Possible uninstall command is:" -ForegroundColor Green
		write-host ""
		write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
		write-host ""
		Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
		write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green

	}
	
	if ($msiuninstallcode -eq $null) { $excode = 1 ; write-error "Can't find uninstall code in MSIEXEC logs Use: /l*v $logfileMSI in msiexec commando" }
    Else
    {
        write-host "Script started i.cmd" -ForegroundColor Green
        write-host "Possible uninstall command is:" -ForegroundColor Green
        write-host ""
        write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
        write-host ""
        Write-Host "MSIEXEC Log start:.:" -ForegroundColor Green
        write-host $logfileMSI -ForegroundColor Green
        $MSILOGS = get-content $logfileMSI 
        $MSILOGS
        Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
        $excode = 0
    }
   
	
	
}
catch
{
    Write-Host "Installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "MSIEXEC Log start:.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
    $MSILOGS = get-content $logfileMSI 
    $MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue


    $excode = 1
}
try
{
	#Searches for startmenu items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
	
}
try
{
	#Searches for Desktop items created the last 10 minutes
	$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
	foreach ($startmenuI in $startMenuItems)
	{
		write-host "`r`n"
		write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
		write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
		write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
		write-host "`r`n"
		
	}
}
catch
{
	write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
}

write-host "Possible uninstall command is:" -ForegroundColor Green
write-host ""
write-host "msiexec /x {$msiuninstallcode} /qn" -ForegroundColor Green
write-host ""

### Place extra actions here:







<#----Enf of extra actions--#>
#Stop; Write Log file
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
	
	$msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
	$msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
	$msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	#$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_install_par_textbox3.Text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\i.cmd" -encoding ascii -Force -ErrorAction Stop
		copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$exepnaam\$exeversie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
		$msi_installFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`ni.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
		$msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
		$msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
	}
	
	$msi_test_install_button1.Enabled = $true
	$msi_test_install_button1.Visible = $true
	
	
}

$msi_install_par_textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$msi_packagenaam_textbox1_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$msi_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
	}
}

$Tools_Uninstall_String_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_Output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_uninstallstring_Syswow_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	$tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$buttonUninstallstringWowAA32Node_Click = {
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	foreach ($ius in $InstallsUninstallString)
	{
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$msi_button5CreateIntunewinFile_Click = {
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$msi_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$msi_output_textbox1.AppendText("`r`n")
	
	$msi_output_textbox1.AppendText("Install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$msi_output_textbox1.AppendText("un-install command is: `r`n")
	$msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$msi_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$msi_output_textbox1.AppendText("$regkeyApp `r`n")
	$msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$msi_output_textbox1.AppendText("Config.csv written to: `r`n")
	$msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$msi_output_textbox1.AppendText("  `r`n")
	$msi_buttonUploadLogoPNG.Enabled = $true
	$msi_buttonUploadLogoPNG.Visible = $true
	$msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$msipnaam\$msiversie\source\"
}

$msi_button3CreateUninstallScri_Click = {
	#TODO: Place custom script here
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}


'@
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $msi_versie_textbox1.text
	$MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
	$MSIPARSInput = '"' + $msi_uninstall_par_textbox1.Text + '"'
	
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
	$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
	
	$exepnaam = $msi_packagenaam_textbox1.text
	$exeversie = $versie
	$outputDirectory = $config_packagefolder
	
	try
	{
		$jjmsii = $msi_uninstall_par_textbox1.text
		
		$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
		$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
		$msi_output_textbox1.AppendText("`nu.cmd created `r`n")
		$msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
		
		
	}
	catch
	{
		$msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
	}
	$msi_button4TestUninstallPowers.Enabled = $true
	$msi_button4TestUninstallPowers.Visible = $true
	$msi_button5CreateIntunewinFile.Enabled = $true
	$msi_button5CreateIntunewinFile.Visible = $true
	
	
}

$msi_button4TestUninstallPowers_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$fid = $config_packagefolder; $outputDirectory = $fid
		$msipnaam = $msi_packagenaam_textbox1.text
		$msiversie = $msi_versie_textbox1.text
		
		powershell_ise -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
	}
}

$Reset_button1_Click = {
	#TODO: Place custom script here
	Clear-Host
}

$config_tabpage1_Click = {
	#TODO: Place custom script here
	
}

$winget_upload_button1_Click = {
	#TODO: Place custom script here
	<#
	$token = Connect-MSIntuneGraph -TenantID "339ad6f1-ba98-4db6-bf71-0c140c9271bc" -Interactive
	$RegisterDetectionroot = "Intune_Customer"
	$appNaam = "Greenshot"
	$versie = 1
	$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
	$regkeyApp = "$regkeyRoot\$appNaam"
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	Add-IntuneWin32App -FilePath $IntuneWinFile `
					   -DisplayName $DisplayName `
					   -Description $DisplayName `
					   -Publisher $Publisher `
					   -AppVersion $AppVersion `
					   -Icon $IconCMD `
					   -InstallExperience "system" `
					   -RestartBehavior "suppress" `
					   -DetectionRule $DetectionRule `
					   -InstallCommandLine 'powershell -executionpolicy bypass -file install.ps1' `
					   -UninstallCommandLine 'powershell -executionpolicy bypass -file uninstall.ps1' -Verbose
	#>
}

$upload_LoadConfig_button1_Click = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	}
	else
	{
		
	
			$config_csv_openfiledialog1.ShowDialog()
			[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
			$ConfigCSVImport = Import-Csv $config_csv_path
			#Write-Host $ConfigCSVImport
			$itwnf = $ConfigCSVImport.IntuneWinFile
			$filepath = $config_csv_path.TrimEnd("config.csv")
			$itwnffilepath = $filepath + $itwnf
			$upload_IntuneWinFile_textbox1.Text = $itwnffilepath
			$upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
			$upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
			$upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
			$upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
			$upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
			$upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
			$upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
		if (!(test-path "$filepath\Logo.png" -PathType Leaf))
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
			$upload_logo_button2.Enabled = $true
			$upload_logo_button2.Visible = $true
			
		}
		
	}
}

$upload_IntuneWinFile_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_DisplayName_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_Publisher_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_AppVersion_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_reglocation_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_regValue_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_installCMD_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$upload_upload_button1_Click = {
	#TODO: Place custom script here
	$uploadIntuneFile = @'

<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
	 Created on:   	26/02/2023 14:05
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	UploadIntune.ps1
	===========================================================================
	.DESCRIPTION
		Params are used from IntunePrepTool
		Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host "Script will install IntuneWin32App powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name IntuneWin32App) { Import-Module -Name IntuneWin32App -Force }
else { Install-Module -name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -RequiredVersion "1.4.1"; Import-Module -Name IntuneWin32App -Force }
Write-host "Script will update IntuneWin32App when needed" -ForegroundColor Green
if ((Get-Module -ListAvailable -Name IntuneWin32App).Version -ne "1.4.1") {
Update-Module IntuneWin32App -confirm:$false -Force
}
else {
write-host "IntuneWin32App module already on version 1.4.1" -ForegroundColor Green
}
Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = "!!TENANTURL!!"
$dep = "!!DEPENDENCY!!"
$AvailableAllUsers = "!!AvailableAllUsers!!"
$RequiredAllDevices = "!!RequiredAllDevices!!"
$SetupLikeOldVersion = "!!SetupLikeOldVersion!!"
Write-host "First logon with the Microsoft Tenant"
Write-host "`r`n"
Write-host "`r`n"

Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = Import-Csv $config_csv_path
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd("config.csv")
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = get-childitem "$filepath\logo.png"
if ($logoaanwezig -eq $null) { write-host "No Logo.PNG found in Output Directory" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
else
{
	$icon = New-IntuneWin32AppIcon -FilePath "$filepath\logo.png"
	
	$DetectionRule = New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regkeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie
	$RequirementRule = New-IntuneWin32AppRequirementRule -Architecture "All" -MinimumSupportedWindowsRelease "W10_20H2"
	write-host "We will first check if there are any apps already available in Intune with the same DisplayName" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32AppEvtVorigeVersies = Get-IntuneWin32App -DisplayName $dnam -Verbose
	if ($Win32AppEvtVorigeVersies -ne $null)
	{
		write-host "Already version(s) found " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		$evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
		write-host $evtvversie
		$alversieAppAanwezig = $true;
		write-host "After uploading new version you can choose Superseedence in this script" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	}
	
	else
	{
		$alversieAppAanwezig = $false;
	}
	
	write-host "We will upload to Intune now" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	$Win32App = Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description "Upload package by IntunePrepTool" -Publisher $publ -AppVersion $versie -Icon $Icon -InstallExperience "system" -RestartBehavior "suppress" -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule -Verbose
	Write-host "If all is good the app will now be available in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
	
	if ($SetupLikeOldVersion -eq $true)
	{
   <#
	
	$response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
	$niksdoen = $response -eq "q"
	if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	else
	{
		if ($dep -notlike $null)
		{
			$dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
			$dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
			Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
			write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
		}
		else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
	}
#>
		
		if ($alversieAppAanwezig -eq $false) { write-host "Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
		else
		{
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				write-host "We will now try to setup assignments " -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
				$assinmentVorigeVersie = get-IntuneWin32AppAssignment -id $vorigeversie.id
				$evtvversie = $vorigeversie.DisplayVersion
				
				if ($assinmentVorigeVersie -eq $null) { write-host "Older version: $evtvversie has no assignments" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host ""; Write-host "`r`n"; Write-host "`r`n"
					$response = read-host "Press q to do nothing, Any other key to setup assignments like: $evtvversie"
					$niksdoen = $response -eq "q"
					if ($niksdoen -eq $true) { write-host "Ok.. Then you have to setup the assignments in Intune" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
					else
					{
						write-host "Ok .. We will fix the assignments for you!" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
						Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$false
						try
						{
							Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop
						}
						catch
						{
							Write-Host "Something went wrong. You will have to do this in Intune" -ForegroundColor Green
						}
					}
				}
			}
			
			foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
			{
				$response = read-host "Press q to do nothing, Any other key to setup Supersedence  "
				$niksdoen = $response -eq "q"
				if ($niksdoen -eq $true) { write-host "Ok.. We are doing nothing here" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n" }
				else
				{
					write-host "Ok .. We will try to fix superseedence" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"
					Write-host "We will fix superseedence for:" -ForegroundColor Green
					$vorigeversie.displayVersion
					
					$superseede = New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace
					$bestaandeSuperSedence = $null; $bestaandeSuperSedence = Get-IntuneWin32AppSupersedence -ID $vorigeversie.id
					if ($bestaandeSuperSedence -ne $null) { Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False }
					Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$false
				}
			}
			
			
			
		}
		
		
	}
	if ($AvailableAllUsers -eq $true)
	{
		
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Verbose
		
	}
	
	
	if ($RequiredAllDevices -eq $true)
	{
		
		write-host "We will now setup assignment" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n";
		Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Verbose
		
		
		
		
	}
	
}


'@
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$tenanturl = $upload_tenantURL_textbox.text
	$depWin = $upload_dep_textbox1.Text
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
	$uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
	if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
	}
	if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
	}
	if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
	}
	else
	{
		$uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
	}
	
	
	
	
	$filepath = $config_csv_path.TrimEnd("config.csv")
	$uploadIntuneFile | Out-File $filepath\uploadIntune.ps1 -Force
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		powershell_ise -file $filepath\uploadIntune.ps1
	}
	
}

$upload_tenantURL_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_upload_logo_button1_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$fid = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$fid\$wid\$vid\Output\logo.png" -ErrorAction Stop
	$winget_output_textbox3.AppendText("`r`n")
	$winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
	
	
}

$msi_buttonUploadLogoPNG_Click = {
	#TODO: Place custom script here
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$msipnaam = $msi_packagenaam_textbox1.text
	$msiversie = $msi_versie_textbox1.text
	$outputDirectory = $config_packagefolder_textbox.text
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$msipnaam\$msiversie\output\logo.png" -ErrorAction Stop
	$msi_output_textbox1.AppendText("`r`n")
	$msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	
}

$exe_uploadlogo_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}



$upload_dep_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}





$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$config_tenanturl_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$config_listbox_SelectedIndexChanged = {
	#TODO: Place custom script here
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
	}
	catch
	{
		#Error handling here
	}
	
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -eq $config_listbox.SelectedItem)
		{
			$config_customername_textbox.text = $cis.customername
			$config_logfoldertarger_textbox.text = $cis.logfoldertarget;
			$config_packagefolder_textbox.text = $cis.packagefolder;
			$config_tenanturl_textbox.text = $cis.tenanturl;
			$upload_tenantURL_textbox.text = $cis.tenanturl
			$config_download_folder_textbox3.Text = $cis.downloadpath
			
			if ($cis.downloadpath -like 'Enter UNC or local path for the download Package folder. (Evergreen / Winget)')
			{
				#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
				[void][System.Windows.Forms.MessageBox]::Show('Download folder was added to config. Please use this tool or edit "C:\Program Files\IntunePrepTool\config_customerinfo.csv" ', 'Please add Download folder') # Casting the method to [void] suppresses the output. 
			}
			
			try
			{
				New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script
			}
			try
			{
				New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script
			}
			try
			{
				New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script
			}
			try
			{
				New-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script -ErrorAction Stop
			}
			catch
			{
				Set-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script
			}
		}
	}
	
}



$config_new_button_Click = {
	#TODO: Place custom script here
	$config_customername_textbox.text = "Enter Customer name here"
	$config_logfoldertarger_textbox.text = "Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs"
	$config_packagefolder_textbox.text = "Enter local path where packages & scripts will be stored; Example c:\sources\"
	$config_tenanturl_textbox.text = "Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com"
	$config_download_folder_textbox3.Text = "Enter UNC or local path for the download Package folder. (Evergreen / Winget)"
}

$tools_winget_search_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $true
	$tools_datagridview1.Visible = $true
	$tools_Output_textbox1.Enabled = $false
	$tools_Output_textbox1.Visible = $false
	
	
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);
	
	$tools_wsearchstring = $tools_search_winget_textbox.text
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	$wsearch__winget_search_output = winget search $tools_wsearchstring --accept-source-agreements
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
			
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			
			$tools_datagridview1.DataSource = $table;		
		}
		
	}
	
}

$tools_show_winget_button_Click = {
	#TODO: Place custom script here
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	<#
	$winget_exe = Resolve-Path "\Microsoft.DesktopAppInstaller_1.19.10173.0_x64__8wekyb3d8bbwe\winget.exe"
	if ($winget_exe.count -gt 1)
	{
		$winget_exe = $winget_exe[-1].Path
	}
	
	if (!$winget_exe)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Install winget", 'No Winget found') # Casting the method to [void] suppresses the output. 
	}
	
	#>
	$tools_winget_show_string = $tools_show_winget.text
	$tools_winget_id = winget show $tools_winget_show_string --accept-source-agreements
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
}

$tools_show_winget_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_locale_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_locale_checkbox1.Checked -eq $true)
	{
		$winget_locale_label.Enabled = $true
		$winget_locale_label.Visible = $true
		$Winget_locale_textbox.Enabled = $true
		$Winget_locale_textbox.Visible = $true
	}
	else
	{
		$winget_locale_label.Enabled = $false
		$winget_locale_label.Visible = $false
		$Winget_locale_textbox.Enabled = $false
		$Winget_locale_textbox.Visible = $false
	}
}

$Winget_locale_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$winget_version_checkbox_CheckedChanged = {
	#TODO: Place custom script here
	if ($winget_version_checkbox.Checked -eq $true)
	{
		$winget_version_label1.Enabled = $true
		$winget_version_label1.Visible = $true
		$winget_version_textbox1.Enabled = $true
		$winget_version_textbox1.Visible = $true
	}
	else
	{
		$winget_version_label1.Enabled = $false
		$winget_version_label1.Visible = $false
		$winget_version_textbox1.Enabled = $false
		$winget_version_textbox1.Visible = $false
	}
}

$tools_versions_winget_textbox_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_winget_show_versions_button_Click = {
	
	$tools_datagridview1.Enabled = $false
	$tools_datagridview1.Visible = $false
	$tools_Output_textbox1.Enabled = $true
	$tools_Output_textbox1.Visible = $true
	
	
	$tools_winget_show_string = $tools_versions_winget_textbox.text
	$tools_winget_id = winget show $tools_winget_show_string --versions --accept-source-agreements
	
	
	$tools_Output_textbox1.Text = "Search results: `r`n"
	foreach ($twi in $tools_winget_id)
	{
		
		$tools_Output_textbox1.AppendText("$twi `r`n")
	}
	
}

$exe_open_sourcedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	Invoke-Item "$config_packagefolder\$exepnaam\$exeversie\source"
}

$msi_labelPackageName_Click = {
	#TODO: Place custom script here
	
}


$tools_search_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$tools_search_output_button1_Click = {
	#TODO: Place custom script here
	
}

$deP_label3_Click = {
	#TODO: Place custom script here
	
}

$tools_tabpage7_Click = {
	#TODO: Place custom script here
	
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
	#TODO: Place custom script here
	
}

$upload_checkboxRequiredForAllUsers_CheckedChanged = {
	#TODO: Place custom script here
	
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
	#TODO: Place custom script here
	
}

$weblink_ico_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$shortcut_openfiledialog1.ShowDialog()
	[string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	Copy-Item -Path $ICO_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\$weblinkName.ico" -ErrorAction Stop
	
	$weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
	$weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
	$weblink_ico_label1.Visible = $true;
	$weblink_ico_label1.Enabled = $true;
	$weblink_logo_png_button1.Visible = $true
	$weblink_logo_png_button1.Enabled = $true
	$weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
	
	
	
	
}

$weblink_create_intunewin_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
	Rename-Item -Path "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\install.intunewin" -NewName "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkPackageName.intunewin"
	$config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
	$weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
	$weblink_output_textbox1.AppendText("`r`n")
	
	$weblink_output_textbox1.AppendText("Install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$weblink_output_textbox1.AppendText("un-install command is: `r`n")
	$weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$weblink_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$weblinkPackageName\"
	$regkeyApp
	$weblink_output_textbox1.AppendText("$regkeyApp `r`n")
	$weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
	$weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
	
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$weblinkPackageName.intunewin"
			DisplayName   = $weblinkPackageName
			Publisher	  = $config_customername
			AppVersion    = $weblinkVersion;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\config.csv" -NoTypeInformation
	$weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
	$weblink_output_textbox1.AppendText("  `r`n")
	$weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
	
}

$config_delete_button1_Click = {
	#TODO: Place custom script here
	
	$config_import_csv = Import-Csv "config_customerinfo.csv"
	$config_customerinfo = $null;
	Remove-Item "config_customerinfo.csv" -Confirm:$false
	foreach ($cis in $config_import_csv)
	{
		if ($cis.customername -ne $config_listbox.SelectedItem)
		{
			$config_customerinfo += @([config_customerinfo]@{
					customername    = $cis.customername
					logfoldertarget = $cis.logfoldertarget
					packagefolder   = $cis.packagefolder
					tenanturl	    = $cis.tenanturl;
				})
		}
		
		
	}
	$config_customerinfo | Export-Csv "config_customerinfo.csv" -NoTypeInformation
	$config_listbox.Items.Clear()
	
	try
	{
		$config_import_csv = Import-Csv "config_customerinfo.csv" -ErrorAction Stop
		foreach ($cis in $config_import_csv)
		{
			Update-ListBox $config_listbox $cis.customername -Append
		}
		
	}
	catch
	{
		
		Write-Host "Taak hier"
		
	}
	
	
}

$weblink_logo_png_button1_Click = {
	#TODO: Place custom script here
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblink_logo_openfiledialog1.ShowDialog()
	[string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	Copy-Item -Path $weblinkLogo_org_path -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\output\logo.png" -ErrorAction Stop
	$weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
	$weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
	$weblink_png_label1.Enabled = $true
	$weblink_png_label1.Visible = $true
	$weblink_create_scripts_button1.Enabled = $true
	$weblink_create_scripts_button1.Visible = $true
	$weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
	}
}

$weblink_create_scripts_button1_Click = {
	#TODO: Place custom script here
	$weblink_installFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}


#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will now copy ICO file"
	Copy-Item "$Name.ico" "$logdir\ico\$Name.ico" -confirm:$false
	Write-Host "Script will now create extra folder in startmenu (when needed)"
  if (!(Test-Path -Path $location))
{
	
	New-Item -ItemType Directory -Path $location
}

	Write-Host "Script will now create shortcut"
	fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon "$logdir\ico\$Name.ico" -programmenu $location
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; fDetectionInRegistry -succes $true }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	$weblink_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
	 Created on:   	27/04/2023 13:14
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Script genererated with:
		https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = "!!packagename!!"
$Name = "!!Name!!"
$version = "!!Version!!"
$URL = "!!URL!!"
$location = "!!Location!!"
$browser = "!!Browser!!"
$ICOFile = "!!ICOFile!!"
#klant variabelen
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$packagename$Version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$packagename"
$excode = $null;


##Create log direcotry if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
##Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico))
{
	
	New-Item -ItemType Directory -Path $logdir\ico
}

##Create registry root if needed
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application Key in registry
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

<# Begin Powershell Functions.
#>


function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword
	}
}
function fCreateShortcut
{
	### Function creates shortcut
	
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TargetFile,
		[string]$shortcutName,
		[string]$icon,
		[string]$ShortcutArguments,
		[string]$programmenu
	)
	
	
	$browser = $TargetFile
	$wdirCount = $browser.Split("\").Count
	$eraf = $browser.Split("\")[$wdirCount - 1]
	$workingdir = $browser.TrimEnd($eraf)
	$ShortcutFile = "$programmenu\$shortcutName.lnk"
	$WScriptShell = New-Object -ComObject WScript.Shell
	$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
	$Shortcut.TargetPath = $TargetFile
	$Shortcut.WorkingDirectory = $workingdir
	if ($Icon)
	{
		$Shortcut.IconLocation = $Icon
	}
	if ($ShortcutArguments)
	{
		$Shortcut.Arguments = $ShortcutArguments
	}
	$Shortcut.Save()
	
}



<# Einde Powershell Functies
Hier dus nog geen script uitvoering doen
#>

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}




#Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
Start-Transcript -Path $logfile

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>


try
{
	Write-Host "Script will remove ICO file and Lnk file"
	Remove-Item $logdir\ico\$Name.ico -confirm:$false
	Remove-Item $location\$Name.lnk -confirm:$false
	$excode = 0
}
catch
{
	
	$excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error'; fDetectionInRegistry -succes $false }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$weblinkName = $weblink_Name.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	$weblinkPackageName = $weblink_packagename.Text
	$weblinkICOFile = "$weblinkName.ico"
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$weblink_installFile = $weblink_installFile.Replace("!!packagename!!", $weblinkPackageName)
	$weblink_installFile = $weblink_installFile.Replace("!!Name!!", $weblinkName)
	$weblink_installFile = $weblink_installFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_installFile = $weblink_installFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_installFile = $weblink_installFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_installFile = $weblink_installFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_installFile = $weblink_installFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_installFile = $weblink_installFile.Replace("!!logdir!!", $logdir)
	$weblink_installFile = $weblink_installFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!packagename", $weblinkPackageName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Name!!", $weblinkName)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Version!!", $weblinkVersion)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!URL!!", $weblinkUrl)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Location!!", $weblinkLocation)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!Browser!!", $weblinkBrowser)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!ICOFile!!", $weblinkICOFile)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!logdir!!", $logdir)
	$weblink_uninstallFile = $weblink_uninstallFile.Replace("!!RegisterDetectionroot!!", $RegisterDetectionroot)
	$weblink_installFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -force
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\IntunePrepTool_msgfile.dll" -Confirm:$false
	$weblink_uninstallFile | Out-File "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1" -force
	$weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
	$weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
	$weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
	$weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
	$weblink_test_install_button1.Visible = $true
	$weblink_test_install_button1.Enabled = $true
	$weblink_test_uninstall_button1.Visible = $true
	$weblink_test_uninstall_button1.Enabled = $true
	$weblink_create_intunewin_button1.Visible = $true
	$weblink_create_intunewin_button1.Enabled = $true
	
}



$weblink_create_packagedir_button1_Click = {
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$weblinkName = $weblink_packagename.Text
	$weblinkUrl = $weblink_url_textbox1.Text
	$weblinkLocation = $weblink_location_textbox1.Text
	$weblinkBrowser = $weblink_browser_textbox1.Text
	$weblinkVersion = $weblink_version_textbox1.Text
	
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\source"
	}
	if (!(Test-Path -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"))
	{
		
		New-Item -ItemType Directory -Path "$config_packagefolder\$weblinkName\$weblinkVersion\output"
	}
	$weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
	$weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
	$weblink_output_textbox1.AppendText(" `r`n")
	$weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
	$weblink_ico_button1.Enabled = $true
	$weblink_ico_button1.Visible = $true
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_version_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_browser_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_location_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_output_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_url_textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$weblink_Name_TextChanged = {
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$weblink_test_uninstall_button1_Click = {
	#TODO: Place custom script here
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$weblinkName = $weblink_Name.Text
		$weblinkVersion = $weblink_version_textbox1.Text
		$weblinkPackageName = $weblink_packagename.Text
		
		
		powershell_ise -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
	}
}

$helpbutton1_Click = {
	#TODO: Place custom script here
	Start-Process 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool'
}

$winget_displayname_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_create_scripts_button1_Click={
	#TODO: Place custom script here
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$DisplayName = $winget_displayname_textbox1.text
	
	if ($DisplayName -like $null)
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
	}
	else
	{
		$vid = $versie_textbox2.Text
		if ($vid -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
		}
		else
		{
			
			
			$wid = $winget_WingetID_textbox1.text
			
			$DisplayName = $winget_displayname_textbox1.text
			$fid = $config_packagefolder
			if ($winget_locale_checkbox1.Checked -eq $true)
			{
				$wlo = $Winget_locale_textbox.text
				
			}
			else { $wlo = $null; }
			if ($winget_version_checkbox.Checked -eq $true)
			{
				$wve = $winget_version_textbox1.text
			}
			else { $wve = $null; }
			
			
			$WinGetID = $wid
			$regApp1 = $DisplayName
			$versie = $vid
			$logdir = $config_logfoldertarget
			$RegisterDetectionroot = "Intune_" + $config_customername
			$outputDirectory = $fid
			
			$installFile = @'
	
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	16-5-2023 15:20
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:      Winget_install_uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = "!!WinGetID!!"
$DisplayName = "!!DisplayName!!"
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
$versie = "!!versie!!"
$locale = "!!locale!!"
$localeSelected = "!!localeSelected!!"
$versionWinget = "!!versionWinget!!"
$versionWingetSelected = "!!versionSelected!!"
#Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path $logdir  "$DisplayName$versie.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$regApp1"
$excode = $null;
#Creates logdirectory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Create registry application key.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Start Powershell functions
function fDetectionInRegistry
{
	### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
	### Uiteindelijk heb je dan bijvoorbeeld:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### Met een Versie waarde en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}



<# End Powershell Functies
Hier dus nog geen script uitvoering doen
#>
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}



#Start Transcript.  Will be saved under  $logdir.
Start-Transcript -Path $logfile
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force }

<#--Hieronder start Script ter installatie---
	Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
	Altijd met een -ErrorAction Stop erachter
#>

$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) { Write-Error "Winget not installed" $excode = 1 }
else { $excode = 0 }

try
{
	
	$install = "!!WingetCommand!!"
if ($install -like "!!doe*")
{
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
		<#
		try
		{
			#install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
			
		}
		catch
		{
			
		}
		#>
	}
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale

		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
		}
		catch
		{
			
			
		}
		#>
	}
	if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
	{

		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
			
		}
		catch
		{
			
		}
		#>
	}
	
	if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
	{
		& $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
		<#
		try
		{
			install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
		}
		catch
		{
			
		}
		#>
	}
}
	else
	{
		& $winget_exe uninstall --id $WinGetID -h
	}
	#$excode = 0;
	
}
catch
{
	#$excode = 1;
	
}

if ($install -like "!!doe*")
{
	try
	{
		#Searches for startmenu items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a startmenu *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files in startmenu" -ForegroundColor Yellow
		
	}
	try
	{
		#Searches for Desktop items created the last 10 minutes
		$startmenuItems = (Get-ChildItem "C:\Users\Public\Desktop" -Recurse -include *.lnk | Sort-Object LastWriteTime -ErrorAction Stop | where { $_.LastWriteTime -ge (get-date).AddMinutes(-10) }).VersionInfo.FileName
		foreach ($startmenuI in $startMenuItems)
		{
			write-host "`r`n"
			write-host "The last 10 minutes a Desktop *.lnk file was created." -ForegroundColor Yellow
			write-host "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
			write-host "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
			write-host "`r`n"
			
		}
	}
	catch
	{
		write-host "Error looking for *.lnk files on the Desktop" -ForegroundColor Yellow
	}
}
#### Place extra actions here:




<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
Stop-Transcript
#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) { $warning = 'Error';  }
else
{
	$warning = 'Information'; if ($install -like "!!doe*") { fDetectionInRegistry -succes $true }
	else
	{
		remove-item $regkeyApp
	}
}
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
			$installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
			$installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
			$installfile = $installfile.Replace('!!logdir!!', $logdir)
			$installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
			$installfile = $installfile.Replace('!!versie!!', $versie)
			if ($wlo -ne $null)
			{
				$installfile = $installfile.Replace('!!locale!!', $wlo)
				$installfile = $installfile.Replace("!!localeSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!localeSelected!!", $false) }
			if ($wve -ne $null)
			{
				$installfile = $installfile.Replace('!!versionWinget!!', $wve)
				$installfile = $installfile.Replace("!!versionSelected!!", $true)
			}
			else { $installfile = $installfile.Replace("!!versionSelected!!", $false) }
			
			
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\source"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\source"
			}
			if (!(Test-Path -Path "$outputDirectory\$wingetID\$versie\output"))
			{
				
				New-Item -ItemType Directory -Path "$outputDirectory\$wingetID\$versie\output"
			}
			
			
			$installfile = $installfile.Replace('!!WingetCommand!!', "!!doeinstall!!")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\install.ps1" -Force
			copy-item "IntunePrepTool_msgfile.dll" -Destination "$outputDirectory\$wingetID\$versie\source\IntunePrepTool_msgfile.dll" -Confirm:$false
			$installfile = $installfile.Replace('!!doeinstall!!', "geeninstall")
			$installFile | Out-File "$outputDirectory\$wingetID\$versie\source\uninstall.ps1" -Force
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
			$winget_output_textbox3.AppendText("`r`n")
			$winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
			$winget_test_install_button1.Enabled = $true
			$winget_test_install_button1.Visible = $true
			$winget_uninstall_test_button.Enabled = $true
			$winget_uninstall_test_button.Visible = $true
			$winget_maakPackage_button1.Enabled = $true
			$winget_maakPackage_button1.Visible = $true
		}
	}
	
}

$winget_test_install_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$voorIntall = Get-ChildItem "C:\ProgramData\Microsoft\Windows\Start Menu\Programs"
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
	}
	
}

$winget_uninstall_test_button_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$wid = $winget_WingetID_textbox1.text
	$vid = $versie_textbox2.Text
	$DisplayName = $winget_displayname_textbox1.text
	$wingetversie = $versie_textbox2.text
	$wingetid = $winget_WingetID_textbox1.text
	
	
	if ([System.Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		
		powershell_ise -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
	}
	
	
}

$winget_show_version_button1_Click={
	#TODO: Place custom script here
	$winget_show_string = $winget_WingetID_textbox1.text
	$winget_show_versions = winget show $winget_show_string --versions --accept-source-agreements
	
	
	$winget_output_textbox3.Text = "Search results: `r`n"
	foreach ($twi in $winget_show_versions)
	{
		
		$winget_output_textbox3.AppendText("$twi `r`n")
	}
}

$wsearch_s_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$wsearch_s_button1_Click={
	#TODO: Place custom script here
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "ID".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "ID";
	$table.Columns.Add($column);
	
	# - Column2 = "Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Name";
	$table.Columns.Add($column);

	$wsearchstring = $wsearch_s_textbox1.text
	$wsearch__winget_search_output = winget search $wsearchstring --accept-source-agreements
	
	foreach ($wsearch_l in $wsearch__winget_search_output)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
				
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row = $table.NewRow();
		
			$row["Name"] = $wsearch_l.substring(0, $wsearch_IdStart)
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
		
			$table.Rows.Add($row);
			
			## - Save changes to the table:
			$table.AcceptChanges();
			
			## - Display custom data created:
			$wsearch_datagridview1.DataSource = $table;
			  
			
			
			
			
			
			
		}
		
	}
	
	

	
}


Write-Host $wsearch_datagridview1
$wsearch_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$cunfig_folder_pacakaging_button1_Click={
	#TODO: Place custom script here
	if ( $config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
	}
}

$config_logfolder_target_button1_Click={
	#TODO: Place custom script here
	if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
	}
}

$tools_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tools_search_winget_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$config_csv_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$upload_logo_button2_Click={
	#TODO: Place custom script here
	$upload_logo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
	
	[string]$config_csv_path = $config_csv_openfiledialog1.FileNames
	$ConfigCSVImport = Import-Csv $config_csv_path
	
	$itwnf = $ConfigCSVImport.IntuneWinFile
	$filepath = $config_csv_path.TrimEnd("config.csv")
	Copy-Item -Path $logo_org_path -Destination "$filepath\logo.png"
}

$timer1_Tick={
	#TODO: Place custom script here
	
}

$weblink_logo_openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$msi_versie_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$msi_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_Empty_Scheduled_Task_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target"
}

$powershell_scheduledtask_radiobutton_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task"
}

$powershell_package_name_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Name (String)"
}

$powershell_package_version_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package Version (String)"
}

$powershell_create_package_dir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Creates package directory based on the chosen package folder (Config) and Package Name & Version"
}

$powershell_open_package_directory_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open Package\source directory; Here you can place additional files when needed."
}


$config_listbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Select a customer / tenant"
}

$config_customername_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Customer name"
}

$config_logfoldertarger_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source"
}

$config_packagefolder_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Tenant url is used for the upload function"
}

$helpbutton1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information."
}

$config_delete_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files (x86)\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click={
	#TODO: Place custom script here
	$config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1" -PathType Leaf))
		{
			$config_check_updates | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetupdate.ps1"
	}
	
}

$config_check_updates_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Exact Winget ID here; You can search for the Winget ID using Tabpage Tools"
}

$winget_checkurl_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows download URL in Popup window for chosen WingetID"
}

$winget_show_version_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Shows available versions for chosen WingetID; Output in textbox on the right side"
}

$hover_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_package_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_displayname_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)"
}

$versie_textbox2_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)"
}

$winget_locale_checkbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$global_selected_customer_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$config_listbox_SelectedValueChanged={
	#TODO: Place custom script here
	$hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Open *.msi file to use for this package."
}

$msi_packagenaam_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package name (string)."
}

$msi_versie_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Package version (string)."
}

$msi_buttonCreatePackageDirecto_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory"
}

$msi_OpenSourceDir_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Open source directory to open the source directory for your package.You can add extra files when needed."
}

$msi_install_par_textbox3_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. "
}

$msi_button1CreateInstallScript_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  "
}

$msi_test_install_button1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it."
}

$msi_uninstall_par_textbox1_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script"
}

$msi_button3CreateUninstallScri_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create uninstall script"
}

$msi_button4TestUninstallPowers_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. "
}

$msi_button5CreateIntunewinFile_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin"
}

$msi_buttonUploadLogoPNG_MouseHover={
	#TODO: Place custom script here
	$hover_textbox1.Text = "When you plan to use Upload function. Please chose PNG file first. Used in Company portal"
}

$winget_remediations_createscripts_button1_Click={
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile| Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Upload not yet available for Remediations.. For now use the Intune Admin Portal")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("Please reopen IntunePrepTool to create more Remediations scripts")
				
				
			}
		}
		
		
	}
	
	
	
	
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
	
	
	
}

$configToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $true
	$config_tabcontrol2.Visible = $true
	$config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_winget_tabcontrol2.Enabled = $true
	$package_winget_tabcontrol2.Visible = $true
	$package_winget_tabcontrol2.Dock = 'Fill'
}
$scheduledTaskToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	$package_ScheduledTask_tabcontrol2.Dock = 'Fill'
	$package_ScheduledTask_tabcontrol2.Enabled = $true
	$package_ScheduledTask_tabcontrol2.Visible = $true
}


$mSIToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $true
	$package_msi_tabcontrol2.Visible = $true
	$package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $true
	$package_exe_tabcontrol2.Visible = $true
	$package_exe_tabcontrol2.Dock = 'Fill'
}

$main_panel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$wingetUpdateToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false

	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Dock = 'Fill'
	$Remediations_winget_tabcontrol2.Enabled = $true
	$Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Dock = 'Fill'
	$package_weblink_tabcontrol2.Visible = $true
	$package_weblink_tabcontrol2.Enabled = $true
}



$intunewinToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	
	
	
	$upload_intunewin_tabcontrol2.Dock = 'Fill'
	$upload_intunewin_tabcontrol2.Enabled = $true
	$upload_intunewin_tabcontrol2.Visible = $true
	
}

$wingetSearchShowVersionToolStripMenuItem_Click={
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'none'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Enabled = $true
	$tools_winget_searchtabcontrol1.Visible = $true
	
}

$findUninstallStringsToolStripMenuItem_Click = {
	$download_tabcontrol1.Enabled = $false
	$download_tabcontrol1.Visible = $False
	$download_tabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'Fill'
	$tools_uninstallstring_tabcontrol1.Enabled = $true
	$tools_uninstallstring_tabcontrol1.Visible = $true
	
}

$sourceFromWingetToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$download_tabcontrol1.Enabled = $true
	$download_tabcontrol1.Visible = $true
	$download_tabcontrol1.Dock = 'Fill'
	$tools_winget_searchtabcontrol1.Dock = 'None'
	$tools_winget_searchtabcontrol1.Enabled = $false
	$tools_winget_searchtabcontrol1.Visible = $false
	$upload_intunewin_tabcontrol2.Dock = 'None'
	$upload_intunewin_tabcontrol2.Enabled = $false
	$upload_intunewin_tabcontrol2.Visible = $false
	$package_ScheduledTask_tabcontrol2.Dock = 'None'
	$package_ScheduledTask_tabcontrol2.Enabled = $false
	$package_ScheduledTask_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Dock = 'None'
	$package_weblink_tabcontrol2.Visible = $false
	$package_weblink_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Dock = 'None'
	$Remediations_winget_tabcontrol2.Enabled = $false
	$Remediations_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Enabled = $false
	$package_winget_tabcontrol2.Visible = $false
	$package_winget_tabcontrol2.Dock = 'None'
	$config_tabcontrol2.Enabled = $false
	$config_tabcontrol2.Visible = $false
	$config_tabcontrol2.Dock = 'None'
	$package_msi_tabcontrol2.Enabled = $false
	$package_msi_tabcontrol2.Visible = $false
	$package_msi_tabcontrol2.Dock = 'None'
	$package_exe_tabcontrol2.Enabled = $false
	$package_exe_tabcontrol2.Visible = $false
	$package_exe_tabcontrol2.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Dock = 'None'
	$tools_uninstallstring_tabcontrol1.Enabled = $false
	$tools_uninstallstring_tabcontrol1.Visible = $false
	
}


$Weblink_intunewin_tabpage6_Click={
	#TODO: Place custom script here
	
}

$weblink_packagename_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	
}

$remediations_winget_maxversion_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$winget_remediations_maxversion_checkbox_CheckedChanged={
	#TODO: Place custom script here
	
}

$remediate_winget_version_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_name_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$winget_remediations_wingetid_textbox1_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
}

$remadiations_winget_textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$remediations_winget_upload_button1_Click={
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	if ($winget_remediations_name -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected') }
	else
	{
		$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
		if ($winget_remediations_wingetid -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected') }
		else
		{
			$remediate_winget_version = $remediate_winget_version_textbox1.Text
			if ($remediate_winget_version -like $null) { [void][System.Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected') }
			else
			{
				
				$remediate_detectFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsDetection.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -Append
$Date = get-date
write-host $date
write-host "Detection of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

exit [int] (& $winget_exe list --id $WingetID | Select-String '\bVersion\s+Available\b' -Quiet)
Stop-Transcript

'@
				$remediate_remediateFile = @'
$WingetID = "!!wingetid!!"
$Name = "!!name!!"
$Version = "!!version!!"
$LogFolderTarget = "!!logfoldertarget!!"
$trancriptlocation = "$LogFolderTarget\$name$version-remediationsRemediate.txt"
#Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
	
	New-Item -ItemType Directory -Path $LogFolderTarget
}
Start-Transcript -Path $trancriptlocation -append
$Date = get-date
write-host $date
write-host "Upgrade of $WingetID"
write-host "Detection name : $Name"
write-host "Detection version: $version"
$winget_exe = Resolve-Path "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe"
if ($winget_exe.count -gt 1)
{
	$winget_exe = $winget_exe[-1].Path
}

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
Stop-Transcript

'@
				
				$remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
				$remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
				
				
				
			
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source"
				}
				$remediate_detectFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\detect.ps1" -Force -Encoding utf8
				$remediate_remediateFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\remediate.ps1" -Force -Encoding utf8
				$remadiations_winget_textbox2.Text = "Created detection.ps1 and remediate.ps1"
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				
			
				
				$encoding = [System.Text.Encoding]::UTF8
				$bytes = $encoding.GetBytes($remediate_detectFile)
				$Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
				$Bytes2 = $encoding.GetBytes($remediate_remediateFile)
				$Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
				$UploadRemediationsFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	6/5/2023 3:38 PM
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	upload.ps1
	===========================================================================
	.DESCRIPTION
		Part of IntunePrepTool
		https://github.com/rink-turksma/IntunePrepTool
		Upload Remediations to Intune
#>
	Write-Host "Script will install MSAL.PS powershell module from the Powershell Galery if needed." -ForegroundColor Green
	if (Get-Module -ListAvailable -Name MSAL.PS) { Import-Module -Name MSAL.PS -Force }
	else { Install-Module -name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name IMSAL.PS -Force }
	$displayName = "!!displayName!!"
	$publisher = "!!publisher!!"
	$detectionScriptContent = '!!detectionScriptContent!!'
	$remediationScriptContent = '!!remediationScriptContent!!'
	$tenantID = "!!tenantid!!"
	$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"; $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
	$MsalToken = Get-MsalToken -TenantId $tenantID -ClientId $ClientID -Scope 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri
	$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
	$uri = "https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts"
	$createdPolicy = Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{ Authorization = $MsalToken.CreateAuthorizationHeader() } -ContentType 'application/json'
	Write-Host "Remediationa policy created successfully with ID: $($createdPolicy.id)" -ForegroundColor Green
	Write-Host "Please assign and schedule with MS Intune Admin console" -ForegroundColor Green
	
'@
				$displayName = $winget_remediations_name_textbox1.Text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!publisher!!", $config_customername)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!displayName!!", $displayName)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!detectionScriptContent!!", $Encoded_remediate_detectFile)
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!remediationScriptContent!!", $Encoded_remediate_remediateFile )
				$tenatURL = $upload_tenantURL_textbox.text
				$UploadRemediationsFile = $UploadRemediationsFile.Replace("!!tenantid!!", $tenatURL)
				
				if (!(Test-Path -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output"
				}
				$UploadRemediationsFile | Out-File "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1" -Force
				$remadiations_winget_textbox2.AppendText("Created Upload.ps1")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
				$remadiations_winget_textbox2.AppendText("`r`n")
				$remadiations_winget_textbox2.AppendText("After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule")
				
				if ([System.Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					
					
					
					powershell_ise -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
				}
			}
		}
	}
	$remediations_winget_open_button1.Enabled = $true
	$remediations_winget_open_button1.Visible = $true
}

$remediations_winget_open_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$winget_remediations_name = $winget_remediations_name_textbox1.Text
	$winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
	$remediate_winget_version = $remediate_winget_version_textbox1.Text
	Invoke-Item "$config_packagefolder\$winget_remediations_name\$remediate_winget_version"
}

$powershell_scheduledtask_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	if ($powershell_scheduledtask_radiobutton.Checked -eq $true)
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $true
		$package_scheduled_task_WingetID_textbox.Visible = $true
		$package_scheduled_task_WingetID_label3.Enabled = $true
		$package_scheduled_task_WingetID_label3.Visible = $true
		$package_ScheduledTask_create_scripts_button1.Enabled = $true
		$package_ScheduledTask_create_scripts_button1.Visible = $true
		
		
	}
	else
	{
		$package_scheduled_task_WingetID_textbox.Enabled = $false
		$package_scheduled_task_WingetID_textbox.Visible = $false
		$package_scheduled_task_WingetID_label3.Enabled = $false
		$package_scheduled_task_WingetID_label3.Visible = $false
	
	}
}

$powershell_Empty_Scheduled_Task_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	$package_ScheduledTask_create_scripts_button1.Enabled = $true
	$package_ScheduledTask_create_scripts_button1.Visible = $true
}



$package_scheduledtasK_option_weekly_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
	{
		$package_scheduledtask_combobox1.Enabled = $true
		$package_scheduledtask_combobox1.Visible = $true
		$package_scheduledtask_time_combobox1.Enabled = $true
		$package_scheduledtask_time_combobox1.Visible = $true
		$package_scheduledtask_am_radiobutton1.Enabled = $true
		$package_scheduledtask_am_radiobutton1.Visible = $true
		$package_scheduledtask_pm_radiobutton.Enabled = $true
		$package_scheduledtask_pm_radiobutton.Visible = $true
		
	}
	else
	{
		$package_scheduledtask_combobox1.Enabled = $false
		$package_scheduledtask_combobox1.Visible = $false
		$package_scheduledtask_time_combobox1.Enabled = $false
		$package_scheduledtask_time_combobox1.Visible = $false
		$package_scheduledtask_am_radiobutton1.Enabled = $false
		$package_scheduledtask_am_radiobutton1.Visible = $false
		$package_scheduledtask_pm_radiobutton.Enabled = $false
		$package_scheduledtask_pm_radiobutton.Visible = $false
	
	}
}

$package_scheduledtask_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$datetimepicker1_ValueChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_time_combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_am_radiobutton1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_pm_radiobutton_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_textbox_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduledtask_winget_max_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_WingetID_label3_Click={
	#TODO: Place custom script here
	
}

$package_scheduled_Task_maxVersion_label4_Click={
	#TODO: Place custom script here
	
}

$powershell_create_package_dir_button1_Click={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 
	else
	{
		if ($powershell_package_name_textbox1.Text -like $null)
		{
			[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package name textbox', 'Select Package Name')
		}
		else
		{
			if ($powershell_package_version_textbox1.Text -like $null)
			{
				[void][System.Windows.Forms.MessageBox]::Show('You need to fill the package version textbox', 'Select Package Version')
			}
			else
			{
				$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
				$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
				$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
				$package_scheduledTask_name = $powershell_package_name_textbox1.Text
				$package_scheduledTask_version = $powershell_package_version_textbox1.text
			
			
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source"
				}
				if (!(Test-Path -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"))
				{
					
					New-Item -ItemType Directory -Path "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\output"
				}
				$package_ScheduledTask_output_textbox1.Text = "`nNew package direcotory created: `r`n"
				$package_ScheduledTask_output_textbox1.AppendText("$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$powershell_open_package_directory_button1.Enabled = $true
				$powershell_open_package_directory_button1.Visible = $true
				$package_ScheduledTask_create_scripts_button1.Enabled = $true
				$package_ScheduledTask_create_scripts_button1.Visible = $true
				
				
				
			}
		}
	}
}

$powershell_package_version_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$powershell_open_package_directory_button1_Click = {
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	
	Invoke-Item "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\"
}

$package_ScheduledTask_output_textbox1_TextChanged={
	#TODO: Place custom script here
	
}

$package_ScheduledTask_create_scripts_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	$package_scheduledtask_system_panel3.Visible = $true
	$package_scheduledtask_system_panel3.Enabled = $true
	

				
				$ScheduledTaskFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	"!!ps1name!!"
	===========================================================================
	.DESCRIPTION
		Please place your script between:
        "Place your Powershell code here" and "End of your Powershell script"
        When done. Save script and close Powershell_ISE
#>
#App Params
$package_scheduledTask_name  = "!!package_scheduledTask_name!!"
$package_scheduledTask_version = "!!package_scheduledTask_version!!"
#Customer vars
$logdir = "!!logdir!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$package_scheduledTask_name $package_scheduledTask_version.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$package_scheduledTask_name"
$excode = $null;
#create log directory in programdata when needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates dll directory in logdir when needed.
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates scheduledTasks directory in logdir when needed.
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
#Create registry key when needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates application key in registry when needed
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  This is saved in $logdir. Also used in EventViewer
Start-Transcript -Path $logfile
<# Place your Powershell code here#>






















<# End of your Powershell script#>
Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
if ($excode -eq 1) { $warning = 'Error'; }
else { $warning = 'Information'; }

if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs")
{
	if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) { remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false }
	copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
			$logdir = "$config_logfoldertarget\scheduledTasks"
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!ps1name!!", "scheduledTask_$package_scheduledTask_name.ps1")
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_name!!", $package_scheduledTask_name)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!package_scheduledTask_version!!", $package_scheduledTask_version)
				$ScheduledTaskFile = $ScheduledTaskFile.Replace("!!logdir!!", $logdir)
				$ScheduledTaskFile | Out-File  "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\scheduledTask_$package_scheduledTask_name.ps1" -Force -Confirm:$false -ErrorAction SilentlyContinue
				copy-item "IntunePrepTool_msgfile.dll" -Destination "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\IntunePrepTool_msgfile.dll" -Confirm:$false
				$package_ScheduledTask_output_textbox1.AppendText("Template script to be scheduled created")
				$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
				$package_ScheduledTask_output_textbox1.AppendText("Please add your Powershell code between 'Place your Powershell code here' and 'End of your Powershell script'")
			$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
			$package_ScheduledTask_output_textbox1.AppendText("Save when done")
				
				
	
		$package_scheduledTask_Edit_script_button1.Enabled = $true
		$package_scheduledTask_Edit_script_button1.Visible = $true
		$package_scheduledtasK_option_startup_checkbox1.Enabled = $true
		$package_scheduledtasK_option_startup_checkbox1.Visible = $true
		$package_scheduledtasK_option_weekly_checkbox1.Enabled = $true
		$package_scheduledtasK_option_weekly_checkbox1.Visible = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Enabled = $true
		$package_scheduled_task_createIntunewin_scripts_button1.Visible = $true
	}
	


$package_scheduledTask_Edit_script_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('Powershell_ISE will open now. Please place powershell code between "Place your Powershell code here" and "End of your Powershell script"; Save when done', 'Powershell_ISE') # Casting the method to [void] suppresses the output. 
	
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\scheduledTask_$package_scheduledTask_name.ps1"
	
	
	
}

$package_scheduledtasK_option_startup_checkbox1_CheckedChanged={
	#TODO: Place custom script here
	
}

$package_scheduled_task_createIntunewin_scripts_button1_Click={
	#TODO: Place custom script here

	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	
	if (($package_scheduledtasK_option_startup_checkbox1.Checked -eq $false) -and ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $false))
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Weekly or at startup', 'Please select at least one option when to run') # Casting the method to [void] suppresses the output. 
	}
	else
	{
		$package_scheduledTask_Edit_script_test_install_button1.Enabled = $true
		$package_scheduledTask_Edit_script_test_install_button1.Visible = $true
		$package_scheduledTask_Edit_script_test_uninstall_button1.Enabled = $true
		$package_scheduledTask_Edit_script_test_uninstall_button1.Visible = $true
		$package_scheduledTask_Edit_script_createIntuneWin_button1.Visible = $true
		$package_scheduledTask_Edit_script_createIntuneWin_button1.Enabled = $true
		
		
		$ScheduledTaskInstall = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.232
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	install.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
		When needed you can edit the creation of the scheduled task below
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$psFile = "!!psFile!!"
$StartupTask = "!!StartupTask!!"
$WeeklyTask = "!!WeeklyTask!!"
$WeeklyTaskDay = "!!WeeklyTaskDay!!" 
$WeeklyTaskHour = "!!WeeklyTaskHour!!"
$WeeklyTaskAMPM = "!!WeeklyTaskAMPM!!"

# Customer variables
$logDir = "!!LogDir!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
write-host "Script will copy the powershell script to be scheduled now" -ForegroundColor Green
if ( test-path "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -PathType Leaf ) { remove-item "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force  } 
write-host "Script will copy the powershell script to be scheduled now" -ForegroundColor Green
copy-item $psFile -Destination "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force

#Below the code to set the permissions on the scripts folder
write-host "Script will setup NTFS filepermissions for the directory $logdir\scheduledTasks" -ForegroundColor Green
# BEGIN: 3d5f4a6gch7
#Below the code to set the permissions on the scripts folder
write-host "Script will setup NTFS filepermissions for the directory $logdir\scheduledTasks" -ForegroundColor Green
$Acl = Get-Acl "$logdir\scheduledTasks"
$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrators","Modify","Allow")
$System = New-Object System.Security.Principal.NTAccount("SYSTEM")
$Ar2 = New-Object System.Security.AccessControl.FileSystemAccessRule($System,"Modify","Allow")
$Acl.SetAccessRule($Ar)
$Acl.SetAccessRule($Ar2)
Set-Acl "$logdir\scheduledTasks" $Acl
# END: 3d5f4a6gch7

try
{
	
	write-host "Scheduled Task created for $psFile" -ForegroundColor Green
	# Creates the scheduled task
	

$action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-NoProfile -WindowStyle Hidden -Command `"& '$logdir\scheduledTasks\scheduledTask_$appName.ps1'`""
if ($StartupTask -eq $true) {
	$trigger1 = New-ScheduledTaskTrigger -AtStartup -RandomDelay 00:00:30
}
else {
	$trigger1 = $null
}
if ($WeeklyTask -eq $true) {
	$trigger2 = New-ScheduledTaskTrigger -Weekly -DaysOfWeek $WeeklyTaskDay -At $WeeklyTaskHour$WeeklyTaskAMPM
}
else {
	$trigger2 = $null
}
if (($trigger1 -eq $null) -and ($trigger2 -ne $null)) {
    $triggers = @($trigger2)
}
if (($trigger1 -ne $null) -and ($trigger2 -eq $null)) {
    $triggers = @($trigger1)
}
if (($trigger1 -ne $null) -and ($trigger2 -ne $null)) {
    $triggers = @($trigger1, $trigger2)
}
$principal = New-ScheduledTaskPrincipal -UserID "SYSTEM" -LogonType ServiceAccount -RunLevel Highest
Register-ScheduledTask -Action $action -Trigger $triggers -Principal $principal -TaskName $appName -Description "Scheduled Task for $appName" -Force -ErrorAction Stop
write-host "Scheduled Task created for $psFile" -ForegroundColor Green

	$excode = 0;
	
}
catch
{
	write-host "Error creating scheduled task" -ForegroundColor Yellow
	Write-Host "installation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}



Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { [System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)  }
else {
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
fDetectionInRegistry -succes $true }
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
		
		$ScheduledTaskUnInstall = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.232
	 Created on:   	10/24/2023
	 Created by:   	Rink Turksma
	 Organization: 	https://github.com/rink-turksma/IntunePrepTool
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
		When needed you can edit the deletion of the scheduled task below
#>
# App Parameters
$appName = "!!AppName!!"
$version = "!!Version!!"
$psFile = "!!psFile!!"
$StartupTask = "!!StartupTask!!"
$WeeklyTask = "!!WeeklyTask!!"
$WeeklyTaskDay = "!!WeeklyTaskDay!!" 
$WeeklyTaskHour = "!!WeeklyTaskHour!!"
$WeeklyTaskAMPM = "!!WeeklyTaskAMPM!!"

# Customer variables
$logDir = "!!LogDir!!"
# Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
if (!(Test-Path -Path "$logdir\scheduledTasks"))
{
	
	New-Item -ItemType Directory -Path "$logdir\scheduledTasks"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}
function fDetectionInRegistry
{
	### Function responsible for successful or unsuccessful execution.
	### Ultimately, you will have, for example:
	### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With a Version value and a [BOOL]Success value
	### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}
Start-Transcript -Path $logfile
#Start; Write Log file
write-host "Script will delete the powershell script used by the task" -ForegroundColor Green
if ( test-path "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -PathType Leaf ) { remove-item "$logdir\scheduledTasks\scheduledTask_$appName.ps1" -Confirm:$false -Force  } 


try
{
	# Script deletes the scheduled task here
	write-host "Script will delete the scheduled task" -ForegroundColor Green
	Unregister-ScheduledTask -TaskName $appName -Confirm:$false -ErrorAction Stop
	write-host "Scheduled Task deleted" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
	write-host "Error with deleting scheduled task" -ForegroundColor Yellow
	Write-Host "Uninstallation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}



Stop-Transcript
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
	$lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) { [System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)  }
else {
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
remove-item $regKeyApp -Confirm:$false -force }
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}

'@
		
		
		
		$psfile = "scheduledTask_$package_scheduledTask_name.ps1"
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!AppName!!", $package_scheduledTask_name)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!Version!!", $package_scheduledTask_version)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!psFile!!", $psfile)
		$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!LogDir!!", $config_logfoldertarget)
		

		if ($package_scheduledtasK_option_startup_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $true)
		}
		else
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $false)
		}
		if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTask!!", $true)
			$WeeklyTaskDay = $package_scheduledtask_combobox1.Text
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskDay!!", $WeeklyTaskDay)
			$weeklyTaskHour = $package_scheduledtask_time_combobox1.Text
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskHour!!", $weeklyTaskHour)
			if ($package_scheduledtask_am_radiobutton1.Checked -eq $true)
			{
				$WeeklyTaskAMPM = "AM"
			}
			else
			{
				$WeeklyTaskAMPM = "PM"
			}
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTaskAMPM!!", $WeeklyTaskAMPM )
			
		}
		else
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!WeeklyTask!!", $false)
		}
		$ScheduledTaskInstall | Out-File "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\install.ps1" -force
		
		$psfile = "scheduledTask_$package_scheduledTask_name.ps1"
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!AppName!!", $package_scheduledTask_name)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!Version!!", $package_scheduledTask_version)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!psFile!!", $psfile)
		$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!LogDir!!", $config_logfoldertarget)
		
		
		if ($package_scheduledtasK_option_startup_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskInstall = $ScheduledTaskInstall.Replace("!!StartupTask!!", $true)
		}
		else
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!StartupTask!!", $false)
		}
		if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTask!!", $true)
			$WeeklyTaskDay = $package_scheduledtask_combobox1.Text
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTaskDay!!", $WeeklyTaskDay)
			$weeklyTaskHour = $package_scheduledtask_time_combobox1.Text
			$ScheduledTaskUnInstall= $ScheduledTaskUnInstall.Replace("!!WeeklyTaskHour!!", $weeklyTaskHour)
			if ($package_scheduledtask_am_radiobutton1.Checked -eq $true)
			{
				$WeeklyTaskAMPM = "AM"
			}
			else
			{
				$WeeklyTaskAMPM = "PM"
			}
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTaskAMPM!!", $WeeklyTaskAMPM)
			
		}
		else
		{
			$ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace("!!WeeklyTask!!", $false)
		}
		$ScheduledTaskUnInstall | Out-File "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\uninstall.ps1" -force
		
		$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
		$package_ScheduledTask_output_textbox1.AppendText("Install and uninstall.ps1 created'")
		$package_ScheduledTask_output_textbox1.AppendText(" `r`n")
		$package_ScheduledTask_output_textbox1.AppendText("Please test. When ready click on create Intunewin file")
		
		

		
	}
	
	
	
	
}

$windowsFirewallToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$config_InstallRequriedPSmodules_Click={
	#TODO: Place custom script here
	$config_install_required_ps_modules = @'
Write-Host "Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client) { Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Microsoft.WinGet.Client -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

Write-Host "Script will install Evergreen powershell module from the Powershell Galery if needed." -ForegroundColor Green
if (Get-Module -ListAvailable -Name Evergreen) { Import-Module -Name Evergreen -Force; Write-Host "Powershell module already installed" -ForegroundColor Green }
else { Install-Module -name Evergreen -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False; Import-Module -Name Evergreen -Force; Write-Host "Installed Powershell module" -ForegroundColor Green }

'@
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -PathType Leaf))
		{
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		else
		{
			Remove-Item -Path "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1" -Confirm:$false -Force
			$config_install_required_ps_modules | Out-File "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
		}
		
		powershell_ise -file "C:\Program Files (x86)\IntunePrepTool\wingetinstallpsmodules.ps1"
	}
}

$downloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$wingetToolStripMenuItem1_Click={
	#TODO: Place custom script here
	
}

$config_download_folder_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$config_downloadFolderBrowse_Click={
	#TODO: Place custom script here
	if ($config_download_folderbrowsermoderndialog2.ShowDialog() -eq 'OK')
	{
		$config_download_folder_textbox3.Text = $config_download_folderbrowsermoderndialog2.SelectedPath
	}
}

$download_winget_tab_Click={
	#TODO: Place custom script here
	
}

$download_winget_search_button1_Click={
	
	$downloadWingetSearchText = $download_winget_search_textbox5.Text
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$downloadwingetsearch = winget search --name $downloadWingetSearchText --accept-source-agreements
	$download_winget_output_textbox3.Text = $null
	
	$download_winget_listbox1.Items.Clear()
	$download_winget_version_listbox1.Items.Clear()
	
	
	$table_download_winget = New-Object System.Data.DataTable;
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "ID";
	$table_download_winget.Columns.Add($column_download_winget);
	$column_download_winget = New-Object System.Data.DataColumn;
	$column_download_winget.DataType = [System.Type]::GetType("System.String");
	$column_download_winget.ColumnName = "Name";
	$table_download_winget.Columns.Add($column_download_winget);
	
	

	foreach ($wsearch_l in $downloadwingetsearch)
	{
		
		if ($wsearch_l -like "Name*")
		{
			$wsearch_IdStart = $wsearch_l.IndexOf("Id")
			$wsearch_VersionStart = $wsearch_l.IndexOf("Version")
			$wsearch_MatchStart = $wsearch_l.IndexOf("Match")
			$wsearch_SourceStart = $wsearch_l.IndexOf("Source")
			
		}
		
		if (($wsearch_l -notlike "Name*") -and ($wsearch_l -notlike "---*") -and ($wsearch_l -notlike "   -*"))
		{
			
			$row_download_winget = $table_download_winget.NewRow();
			$download_winget_extraStrip = $wsearch_l.substring(0, $wsearch_IdStart)
			$download_winget_extraStrip = $download_winget_extraStrip.TrimEnd()
			$row_download_winget["Name"] = $download_winget_extraStrip
			$split = $wsearch_VersionStart - $wsearch_IdStart
			$row_download_winget["ID"] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [System.StringSplitOptions]::RemoveEmptyEntries) -join ''
			
			if ($row_download_winget["ID"] -notlike $null)
			{
				$table_download_winget.Rows.Add($row_download_winget);
				$download_winget_listboxInput = $row_download_winget| Select Name,ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
				$download_winget_listbox1.Items.Add($download_winget_listboxInput)
			}
			## - Save changes to the table:
			$table_download_winget.AcceptChanges();
			
			#$download_datagridview1.DataSource = $table_download_winget
			
			#$download_winget_listboxInput = $table_download_winget | Select Name, ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
			#$download_winget_listbox1.DataSource = $download_winget_listboxInput
			
			
			
		}
		
	}
	
	
	
}

$download_winget_search_textbox5_TextChanged={
	#TODO: Place custom script here
	if ($config_listbox.SelectedItem -eq $null)
	{
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
	} # Casting the method to [void] suppresses the output. 

}

$download_winget_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_version_listbox1.Items.Clear()
	
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	$downloadwingetsearchversionselected = winget show --id $winget_download_selected_id --versions --accept-source-agreements
	
	
	foreach ($wsearch_55 in $downloadwingetsearchversionselected)
	{
		
		
		if (($wsearch_55 -notlike "Found*") -and ($wsearch_55 -notlike "*-*") -and ($wsearch_55 -notlike "*Version*") -and ($wsearch_55 -notlike $null) -and ($wsearch_55 -notlike "* *"))
		{
			
			$download_winget_version_listbox1.Items.Add($wsearch_55)
			
			
		}
		
	}
	
	
	
	
}

$download_datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	#Write-Host $download_datagridview1.SelectedRows.Item.ToString()
}

$download_winget_version_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	$download_winget_download_and_add_button1.Visible = $true
	$download_winget_download_and_add_button1.Enabled = $true
}

$download_winget_download_and_add_button1_Click={
	#TODO: Place custom script here
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	$download_winget_explorer_button1.Enabled = $true
	$download_winget_explorer_button1.Visible = $true
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	$winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
	$winget_download_selected_id = $winget_download_selected_id.ToString()
	$winget_download_selected_id = $winget_download_selected_id.Split(",")[1]
	$winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
	if (!(Test-Path -Path $download_winget_path))
	{
		
		New-Item -ItemType Directory -Path $download_winget_path
	}
	#$downloadWingetToLib = winget download --download-directory $download_winget_path --id $winget_download_selected_id --accept-package-agreements --accept-source-agreements
	
	#$download_winget_output_textbox3.Text = $downloadWingetToLib
	#$config_downloadpath
	#Write-Host $download_winget_version_listbox1.SelectedItem
	$download_winget_selectedversion = $download_winget_version_listbox1.SelectedItem
	$download_winget_package = @'
winget download --download-directory !!@download_winget_path@!! --id !!@winget_download_selected_id@!! --accept-package-agreements --accept-source-agreements --version !!@download_winget_selectedversion@!!
'@
	
	$download_winget_package = $download_winget_package.Replace("!!@winget_download_selected_id@!!", $winget_download_selected_id)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_selectedversion@!!", $download_winget_selectedversion)
	$download_winget_package = $download_winget_package.Replace("!!@download_winget_path@!!", $download_winget_path)
	if (!(Test-Path "C:\Program Files (x86)\IntunePrepTool\" -PathType Container))
	{
		[void][System.Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
	}
	else
	{
		if (!(Test-Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -PathType Leaf))
		{
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		else
		{
			Remove-Item -Path "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1" -Confirm:$false -Force
			$download_winget_package | Out-File "C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1"
		}
		
		powershell_ise 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1'
	}
	
}


$download_winget_explorer_button1_Click={
	#TODO: Place custom script here
	$config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
	$download_winget_path = "$config_downloadpath\winget"
	explorer $download_winget_path
}

$config_help_button1_Click={
	#TODO: Place custom script here
	
}

$config_exit_help_button1_Click={
	#TODO: Place custom script here
	
}

$exe_maak_uninstall_script_button1_Click={
	#TODO: Place custom script here
	$exe_maak_intuneWIN_button1.Enabled = $true
	$exe_maak_intuneWIN_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	$exe_uploadlogo_button1.Enabled = $true
	$exe_uploadlogo_button1.Visible = $true
	
	$exe_uninstallFile = @'
<#	
    .NOTES
    ===========================================================================
     Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
     Created on:   	21-5-2023 18:04
     Created by:   	Rink Turksma
     Organization: 	
     Filename:     	uninstall.ps1
    ===========================================================================
    .DESCRIPTION
        Parameters will be filled by IntunePrepTool.
#>
#App Parameters
$appName = "!!AppName!!"
$version = "!!version!!"
$exeFile = "!!EXEFile!!"
$exeParameters = "!!EXEPARMS!!" ##Check EXE PARAMETERS.. 
#Customer variables
$logDir = "!!logdir!!"
$registerDetectionRoot = "!!RegisterDetectionroot!!"
#Dynamic variables
$logFile = $(Join-Path $logDir  "$appName$version.txt")
$msiLogFileName = $appName + $version + "MSI"
$msiLogFile = $(Join-Path $logDir  "$msiLogFileName.txt")
$regKeyRoot = "HKLM:\Software\$registerDetectionRoot"
$regKeyApp = "$regKeyRoot\$appName"
$exeCode = $null;
#Create log directory in programdata if it does not exist.
if (!(Test-Path -Path $logDir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regkeyRoot))
{
    New-Item $regkeyRoot -ItemType Key -Force | out-null
}
# Creates the application Key in the Registry Root.
if (!(Test-Path -Path $regkeyApp))
{
    New-Item $regkeyApp -ItemType Key -Force | out-null
}



function fDetectionInRegistry
{
	### Function ensures successful or unsuccessful execution..
	### Eventually you will have, for example:
	#### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
	### With Versie value en een [BOOL]Succes waarde
	### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}

#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Transcript.  
#The code you provided is a comment in PowerShell. It indicates that the following code block is related to a transcript that will be saved in a text file under the $logdir directory and will also be available in the event viewer.
Start-Transcript -Path $logfile
#Start; Write Log file
try
{
	Start-Process -FilePath $EXEFile -ArgumentList $exeParameters -ErrorAction Stop -wait
	write-host "Uninstall completed" -ForegroundColor Green
	$excode = 0;
	
}
catch
{
    write-host "Error executing $EXEbestand" -ForegroundColor Yellow
	Write-Host "Uinstallation failed" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
	$excode = 1;
	
}
### Place extra actions here:





<#----Below is the end of the installation script---#>
#Now the Transcript logging is started
Stop-Transcript
#After this command, the log is automatically saved in the $logdir location
#Here is a way to split the log so that we only have the last run.
$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 32600)
{
    $lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try / catch block in the execution, we set $excode to 0 or 1
# Based on this, the Log in the Event viewer is set to Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful application message or an unsuccessful one.
if ($excode -eq 1) { $warning = 'Error';  }
else { $warning = 'Information'; remove-item $regkeyApp }
#End; Write Log file
if ($warning -like 'Information')
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
	
}
Else
{
	
	[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
	
}
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	$msi_uninstallFile = @'
<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
	 Created on:   	21-5-2023 17:57
	 Created by:   	Rink Turksma
	 Organization: 	
	 Filename:     	uninstall.ps1
	===========================================================================
	.DESCRIPTION
		Parameters will be filled by IntunePrepTool.
#>

$appNaam = "!!AppNaam!!"
$versie = "!!versie!!"
<#

#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
Please see u.cmd for MSI parameters used by this script.

#>
$logdir = "!!logdir!!"
$RegisterDetectionroot = "!!RegisterDetectionroot!!"
#Dyn vars
$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
$filenaamMSILog = $appNaam + $versie + "MSI"
$logfileMSI = $(Join-Path $logdir  "$filenaamMSILog.txt")
$regkeyRoot = "HKLM:\Software\$RegisterDetectionroot"
$regkeyApp = "$regkeyRoot\$appNaam"
$excode = $null;


#Creates Log directory if needed.
if (!(Test-Path -Path $logdir))
{
	
	New-Item -ItemType Directory -Path $logdir
}
#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path "$logdir\dll"))
{
	
	New-Item -ItemType Directory -Path "$logdir\dll"
}
#Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
	New-Item $regkeyRoot -ItemType Key -Force | out-null
}
#Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
	New-Item $regkeyApp -ItemType Key -Force | out-null
}

#Function for Detection in Registry

function fDetectionInRegistry
{
	param
	(
		[Parameter(Mandatory = $true)]
		[bool]$Succes
	)
	
	try
	{
		$AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop
		if ($AppRegVersie.Versie -ne $versie) { set-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Versie -Value $Versie -PropertyType string
	}
	try
	{
		$AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop
		if ($AppRegSucces.Succes -ne $Succes) { set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes }
	}
	catch
	{
		new-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string
	}
}


#Setup Script Location
Set-Location $PSScriptRoot
#Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path "$logdir\dll\IntunePrepTool_msgfile.dll" -PathType Leaf))
{
	copy-item "IntunePrepTool_msgfile.dll" -Destination "$logdir\dll\IntunePrepTool_msgfile.dll" -Confirm:$false
}
## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" | Select Name | where { $_.Name -eq "IntunePrepTool" } -eq $null)
{
	New-Item -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\" -Name "IntunePrepTool" -ErrorAction SilentlyContinue
}

try
{
	
	$TypesSupported = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -ErrorAction Stop
	if ($TypesSupportede.TypesSupported -ne "7") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name TypesSupported -Value "7" -PropertyType DWORD
}
try
{
	
	$EventMessageFile = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -ErrorAction Stop
	if ($EventMessageFile.EventMessageFile -ne "$logdir\dll\IntunePrepTool_msgfile.dll") { set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" }
	
}
catch
{
	new-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool" -Name EventMessageFile -Value "$logdir\dll\IntunePrepTool_msgfile.dll" -PropertyType string
}
#New EventLog when needed.
try
{
	$checkEventLog = Get-EventLog -LogName "IntunePrepTool" -Source "IntunePrepTool" -ErrorAction Stop
}
catch
{
	New-EventLog -MessageResourceFile "$logdir\dll\IntunePrepTool_msgfile.dll" -LogName "IntunePrepTool" -Source "IntunePrepTool"
	[System.Diagnostics.EventLog]::CreateEventSource("IntunePrepTool", "IntunePrepTool")
}

#Start Script
Start-Transcript -Path $logfile
try
{
	$startPMSI = start-process u.cmd -wait -erroraction stop -WindowStyle Hidden
	write-host $startPMSI
	write-host "Uninstall done!" -ForegroundColor Green
	write-host "Please check MSIEXEC log below" -ForegroundColor Green
	write-host $logfileMSI -ForegroundColor Green
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
	Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Green
	$excode = 0
}
catch
{
	
	Write-Host "Uninstall failed" --ForegroundColor Red -BackgroundColor Blue
    Write-Host "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
    Write-Host "See log file from MSI why this is not working.:" -ForegroundColor Red -BackgroundColor Blue
    Write-Host $logfileMSI -ForegroundColor Red -BackgroundColor Blue
	$MSILOGS = get-content $logfileMSI 
	$MSILOGS
    Write-Host "See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes" -ForegroundColor Red -BackgroundColor Blue
    $excode = 1


	$startPMSI
	$excode = 1
}


#End Script
Stop-Transcript

$split = [regex]::Escape("**********************")
$lastRun = ((Get-Content $logfile -Raw) -split ($split))[-3]
if ($lastRun.Length -gt 30000)
{
	$lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) { 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Error", 0x3)
}
else { remove-item $regkeyApp 
[System.Diagnostics.EventLog]::WriteEntry("IntunePrepTool", $lastRun, "Information", 0x3)
}

#Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs") {
if (test-path "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -PathType Leaf) {remove-item "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Confirm:$false } 
copy-item "c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx" "C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx" -Force -Confirm:$false
}
'@
	
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		$versie = $exe_versie_textbox1.text
		$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
		$MSIPARSInput = '"' + $exe_msiexecuninstall.Text + '"'
		
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
		$msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
		$msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
		
		try
		{
			$exepnaam = $exe_packagenaam_textbox1.text
			$exeversie = $exe_versie_textbox1.text
			$outputDirectory = $config_packagefolder
			$jjmsii = $exe_msiexecuninstall.text
			
			$jjmsii | Out-File "$outputDirectory\$exepnaam\$exeversie\source\u.cmd" -encoding ascii -Force -ErrorAction Stop
			$msi_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
			$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
			$exe_output_textbox1.AppendText("`nu.cmd created `r`n")
			$exe_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
			
			
		}
		catch
		{
			$exe_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
		}
		
		
	}
	else
	{
		
		if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
		{
			$EXEbestand = $exe_uninstall_exe_path_textbox2.Text
			
		}
		else
		{
			$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
		}
	
	
	
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	
	$logdir = $config_logfoldertarget
	$RegisterDetectionroot = "Intune_" + $config_customername
	$versie = $exe_versie_textbox1.text
	#$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
	$appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
	$EXEPARSInput = $exe_parsInstall_textbox1.Text
	
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppName!!"', $appnaam)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
	$exe_uninstallFile = $exe_uninstallFile.Replace('!!version!!', $versie)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEFile!!"', $EXEbestand)
	$exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
	$exepnaam = $exe_packagenaam_textbox1.text
	$exeversie = $exe_versie_textbox1.text
	$outputDirectory = $config_packagefolder
	
	try
	{
		$exe_uninstallFile | Out-File "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1" -Force -ErrorAction Stop
		$exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
	}
	catch
	{
		$exe_output_textbox1.AppendText("`nUbinstall.ps1 NIET created `r`n")
	}
	}
}

$exe_radiobutton3_CheckedChanged={
	#TODO: Place custom script here
	if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $true
		$exe_uninstall_exe_path_textbox2.Visible = $true
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		
	}
	if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_msiexecuninstall.Enabled = $false
		$exe_msiexecuninstall.Visible = $false
		
	}
	if ($exe_radiobutton3.Checked -eq $true)
	{
		$exe_uninstall_exe_path_textbox2.Enabled = $false
		$exe_uninstall_exe_path_textbox2.Visible = $false
		$exe_parsUnInstall_textbox1.Enabled = $false
		$exe_parsUnInstall_textbox1.Visible = $false
		$exe_msiexecuninstall.Enabled = $true
		$exe_msiexecuninstall.Visible = $true
		$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
		$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
		$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
		$exepnaam = $exe_packagenaam_textbox1.text
		$exeversie = $exe_versie_textbox1.text
		$appNaam = $exepnaam
		$versie = $exeversie
		#$msi_openfiledialog1.SafeFileName
		#klant variabelen
		$logdir = $config_logfoldertarget
		$RegisterDetectionroot = "Intune_" + $config_customername
		#Dyn vars
		$logfile = $(Join-Path $logdir  "$appnaam$versie.txt")
		$filenaamMSILog = $appNaam + $versie + "MSI"
		$logfileMSI = "$(Join-Path $logdir  "$filenaamMSILog.txt")"
		$exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
		
	}
	$exe_labelVoorbeeldUninstall.Visible = $false
	$exe_labelVoorbeeldUninstall.Enabled = $false
	$exe_test_uninstall_button1.Enabled = $true
	$exe_test_uninstall_button1.Visible = $true
	$exe_maak_uninstall_script_button1.Enabled = $true
	$exe_maak_uninstall_script_button1.Visible = $true
	
	
}

$exe_msiexecuninstall_TextChanged={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_search_button1_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Searching: `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	$wattezoeken = $tools_uninstallstring_search_textbox3.Text
	$InstallsUninstallString = $InstallsUninstallString | where-object { $_.DisplayName -contains $wattezoeken -or $_.DisplayName -match $wattezoeken } 
	
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
	
}

$tools_uninstallstring_search_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$buttonSearch32Bit_Click={
	#TODO: Place custom script here
	$tools_uninstallstring_textbox2.Text = "Searching: `r`n"
	
	$InstallsUninstallString = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object InstallDate
	$wattezoeken = $tools_uninstallstring_search_textbox3.Text
	$InstallsUninstallString = $InstallsUninstallString | where-object { $_.DisplayName -contains $wattezoeken -or $_.DisplayName -match $wattezoeken }
	
	
	foreach ($ius in $InstallsUninstallString)
	{
		
		
		$tools_uninstallstring_textbox2.AppendText("`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayName: " + $ius.DisplayName + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("DisplayVersion: " + $ius.DisplayVersion + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("InstallDate: " + $ius.InstallDate + "`r`n")
		$tools_uninstallstring_textbox2.AppendText("Uninstallstring: " + $ius.UninstallString + "`r`n")
	}
}

$download_winget_explorer_button1_Click={
	#TODO: Place custom script here
	
}

$download_winget_download_and_add_button1_Click={
	#TODO: Place custom script here
	
}

$download_winget_version_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$download_winget_listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$download_winget_search_button1_Click={
	#TODO: Place custom script here
	
}

$download_winget_search_textbox5_TextChanged={
	#TODO: Place custom script here
	
}

$download_winget_tab_Click={
	#TODO: Place custom script here
	
}

$buttonSearch32Bit_Click={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_search_button1_Click={
	#TODO: Place custom script here
	
}

$tools_uninstallstring_search_textbox3_TextChanged={
	#TODO: Place custom script here
	
}

$exe_msiexecuninstall_TextChanged={
	#TODO: Place custom script here
	
}

$exe_radiobutton3_CheckedChanged={
	#TODO: Place custom script here
	
}

$exe_maak_uninstall_script_button1_Click={
	#TODO: Place custom script here
	
}

$config_downloadFolderBrowse_Click={
	#TODO: Place custom script here
	
}

$config_download_folder_textbox3_TextChanged={
	#TODO: Place custom script here
	
}


$package_scheduledTask_Edit_script_test_install_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\install.ps1"
}

$package_scheduledTask_Edit_script_test_uninstall_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$package_scheduledTask_name = $powershell_package_name_textbox1.Text
	$package_scheduledTask_version = $powershell_package_version_textbox1.text
	powershell_ise "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\uninstall.ps1"
}

$package_scheduledTask_Edit_script_createIntuneWin_button1_Click={
	#TODO: Place custom script here
	Set-Location $PSScriptRoot
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	[void][System.Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$msipnaam = $powershell_package_name_textbox1.Text
	$msiversie = $powershell_package_version_textbox1.text
	$outputDirectory = $config_packagefolder
	$RegisterDetectionroot = "Intune_" + $config_customername
	$package_ScheduledTask_output_textbox1.Text = "Creation of Intunewin file has started. Please wait."
	& .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
	Rename-Item -Path "$outputDirectory\$msipnaam\$msiversie\output\install.intunewin" -NewName "$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin"
	$package_ScheduledTask_output_textbox1.AppendText("`nIntunewin file created: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
	$package_ScheduledTask_output_textbox1.AppendText("`r`n")
	
	$package_ScheduledTask_output_textbox1.AppendText("Install command is: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("un-install command is: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection registry is: `r`n")
	$regkeyRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\$RegisterDetectionroot\"
	$regkeyApp = "$regkeyRoot$msipnaam\"
	$regkeyApp
	$package_ScheduledTask_output_textbox1.AppendText("$regkeyApp `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Please reopen tool to make another Intunewin package `r`n")
	
	class CSNIntuneWinPackageConfig {
		[string]$IntuneWinFile
		[string]$DisplayName
		[string]$Publisher
		[string]$AppVersion
		[string]$reglocation
		[string]$regValue
		[string]$installCMD
		[string]$uninstallCMD
	}
	$CSNIntuneWinPackageConfig = $null;
	$CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
			IntuneWinFile = "$msipnaam.intunewin"
			DisplayName   = $msipnaam
			Publisher	  = $config_customername
			AppVersion    = $msiversie;
			reglocation   = $regkeyApp
			regValue	  = 'Versie'
			installCMD    = "powershell -executionpolicy bypass -file install.ps1"
			uninstallCMD  = "powershell -executionpolicy bypass -file uninstall.ps1"
		})
	
	$CSNIntuneWinPackageConfig | Export-Csv "$outputDirectory\$msipnaam\$msiversie\output\config.csv" -NoTypeInformation
	$config_csv_openfiledialog1.InitialDirectory = "$outputDirectory\$msipnaam\$msiversie\output\"
	$package_ScheduledTask_output_textbox1.AppendText("Config.csv written to: `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
	$package_ScheduledTask_output_textbox1.AppendText("  `r`n")
	$package_scheduledTask_Edit_script_UploadLogo_button1.Enabled = $true
	$package_scheduledTask_Edit_script_UploadLogo_button1.Visible = $true
	$package_ScheduledTask_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
	$package_ScheduledTask_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$package_scheduledTask_Edit_script_UploadLogo_button1_Click={
	#TODO: Place custom script here
	$config_packagefolder = Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script
	$config_logfoldertarget = Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script
	$config_customername = Get-Variable -Name 'config_customername' -ValueOnly -Scope Script
	$UploadLogo_openfiledialog1.ShowDialog()
	[string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
	$exepnaam = $powershell_package_name_textbox1.text
	$exeversie = $powershell_package_version_textbox1.text
	$outputDirectory = $config_packagefolder
	Copy-Item -Path $logo_org_path -Destination "$outputDirectory\$exepnaam\$exeversie\output\logo.png" -ErrorAction Stop
	$exe_output_textbox1.AppendText("`r`n")
	$exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	if([System.Windows.Forms.MessageBox]::Show("Click yes to open the upload screen. Then load the $outputDirectory\$exepnaam\$exeversie\output\config.csv file there", 'Upload Now?',[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		$package_ScheduledTask_tabcontrol2.Enabled = $false
		$package_ScheduledTask_tabcontrol2.Visible = $false
	
		
		$upload_intunewin_tabcontrol2.Enabled = $true
		$upload_intunewin_tabcontrol2.Visible = $true
		$upload_intunewin_tabcontrol2.Dock = 'Fill'
	}
	
}

$reloadToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$reloadIntunePrepToolToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$reopenIntunePrepToolToCreateNewPackageToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$reopenIntunePrepToolToolStripMenuItem_Click={
	#TODO: Place custom script here
$ReloadIntunePrepTool = @'
	Set-Location "C:\Program Files\IntunePrepTool\"
	taskkill.exe /F /IM "IntunePrepTool.exe"
	& "C:\Program Files\IntunePrepTool\IntunePrepTool.exe"
'@
	if (Test-Path "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1")
	{
		powershell.exe -file "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1"
	}
	else
	{
		$ReloadIntunePrepTool | Out-File "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1" -Confirm:$false -Force
		Start-Sleep 1
		powershell -file "c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1"
	}
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">548</Line>
    <Line Disabled="True">1336</Line>
    <Line Disabled="True">1338</Line>
    <Line Disabled="False">1796</Line>
    <Line Disabled="False">3215</Line>
    <Line Disabled="False">4794</Line>
    <Line Disabled="True">5546</Line>
    <Line Disabled="True">5548</Line>
    <Line Disabled="True">5654</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>